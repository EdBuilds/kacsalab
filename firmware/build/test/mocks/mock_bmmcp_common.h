/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_BMMCP_COMMON_H
#define _MOCK_BMMCP_COMMON_H

#include "bmmcp_common.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_bmmcp_common_Init(void);
void mock_bmmcp_common_Destroy(void);
void mock_bmmcp_common_Verify(void);




#define BMMCP_read_msg_IgnoreAndReturn(cmock_retval) BMMCP_read_msg_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BMMCP_read_msg_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BMMCP_return_t cmock_to_return);
#define BMMCP_read_msg_ExpectAndReturn(bmmcp_handle, received_packet, cmock_retval) BMMCP_read_msg_CMockExpectAndReturn(__LINE__, bmmcp_handle, received_packet, cmock_retval)
void BMMCP_read_msg_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle, BMMCP_universal_packet_t* received_packet, BMMCP_return_t cmock_to_return);
typedef BMMCP_return_t (* CMOCK_BMMCP_read_msg_CALLBACK)(BMMCP_handle_t* bmmcp_handle, BMMCP_universal_packet_t* received_packet, int cmock_num_calls);
void BMMCP_read_msg_StubWithCallback(CMOCK_BMMCP_read_msg_CALLBACK Callback);
#define BMMCP_read_msg_ReturnThruPtr_bmmcp_handle(bmmcp_handle) BMMCP_read_msg_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, sizeof(*bmmcp_handle))
#define BMMCP_read_msg_ReturnArrayThruPtr_bmmcp_handle(bmmcp_handle, cmock_len) BMMCP_read_msg_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, (int)(cmock_len * (int)sizeof(*bmmcp_handle)))
#define BMMCP_read_msg_ReturnMemThruPtr_bmmcp_handle(bmmcp_handle, cmock_size) BMMCP_read_msg_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, cmock_size)
void BMMCP_read_msg_CMockReturnMemThruPtr_bmmcp_handle(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle, int cmock_size);
#define BMMCP_read_msg_ReturnThruPtr_received_packet(received_packet) BMMCP_read_msg_CMockReturnMemThruPtr_received_packet(__LINE__, received_packet, sizeof(*received_packet))
#define BMMCP_read_msg_ReturnArrayThruPtr_received_packet(received_packet, cmock_len) BMMCP_read_msg_CMockReturnMemThruPtr_received_packet(__LINE__, received_packet, (int)(cmock_len * (int)sizeof(*received_packet)))
#define BMMCP_read_msg_ReturnMemThruPtr_received_packet(received_packet, cmock_size) BMMCP_read_msg_CMockReturnMemThruPtr_received_packet(__LINE__, received_packet, cmock_size)
void BMMCP_read_msg_CMockReturnMemThruPtr_received_packet(UNITY_LINE_TYPE cmock_line, BMMCP_universal_packet_t* received_packet, int cmock_size);
#define BMMCP_read_msg_IgnoreArg_bmmcp_handle() BMMCP_read_msg_CMockIgnoreArg_bmmcp_handle(__LINE__)
void BMMCP_read_msg_CMockIgnoreArg_bmmcp_handle(UNITY_LINE_TYPE cmock_line);
#define BMMCP_read_msg_IgnoreArg_received_packet() BMMCP_read_msg_CMockIgnoreArg_received_packet(__LINE__)
void BMMCP_read_msg_CMockIgnoreArg_received_packet(UNITY_LINE_TYPE cmock_line);
#define BMMCP_write_msg_IgnoreAndReturn(cmock_retval) BMMCP_write_msg_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BMMCP_write_msg_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BMMCP_return_t cmock_to_return);
#define BMMCP_write_msg_ExpectAndReturn(bmmcp_handle, packet_to_send, cmock_retval) BMMCP_write_msg_CMockExpectAndReturn(__LINE__, bmmcp_handle, packet_to_send, cmock_retval)
void BMMCP_write_msg_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle, BMMCP_universal_packet_t* packet_to_send, BMMCP_return_t cmock_to_return);
typedef BMMCP_return_t (* CMOCK_BMMCP_write_msg_CALLBACK)(BMMCP_handle_t* bmmcp_handle, BMMCP_universal_packet_t* packet_to_send, int cmock_num_calls);
void BMMCP_write_msg_StubWithCallback(CMOCK_BMMCP_write_msg_CALLBACK Callback);
#define BMMCP_write_msg_ReturnThruPtr_bmmcp_handle(bmmcp_handle) BMMCP_write_msg_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, sizeof(*bmmcp_handle))
#define BMMCP_write_msg_ReturnArrayThruPtr_bmmcp_handle(bmmcp_handle, cmock_len) BMMCP_write_msg_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, (int)(cmock_len * (int)sizeof(*bmmcp_handle)))
#define BMMCP_write_msg_ReturnMemThruPtr_bmmcp_handle(bmmcp_handle, cmock_size) BMMCP_write_msg_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, cmock_size)
void BMMCP_write_msg_CMockReturnMemThruPtr_bmmcp_handle(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle, int cmock_size);
#define BMMCP_write_msg_ReturnThruPtr_packet_to_send(packet_to_send) BMMCP_write_msg_CMockReturnMemThruPtr_packet_to_send(__LINE__, packet_to_send, sizeof(*packet_to_send))
#define BMMCP_write_msg_ReturnArrayThruPtr_packet_to_send(packet_to_send, cmock_len) BMMCP_write_msg_CMockReturnMemThruPtr_packet_to_send(__LINE__, packet_to_send, (int)(cmock_len * (int)sizeof(*packet_to_send)))
#define BMMCP_write_msg_ReturnMemThruPtr_packet_to_send(packet_to_send, cmock_size) BMMCP_write_msg_CMockReturnMemThruPtr_packet_to_send(__LINE__, packet_to_send, cmock_size)
void BMMCP_write_msg_CMockReturnMemThruPtr_packet_to_send(UNITY_LINE_TYPE cmock_line, BMMCP_universal_packet_t* packet_to_send, int cmock_size);
#define BMMCP_write_msg_IgnoreArg_bmmcp_handle() BMMCP_write_msg_CMockIgnoreArg_bmmcp_handle(__LINE__)
void BMMCP_write_msg_CMockIgnoreArg_bmmcp_handle(UNITY_LINE_TYPE cmock_line);
#define BMMCP_write_msg_IgnoreArg_packet_to_send() BMMCP_write_msg_CMockIgnoreArg_packet_to_send(__LINE__)
void BMMCP_write_msg_CMockIgnoreArg_packet_to_send(UNITY_LINE_TYPE cmock_line);
#define BMMCP_init_IgnoreAndReturn(cmock_retval) BMMCP_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BMMCP_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BMMCP_return_t cmock_to_return);
#define BMMCP_init_ExpectAndReturn(bmmcp_handle, receive_callback_func, cmock_retval) BMMCP_init_CMockExpectAndReturn(__LINE__, bmmcp_handle, receive_callback_func, cmock_retval)
void BMMCP_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle, BMMCP_receive_callback_func_t receive_callback_func, BMMCP_return_t cmock_to_return);
typedef BMMCP_return_t (* CMOCK_BMMCP_init_CALLBACK)(BMMCP_handle_t* bmmcp_handle, BMMCP_receive_callback_func_t receive_callback_func, int cmock_num_calls);
void BMMCP_init_StubWithCallback(CMOCK_BMMCP_init_CALLBACK Callback);
#define BMMCP_init_ReturnThruPtr_bmmcp_handle(bmmcp_handle) BMMCP_init_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, sizeof(*bmmcp_handle))
#define BMMCP_init_ReturnArrayThruPtr_bmmcp_handle(bmmcp_handle, cmock_len) BMMCP_init_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, (int)(cmock_len * (int)sizeof(*bmmcp_handle)))
#define BMMCP_init_ReturnMemThruPtr_bmmcp_handle(bmmcp_handle, cmock_size) BMMCP_init_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, cmock_size)
void BMMCP_init_CMockReturnMemThruPtr_bmmcp_handle(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle, int cmock_size);
#define BMMCP_init_IgnoreArg_bmmcp_handle() BMMCP_init_CMockIgnoreArg_bmmcp_handle(__LINE__)
void BMMCP_init_CMockIgnoreArg_bmmcp_handle(UNITY_LINE_TYPE cmock_line);
#define BMMCP_init_IgnoreArg_receive_callback_func() BMMCP_init_CMockIgnoreArg_receive_callback_func(__LINE__)
void BMMCP_init_CMockIgnoreArg_receive_callback_func(UNITY_LINE_TYPE cmock_line);
#define BMMCP_velocity_to_si_IgnoreAndReturn(cmock_retval) BMMCP_velocity_to_si_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BMMCP_velocity_to_si_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define BMMCP_velocity_to_si_ExpectAndReturn(vel, cmock_retval) BMMCP_velocity_to_si_CMockExpectAndReturn(__LINE__, vel, cmock_retval)
void BMMCP_velocity_to_si_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int16_t vel, float cmock_to_return);
typedef float (* CMOCK_BMMCP_velocity_to_si_CALLBACK)(int16_t vel, int cmock_num_calls);
void BMMCP_velocity_to_si_StubWithCallback(CMOCK_BMMCP_velocity_to_si_CALLBACK Callback);
#define BMMCP_velocity_to_si_IgnoreArg_vel() BMMCP_velocity_to_si_CMockIgnoreArg_vel(__LINE__)
void BMMCP_velocity_to_si_CMockIgnoreArg_vel(UNITY_LINE_TYPE cmock_line);
#define BMMCP_HWDataReceivedIT_Ignore() BMMCP_HWDataReceivedIT_CMockIgnore()
void BMMCP_HWDataReceivedIT_CMockIgnore(void);
#define BMMCP_HWDataReceivedIT_Expect(bmmcp_handle) BMMCP_HWDataReceivedIT_CMockExpect(__LINE__, bmmcp_handle)
void BMMCP_HWDataReceivedIT_CMockExpect(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle);
typedef void (* CMOCK_BMMCP_HWDataReceivedIT_CALLBACK)(BMMCP_handle_t* bmmcp_handle, int cmock_num_calls);
void BMMCP_HWDataReceivedIT_StubWithCallback(CMOCK_BMMCP_HWDataReceivedIT_CALLBACK Callback);
#define BMMCP_HWDataReceivedIT_ReturnThruPtr_bmmcp_handle(bmmcp_handle) BMMCP_HWDataReceivedIT_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, sizeof(*bmmcp_handle))
#define BMMCP_HWDataReceivedIT_ReturnArrayThruPtr_bmmcp_handle(bmmcp_handle, cmock_len) BMMCP_HWDataReceivedIT_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, (int)(cmock_len * (int)sizeof(*bmmcp_handle)))
#define BMMCP_HWDataReceivedIT_ReturnMemThruPtr_bmmcp_handle(bmmcp_handle, cmock_size) BMMCP_HWDataReceivedIT_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, cmock_size)
void BMMCP_HWDataReceivedIT_CMockReturnMemThruPtr_bmmcp_handle(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle, int cmock_size);
#define BMMCP_HWDataReceivedIT_IgnoreArg_bmmcp_handle() BMMCP_HWDataReceivedIT_CMockIgnoreArg_bmmcp_handle(__LINE__)
void BMMCP_HWDataReceivedIT_CMockIgnoreArg_bmmcp_handle(UNITY_LINE_TYPE cmock_line);
#define BMMCP_HWDataTransmittedIT_Ignore() BMMCP_HWDataTransmittedIT_CMockIgnore()
void BMMCP_HWDataTransmittedIT_CMockIgnore(void);
#define BMMCP_HWDataTransmittedIT_Expect(bmmcp_handle) BMMCP_HWDataTransmittedIT_CMockExpect(__LINE__, bmmcp_handle)
void BMMCP_HWDataTransmittedIT_CMockExpect(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle);
typedef void (* CMOCK_BMMCP_HWDataTransmittedIT_CALLBACK)(BMMCP_handle_t* bmmcp_handle, int cmock_num_calls);
void BMMCP_HWDataTransmittedIT_StubWithCallback(CMOCK_BMMCP_HWDataTransmittedIT_CALLBACK Callback);
#define BMMCP_HWDataTransmittedIT_ReturnThruPtr_bmmcp_handle(bmmcp_handle) BMMCP_HWDataTransmittedIT_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, sizeof(*bmmcp_handle))
#define BMMCP_HWDataTransmittedIT_ReturnArrayThruPtr_bmmcp_handle(bmmcp_handle, cmock_len) BMMCP_HWDataTransmittedIT_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, (int)(cmock_len * (int)sizeof(*bmmcp_handle)))
#define BMMCP_HWDataTransmittedIT_ReturnMemThruPtr_bmmcp_handle(bmmcp_handle, cmock_size) BMMCP_HWDataTransmittedIT_CMockReturnMemThruPtr_bmmcp_handle(__LINE__, bmmcp_handle, cmock_size)
void BMMCP_HWDataTransmittedIT_CMockReturnMemThruPtr_bmmcp_handle(UNITY_LINE_TYPE cmock_line, BMMCP_handle_t* bmmcp_handle, int cmock_size);
#define BMMCP_HWDataTransmittedIT_IgnoreArg_bmmcp_handle() BMMCP_HWDataTransmittedIT_CMockIgnoreArg_bmmcp_handle(__LINE__)
void BMMCP_HWDataTransmittedIT_CMockIgnoreArg_bmmcp_handle(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
