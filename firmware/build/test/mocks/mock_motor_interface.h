/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MOTOR_INTERFACE_H
#define _MOCK_MOTOR_INTERFACE_H

#include "motor_interface.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_motor_interface_Init(void);
void mock_motor_interface_Destroy(void);
void mock_motor_interface_Verify(void);




#define MOTOR_init_Ignore() MOTOR_init_CMockIgnore()
void MOTOR_init_CMockIgnore(void);
#define MOTOR_init_Expect(handle, motor_id, event_flag) MOTOR_init_CMockExpect(__LINE__, handle, motor_id, event_flag)
void MOTOR_init_CMockExpect(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, uint8_t motor_id, osEventFlagsId_t event_flag);
typedef void (* CMOCK_MOTOR_init_CALLBACK)(MOTOR_handle_t* handle, uint8_t motor_id, osEventFlagsId_t event_flag, int cmock_num_calls);
void MOTOR_init_StubWithCallback(CMOCK_MOTOR_init_CALLBACK Callback);
#define MOTOR_init_ReturnThruPtr_handle(handle) MOTOR_init_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_init_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_init_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_init_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_init_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_init_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_init_IgnoreArg_handle() MOTOR_init_CMockIgnoreArg_handle(__LINE__)
void MOTOR_init_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define MOTOR_init_IgnoreArg_motor_id() MOTOR_init_CMockIgnoreArg_motor_id(__LINE__)
void MOTOR_init_CMockIgnoreArg_motor_id(UNITY_LINE_TYPE cmock_line);
#define MOTOR_init_IgnoreArg_event_flag() MOTOR_init_CMockIgnoreArg_event_flag(__LINE__)
void MOTOR_init_CMockIgnoreArg_event_flag(UNITY_LINE_TYPE cmock_line);
#define MOTOR_deinit_Ignore() MOTOR_deinit_CMockIgnore()
void MOTOR_deinit_CMockIgnore(void);
#define MOTOR_deinit_Expect(handle) MOTOR_deinit_CMockExpect(__LINE__, handle)
void MOTOR_deinit_CMockExpect(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle);
typedef void (* CMOCK_MOTOR_deinit_CALLBACK)(MOTOR_handle_t* handle, int cmock_num_calls);
void MOTOR_deinit_StubWithCallback(CMOCK_MOTOR_deinit_CALLBACK Callback);
#define MOTOR_deinit_ReturnThruPtr_handle(handle) MOTOR_deinit_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_deinit_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_deinit_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_deinit_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_deinit_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_deinit_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_deinit_IgnoreArg_handle() MOTOR_deinit_CMockIgnoreArg_handle(__LINE__)
void MOTOR_deinit_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define MOTOR_register_timer_Ignore() MOTOR_register_timer_CMockIgnore()
void MOTOR_register_timer_CMockIgnore(void);
#define MOTOR_register_timer_Expect(handle, timeout_timer) MOTOR_register_timer_CMockExpect(__LINE__, handle, timeout_timer)
void MOTOR_register_timer_CMockExpect(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, osTimerId_t timeout_timer);
typedef void (* CMOCK_MOTOR_register_timer_CALLBACK)(MOTOR_handle_t* handle, osTimerId_t timeout_timer, int cmock_num_calls);
void MOTOR_register_timer_StubWithCallback(CMOCK_MOTOR_register_timer_CALLBACK Callback);
#define MOTOR_register_timer_ReturnThruPtr_handle(handle) MOTOR_register_timer_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_register_timer_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_register_timer_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_register_timer_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_register_timer_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_register_timer_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_register_timer_IgnoreArg_handle() MOTOR_register_timer_CMockIgnoreArg_handle(__LINE__)
void MOTOR_register_timer_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define MOTOR_register_timer_IgnoreArg_timeout_timer() MOTOR_register_timer_CMockIgnoreArg_timeout_timer(__LINE__)
void MOTOR_register_timer_CMockIgnoreArg_timeout_timer(UNITY_LINE_TYPE cmock_line);
#define MOTOR_command_IgnoreAndReturn(cmock_retval) MOTOR_command_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void MOTOR_command_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ERRORS_return_t cmock_to_return);
#define MOTOR_command_ExpectAndReturn(handle, command, cmock_retval) MOTOR_command_CMockExpectAndReturn(__LINE__, handle, command, cmock_retval)
void MOTOR_command_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, MOTOR_user_command_t command, ERRORS_return_t cmock_to_return);
typedef ERRORS_return_t (* CMOCK_MOTOR_command_CALLBACK)(MOTOR_handle_t* handle, MOTOR_user_command_t command, int cmock_num_calls);
void MOTOR_command_StubWithCallback(CMOCK_MOTOR_command_CALLBACK Callback);
#define MOTOR_command_ReturnThruPtr_handle(handle) MOTOR_command_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_command_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_command_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_command_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_command_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_command_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_command_IgnoreArg_handle() MOTOR_command_CMockIgnoreArg_handle(__LINE__)
void MOTOR_command_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define MOTOR_command_IgnoreArg_command() MOTOR_command_CMockIgnoreArg_command(__LINE__)
void MOTOR_command_CMockIgnoreArg_command(UNITY_LINE_TYPE cmock_line);
#define MOTOR_new_message_IgnoreAndReturn(cmock_retval) MOTOR_new_message_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void MOTOR_new_message_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ERRORS_return_t cmock_to_return);
#define MOTOR_new_message_ExpectAndReturn(handle, packet, cmock_retval) MOTOR_new_message_CMockExpectAndReturn(__LINE__, handle, packet, cmock_retval)
void MOTOR_new_message_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, BMMCP_universal_packet_t* packet, ERRORS_return_t cmock_to_return);
typedef ERRORS_return_t (* CMOCK_MOTOR_new_message_CALLBACK)(MOTOR_handle_t* handle, BMMCP_universal_packet_t* packet, int cmock_num_calls);
void MOTOR_new_message_StubWithCallback(CMOCK_MOTOR_new_message_CALLBACK Callback);
#define MOTOR_new_message_ReturnThruPtr_handle(handle) MOTOR_new_message_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_new_message_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_new_message_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_new_message_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_new_message_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_new_message_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_new_message_ReturnThruPtr_packet(packet) MOTOR_new_message_CMockReturnMemThruPtr_packet(__LINE__, packet, sizeof(*packet))
#define MOTOR_new_message_ReturnArrayThruPtr_packet(packet, cmock_len) MOTOR_new_message_CMockReturnMemThruPtr_packet(__LINE__, packet, (int)(cmock_len * (int)sizeof(*packet)))
#define MOTOR_new_message_ReturnMemThruPtr_packet(packet, cmock_size) MOTOR_new_message_CMockReturnMemThruPtr_packet(__LINE__, packet, cmock_size)
void MOTOR_new_message_CMockReturnMemThruPtr_packet(UNITY_LINE_TYPE cmock_line, BMMCP_universal_packet_t* packet, int cmock_size);
#define MOTOR_new_message_IgnoreArg_handle() MOTOR_new_message_CMockIgnoreArg_handle(__LINE__)
void MOTOR_new_message_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define MOTOR_new_message_IgnoreArg_packet() MOTOR_new_message_CMockIgnoreArg_packet(__LINE__)
void MOTOR_new_message_CMockIgnoreArg_packet(UNITY_LINE_TYPE cmock_line);
#define MOTOR_get_state_IgnoreAndReturn(cmock_retval) MOTOR_get_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void MOTOR_get_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ERRORS_return_t cmock_to_return);
#define MOTOR_get_state_ExpectAndReturn(handle, state, cmock_retval) MOTOR_get_state_CMockExpectAndReturn(__LINE__, handle, state, cmock_retval)
void MOTOR_get_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, MOTOR_state_t* state, ERRORS_return_t cmock_to_return);
typedef ERRORS_return_t (* CMOCK_MOTOR_get_state_CALLBACK)(MOTOR_handle_t* handle, MOTOR_state_t* state, int cmock_num_calls);
void MOTOR_get_state_StubWithCallback(CMOCK_MOTOR_get_state_CALLBACK Callback);
#define MOTOR_get_state_ReturnThruPtr_handle(handle) MOTOR_get_state_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_get_state_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_get_state_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_get_state_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_get_state_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_get_state_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_get_state_ReturnThruPtr_state(state) MOTOR_get_state_CMockReturnMemThruPtr_state(__LINE__, state, sizeof(*state))
#define MOTOR_get_state_ReturnArrayThruPtr_state(state, cmock_len) MOTOR_get_state_CMockReturnMemThruPtr_state(__LINE__, state, (int)(cmock_len * (int)sizeof(*state)))
#define MOTOR_get_state_ReturnMemThruPtr_state(state, cmock_size) MOTOR_get_state_CMockReturnMemThruPtr_state(__LINE__, state, cmock_size)
void MOTOR_get_state_CMockReturnMemThruPtr_state(UNITY_LINE_TYPE cmock_line, MOTOR_state_t* state, int cmock_size);
#define MOTOR_get_state_IgnoreArg_handle() MOTOR_get_state_CMockIgnoreArg_handle(__LINE__)
void MOTOR_get_state_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define MOTOR_get_state_IgnoreArg_state() MOTOR_get_state_CMockIgnoreArg_state(__LINE__)
void MOTOR_get_state_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define MOTOR_get_velocity_IgnoreAndReturn(cmock_retval) MOTOR_get_velocity_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void MOTOR_get_velocity_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ERRORS_return_t cmock_to_return);
#define MOTOR_get_velocity_ExpectAndReturn(handle, velocity_radps, cmock_retval) MOTOR_get_velocity_CMockExpectAndReturn(__LINE__, handle, velocity_radps, cmock_retval)
void MOTOR_get_velocity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, float* velocity_radps, ERRORS_return_t cmock_to_return);
typedef ERRORS_return_t (* CMOCK_MOTOR_get_velocity_CALLBACK)(MOTOR_handle_t* handle, float* velocity_radps, int cmock_num_calls);
void MOTOR_get_velocity_StubWithCallback(CMOCK_MOTOR_get_velocity_CALLBACK Callback);
#define MOTOR_get_velocity_ReturnThruPtr_handle(handle) MOTOR_get_velocity_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_get_velocity_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_get_velocity_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_get_velocity_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_get_velocity_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_get_velocity_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_get_velocity_ReturnThruPtr_velocity_radps(velocity_radps) MOTOR_get_velocity_CMockReturnMemThruPtr_velocity_radps(__LINE__, velocity_radps, sizeof(*velocity_radps))
#define MOTOR_get_velocity_ReturnArrayThruPtr_velocity_radps(velocity_radps, cmock_len) MOTOR_get_velocity_CMockReturnMemThruPtr_velocity_radps(__LINE__, velocity_radps, (int)(cmock_len * (int)sizeof(*velocity_radps)))
#define MOTOR_get_velocity_ReturnMemThruPtr_velocity_radps(velocity_radps, cmock_size) MOTOR_get_velocity_CMockReturnMemThruPtr_velocity_radps(__LINE__, velocity_radps, cmock_size)
void MOTOR_get_velocity_CMockReturnMemThruPtr_velocity_radps(UNITY_LINE_TYPE cmock_line, float* velocity_radps, int cmock_size);
#define MOTOR_get_velocity_IgnoreArg_handle() MOTOR_get_velocity_CMockIgnoreArg_handle(__LINE__)
void MOTOR_get_velocity_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define MOTOR_get_velocity_IgnoreArg_velocity_radps() MOTOR_get_velocity_CMockIgnoreArg_velocity_radps(__LINE__)
void MOTOR_get_velocity_CMockIgnoreArg_velocity_radps(UNITY_LINE_TYPE cmock_line);
#define MOTOR_get_torque_IgnoreAndReturn(cmock_retval) MOTOR_get_torque_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void MOTOR_get_torque_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ERRORS_return_t cmock_to_return);
#define MOTOR_get_torque_ExpectAndReturn(handle, torque_nm, cmock_retval) MOTOR_get_torque_CMockExpectAndReturn(__LINE__, handle, torque_nm, cmock_retval)
void MOTOR_get_torque_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, float* torque_nm, ERRORS_return_t cmock_to_return);
typedef ERRORS_return_t (* CMOCK_MOTOR_get_torque_CALLBACK)(MOTOR_handle_t* handle, float* torque_nm, int cmock_num_calls);
void MOTOR_get_torque_StubWithCallback(CMOCK_MOTOR_get_torque_CALLBACK Callback);
#define MOTOR_get_torque_ReturnThruPtr_handle(handle) MOTOR_get_torque_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_get_torque_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_get_torque_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_get_torque_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_get_torque_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_get_torque_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_get_torque_ReturnThruPtr_torque_nm(torque_nm) MOTOR_get_torque_CMockReturnMemThruPtr_torque_nm(__LINE__, torque_nm, sizeof(*torque_nm))
#define MOTOR_get_torque_ReturnArrayThruPtr_torque_nm(torque_nm, cmock_len) MOTOR_get_torque_CMockReturnMemThruPtr_torque_nm(__LINE__, torque_nm, (int)(cmock_len * (int)sizeof(*torque_nm)))
#define MOTOR_get_torque_ReturnMemThruPtr_torque_nm(torque_nm, cmock_size) MOTOR_get_torque_CMockReturnMemThruPtr_torque_nm(__LINE__, torque_nm, cmock_size)
void MOTOR_get_torque_CMockReturnMemThruPtr_torque_nm(UNITY_LINE_TYPE cmock_line, float* torque_nm, int cmock_size);
#define MOTOR_get_torque_IgnoreArg_handle() MOTOR_get_torque_CMockIgnoreArg_handle(__LINE__)
void MOTOR_get_torque_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define MOTOR_get_torque_IgnoreArg_torque_nm() MOTOR_get_torque_CMockIgnoreArg_torque_nm(__LINE__)
void MOTOR_get_torque_CMockIgnoreArg_torque_nm(UNITY_LINE_TYPE cmock_line);
#define MOTOR_set_torque_IgnoreAndReturn(cmock_retval) MOTOR_set_torque_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void MOTOR_set_torque_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ERRORS_return_t cmock_to_return);
#define MOTOR_set_torque_ExpectAndReturn(handle, torque_nm, cmock_retval) MOTOR_set_torque_CMockExpectAndReturn(__LINE__, handle, torque_nm, cmock_retval)
void MOTOR_set_torque_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, float torque_nm, ERRORS_return_t cmock_to_return);
typedef ERRORS_return_t (* CMOCK_MOTOR_set_torque_CALLBACK)(MOTOR_handle_t* handle, float torque_nm, int cmock_num_calls);
void MOTOR_set_torque_StubWithCallback(CMOCK_MOTOR_set_torque_CALLBACK Callback);
#define MOTOR_set_torque_ReturnThruPtr_handle(handle) MOTOR_set_torque_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_set_torque_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_set_torque_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_set_torque_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_set_torque_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_set_torque_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_set_torque_IgnoreArg_handle() MOTOR_set_torque_CMockIgnoreArg_handle(__LINE__)
void MOTOR_set_torque_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define MOTOR_set_torque_IgnoreArg_torque_nm() MOTOR_set_torque_CMockIgnoreArg_torque_nm(__LINE__)
void MOTOR_set_torque_CMockIgnoreArg_torque_nm(UNITY_LINE_TYPE cmock_line);
#define MOTOR_timeout_IgnoreAndReturn(cmock_retval) MOTOR_timeout_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void MOTOR_timeout_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ERRORS_return_t cmock_to_return);
#define MOTOR_timeout_ExpectAndReturn(handle, cmock_retval) MOTOR_timeout_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void MOTOR_timeout_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, ERRORS_return_t cmock_to_return);
typedef ERRORS_return_t (* CMOCK_MOTOR_timeout_CALLBACK)(MOTOR_handle_t* handle, int cmock_num_calls);
void MOTOR_timeout_StubWithCallback(CMOCK_MOTOR_timeout_CALLBACK Callback);
#define MOTOR_timeout_ReturnThruPtr_handle(handle) MOTOR_timeout_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(*handle))
#define MOTOR_timeout_ReturnArrayThruPtr_handle(handle, cmock_len) MOTOR_timeout_CMockReturnMemThruPtr_handle(__LINE__, handle, (int)(cmock_len * (int)sizeof(*handle)))
#define MOTOR_timeout_ReturnMemThruPtr_handle(handle, cmock_size) MOTOR_timeout_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void MOTOR_timeout_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, MOTOR_handle_t* handle, int cmock_size);
#define MOTOR_timeout_IgnoreArg_handle() MOTOR_timeout_CMockIgnoreArg_handle(__LINE__)
void MOTOR_timeout_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
