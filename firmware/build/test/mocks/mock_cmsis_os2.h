/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CMSIS_OS2_H
#define _MOCK_CMSIS_OS2_H

#include "cmsis_os2.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_cmsis_os2_Init(void);
void mock_cmsis_os2_Destroy(void);
void mock_cmsis_os2_Verify(void);




#define osKernelInitialize_IgnoreAndReturn(cmock_retval) osKernelInitialize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelInitialize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osKernelInitialize_ExpectAndReturn(cmock_retval) osKernelInitialize_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelInitialize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osKernelInitialize_CALLBACK)(int cmock_num_calls);
void osKernelInitialize_StubWithCallback(CMOCK_osKernelInitialize_CALLBACK Callback);
#define osKernelGetInfo_IgnoreAndReturn(cmock_retval) osKernelGetInfo_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelGetInfo_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osKernelGetInfo_ExpectAndReturn(version, id_buf, id_size, cmock_retval) osKernelGetInfo_CMockExpectAndReturn(__LINE__, version, id_buf, id_size, cmock_retval)
void osKernelGetInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osVersion_t* version, char* id_buf, uint32_t id_size, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osKernelGetInfo_CALLBACK)(osVersion_t* version, char* id_buf, uint32_t id_size, int cmock_num_calls);
void osKernelGetInfo_StubWithCallback(CMOCK_osKernelGetInfo_CALLBACK Callback);
#define osKernelGetInfo_ReturnThruPtr_version(version) osKernelGetInfo_CMockReturnMemThruPtr_version(__LINE__, version, sizeof(*version))
#define osKernelGetInfo_ReturnArrayThruPtr_version(version, cmock_len) osKernelGetInfo_CMockReturnMemThruPtr_version(__LINE__, version, (int)(cmock_len * (int)sizeof(*version)))
#define osKernelGetInfo_ReturnMemThruPtr_version(version, cmock_size) osKernelGetInfo_CMockReturnMemThruPtr_version(__LINE__, version, cmock_size)
void osKernelGetInfo_CMockReturnMemThruPtr_version(UNITY_LINE_TYPE cmock_line, osVersion_t* version, int cmock_size);
#define osKernelGetInfo_ReturnThruPtr_id_buf(id_buf) osKernelGetInfo_CMockReturnMemThruPtr_id_buf(__LINE__, id_buf, sizeof(*id_buf))
#define osKernelGetInfo_ReturnArrayThruPtr_id_buf(id_buf, cmock_len) osKernelGetInfo_CMockReturnMemThruPtr_id_buf(__LINE__, id_buf, (int)(cmock_len * (int)sizeof(*id_buf)))
#define osKernelGetInfo_ReturnMemThruPtr_id_buf(id_buf, cmock_size) osKernelGetInfo_CMockReturnMemThruPtr_id_buf(__LINE__, id_buf, cmock_size)
void osKernelGetInfo_CMockReturnMemThruPtr_id_buf(UNITY_LINE_TYPE cmock_line, char* id_buf, int cmock_size);
#define osKernelGetInfo_IgnoreArg_version() osKernelGetInfo_CMockIgnoreArg_version(__LINE__)
void osKernelGetInfo_CMockIgnoreArg_version(UNITY_LINE_TYPE cmock_line);
#define osKernelGetInfo_IgnoreArg_id_buf() osKernelGetInfo_CMockIgnoreArg_id_buf(__LINE__)
void osKernelGetInfo_CMockIgnoreArg_id_buf(UNITY_LINE_TYPE cmock_line);
#define osKernelGetInfo_IgnoreArg_id_size() osKernelGetInfo_CMockIgnoreArg_id_size(__LINE__)
void osKernelGetInfo_CMockIgnoreArg_id_size(UNITY_LINE_TYPE cmock_line);
#define osKernelGetState_IgnoreAndReturn(cmock_retval) osKernelGetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelGetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osKernelState_t cmock_to_return);
#define osKernelGetState_ExpectAndReturn(cmock_retval) osKernelGetState_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osKernelState_t cmock_to_return);
typedef osKernelState_t (* CMOCK_osKernelGetState_CALLBACK)(int cmock_num_calls);
void osKernelGetState_StubWithCallback(CMOCK_osKernelGetState_CALLBACK Callback);
#define osKernelStart_IgnoreAndReturn(cmock_retval) osKernelStart_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelStart_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osKernelStart_ExpectAndReturn(cmock_retval) osKernelStart_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osKernelStart_CALLBACK)(int cmock_num_calls);
void osKernelStart_StubWithCallback(CMOCK_osKernelStart_CALLBACK Callback);
#define osKernelLock_IgnoreAndReturn(cmock_retval) osKernelLock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelLock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define osKernelLock_ExpectAndReturn(cmock_retval) osKernelLock_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelLock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
typedef int32_t (* CMOCK_osKernelLock_CALLBACK)(int cmock_num_calls);
void osKernelLock_StubWithCallback(CMOCK_osKernelLock_CALLBACK Callback);
#define osKernelUnlock_IgnoreAndReturn(cmock_retval) osKernelUnlock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelUnlock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define osKernelUnlock_ExpectAndReturn(cmock_retval) osKernelUnlock_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelUnlock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
typedef int32_t (* CMOCK_osKernelUnlock_CALLBACK)(int cmock_num_calls);
void osKernelUnlock_StubWithCallback(CMOCK_osKernelUnlock_CALLBACK Callback);
#define osKernelRestoreLock_IgnoreAndReturn(cmock_retval) osKernelRestoreLock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelRestoreLock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define osKernelRestoreLock_ExpectAndReturn(lock, cmock_retval) osKernelRestoreLock_CMockExpectAndReturn(__LINE__, lock, cmock_retval)
void osKernelRestoreLock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t lock, int32_t cmock_to_return);
typedef int32_t (* CMOCK_osKernelRestoreLock_CALLBACK)(int32_t lock, int cmock_num_calls);
void osKernelRestoreLock_StubWithCallback(CMOCK_osKernelRestoreLock_CALLBACK Callback);
#define osKernelRestoreLock_IgnoreArg_lock() osKernelRestoreLock_CMockIgnoreArg_lock(__LINE__)
void osKernelRestoreLock_CMockIgnoreArg_lock(UNITY_LINE_TYPE cmock_line);
#define osKernelSuspend_IgnoreAndReturn(cmock_retval) osKernelSuspend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelSuspend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osKernelSuspend_ExpectAndReturn(cmock_retval) osKernelSuspend_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelSuspend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osKernelSuspend_CALLBACK)(int cmock_num_calls);
void osKernelSuspend_StubWithCallback(CMOCK_osKernelSuspend_CALLBACK Callback);
#define osKernelResume_Ignore() osKernelResume_CMockIgnore()
void osKernelResume_CMockIgnore(void);
#define osKernelResume_Expect(sleep_ticks) osKernelResume_CMockExpect(__LINE__, sleep_ticks)
void osKernelResume_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t sleep_ticks);
typedef void (* CMOCK_osKernelResume_CALLBACK)(uint32_t sleep_ticks, int cmock_num_calls);
void osKernelResume_StubWithCallback(CMOCK_osKernelResume_CALLBACK Callback);
#define osKernelResume_IgnoreArg_sleep_ticks() osKernelResume_CMockIgnoreArg_sleep_ticks(__LINE__)
void osKernelResume_CMockIgnoreArg_sleep_ticks(UNITY_LINE_TYPE cmock_line);
#define osKernelGetTickCount_IgnoreAndReturn(cmock_retval) osKernelGetTickCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelGetTickCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osKernelGetTickCount_ExpectAndReturn(cmock_retval) osKernelGetTickCount_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetTickCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osKernelGetTickCount_CALLBACK)(int cmock_num_calls);
void osKernelGetTickCount_StubWithCallback(CMOCK_osKernelGetTickCount_CALLBACK Callback);
#define osKernelGetTickFreq_IgnoreAndReturn(cmock_retval) osKernelGetTickFreq_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelGetTickFreq_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osKernelGetTickFreq_ExpectAndReturn(cmock_retval) osKernelGetTickFreq_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetTickFreq_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osKernelGetTickFreq_CALLBACK)(int cmock_num_calls);
void osKernelGetTickFreq_StubWithCallback(CMOCK_osKernelGetTickFreq_CALLBACK Callback);
#define osKernelGetSysTimerCount_IgnoreAndReturn(cmock_retval) osKernelGetSysTimerCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelGetSysTimerCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osKernelGetSysTimerCount_ExpectAndReturn(cmock_retval) osKernelGetSysTimerCount_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetSysTimerCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osKernelGetSysTimerCount_CALLBACK)(int cmock_num_calls);
void osKernelGetSysTimerCount_StubWithCallback(CMOCK_osKernelGetSysTimerCount_CALLBACK Callback);
#define osKernelGetSysTimerFreq_IgnoreAndReturn(cmock_retval) osKernelGetSysTimerFreq_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osKernelGetSysTimerFreq_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osKernelGetSysTimerFreq_ExpectAndReturn(cmock_retval) osKernelGetSysTimerFreq_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetSysTimerFreq_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osKernelGetSysTimerFreq_CALLBACK)(int cmock_num_calls);
void osKernelGetSysTimerFreq_StubWithCallback(CMOCK_osKernelGetSysTimerFreq_CALLBACK Callback);
#define osThreadNew_IgnoreAndReturn(cmock_retval) osThreadNew_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadNew_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t cmock_to_return);
#define osThreadNew_ExpectAndReturn(func, argument, attr, cmock_retval) osThreadNew_CMockExpectAndReturn(__LINE__, func, argument, attr, cmock_retval)
void osThreadNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadFunc_t func, void* argument, const osThreadAttr_t* attr, osThreadId_t cmock_to_return);
typedef osThreadId_t (* CMOCK_osThreadNew_CALLBACK)(osThreadFunc_t func, void* argument, const osThreadAttr_t* attr, int cmock_num_calls);
void osThreadNew_StubWithCallback(CMOCK_osThreadNew_CALLBACK Callback);
#define osThreadNew_ReturnThruPtr_argument(argument) osThreadNew_CMockReturnMemThruPtr_argument(__LINE__, argument, sizeof(*argument))
#define osThreadNew_ReturnArrayThruPtr_argument(argument, cmock_len) osThreadNew_CMockReturnMemThruPtr_argument(__LINE__, argument, (int)(cmock_len * (int)sizeof(*argument)))
#define osThreadNew_ReturnMemThruPtr_argument(argument, cmock_size) osThreadNew_CMockReturnMemThruPtr_argument(__LINE__, argument, cmock_size)
void osThreadNew_CMockReturnMemThruPtr_argument(UNITY_LINE_TYPE cmock_line, void* argument, int cmock_size);
#define osThreadNew_IgnoreArg_func() osThreadNew_CMockIgnoreArg_func(__LINE__)
void osThreadNew_CMockIgnoreArg_func(UNITY_LINE_TYPE cmock_line);
#define osThreadNew_IgnoreArg_argument() osThreadNew_CMockIgnoreArg_argument(__LINE__)
void osThreadNew_CMockIgnoreArg_argument(UNITY_LINE_TYPE cmock_line);
#define osThreadNew_IgnoreArg_attr() osThreadNew_CMockIgnoreArg_attr(__LINE__)
void osThreadNew_CMockIgnoreArg_attr(UNITY_LINE_TYPE cmock_line);
#define osThreadGetName_IgnoreAndReturn(cmock_retval) osThreadGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define osThreadGetName_ExpectAndReturn(thread_id, cmock_retval) osThreadGetName_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, const char* cmock_to_return);
typedef const char* (* CMOCK_osThreadGetName_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadGetName_StubWithCallback(CMOCK_osThreadGetName_CALLBACK Callback);
#define osThreadGetName_IgnoreArg_thread_id() osThreadGetName_CMockIgnoreArg_thread_id(__LINE__)
void osThreadGetName_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadGetId_IgnoreAndReturn(cmock_retval) osThreadGetId_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadGetId_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t cmock_to_return);
#define osThreadGetId_ExpectAndReturn(cmock_retval) osThreadGetId_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadGetId_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t cmock_to_return);
typedef osThreadId_t (* CMOCK_osThreadGetId_CALLBACK)(int cmock_num_calls);
void osThreadGetId_StubWithCallback(CMOCK_osThreadGetId_CALLBACK Callback);
#define osThreadGetState_IgnoreAndReturn(cmock_retval) osThreadGetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadGetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osThreadState_t cmock_to_return);
#define osThreadGetState_ExpectAndReturn(thread_id, cmock_retval) osThreadGetState_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osThreadState_t cmock_to_return);
typedef osThreadState_t (* CMOCK_osThreadGetState_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadGetState_StubWithCallback(CMOCK_osThreadGetState_CALLBACK Callback);
#define osThreadGetState_IgnoreArg_thread_id() osThreadGetState_CMockIgnoreArg_thread_id(__LINE__)
void osThreadGetState_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadGetStackSize_IgnoreAndReturn(cmock_retval) osThreadGetStackSize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadGetStackSize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadGetStackSize_ExpectAndReturn(thread_id, cmock_retval) osThreadGetStackSize_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetStackSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osThreadGetStackSize_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadGetStackSize_StubWithCallback(CMOCK_osThreadGetStackSize_CALLBACK Callback);
#define osThreadGetStackSize_IgnoreArg_thread_id() osThreadGetStackSize_CMockIgnoreArg_thread_id(__LINE__)
void osThreadGetStackSize_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadGetStackSpace_IgnoreAndReturn(cmock_retval) osThreadGetStackSpace_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadGetStackSpace_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadGetStackSpace_ExpectAndReturn(thread_id, cmock_retval) osThreadGetStackSpace_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetStackSpace_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osThreadGetStackSpace_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadGetStackSpace_StubWithCallback(CMOCK_osThreadGetStackSpace_CALLBACK Callback);
#define osThreadGetStackSpace_IgnoreArg_thread_id() osThreadGetStackSpace_CMockIgnoreArg_thread_id(__LINE__)
void osThreadGetStackSpace_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadSetPriority_IgnoreAndReturn(cmock_retval) osThreadSetPriority_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadSetPriority_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osThreadSetPriority_ExpectAndReturn(thread_id, priority, cmock_retval) osThreadSetPriority_CMockExpectAndReturn(__LINE__, thread_id, priority, cmock_retval)
void osThreadSetPriority_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osPriority_t priority, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osThreadSetPriority_CALLBACK)(osThreadId_t thread_id, osPriority_t priority, int cmock_num_calls);
void osThreadSetPriority_StubWithCallback(CMOCK_osThreadSetPriority_CALLBACK Callback);
#define osThreadSetPriority_IgnoreArg_thread_id() osThreadSetPriority_CMockIgnoreArg_thread_id(__LINE__)
void osThreadSetPriority_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadSetPriority_IgnoreArg_priority() osThreadSetPriority_CMockIgnoreArg_priority(__LINE__)
void osThreadSetPriority_CMockIgnoreArg_priority(UNITY_LINE_TYPE cmock_line);
#define osThreadGetPriority_IgnoreAndReturn(cmock_retval) osThreadGetPriority_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadGetPriority_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osPriority_t cmock_to_return);
#define osThreadGetPriority_ExpectAndReturn(thread_id, cmock_retval) osThreadGetPriority_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetPriority_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osPriority_t cmock_to_return);
typedef osPriority_t (* CMOCK_osThreadGetPriority_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadGetPriority_StubWithCallback(CMOCK_osThreadGetPriority_CALLBACK Callback);
#define osThreadGetPriority_IgnoreArg_thread_id() osThreadGetPriority_CMockIgnoreArg_thread_id(__LINE__)
void osThreadGetPriority_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadYield_IgnoreAndReturn(cmock_retval) osThreadYield_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadYield_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osThreadYield_ExpectAndReturn(cmock_retval) osThreadYield_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadYield_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osThreadYield_CALLBACK)(int cmock_num_calls);
void osThreadYield_StubWithCallback(CMOCK_osThreadYield_CALLBACK Callback);
#define osThreadSuspend_IgnoreAndReturn(cmock_retval) osThreadSuspend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadSuspend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osThreadSuspend_ExpectAndReturn(thread_id, cmock_retval) osThreadSuspend_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadSuspend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osThreadSuspend_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadSuspend_StubWithCallback(CMOCK_osThreadSuspend_CALLBACK Callback);
#define osThreadSuspend_IgnoreArg_thread_id() osThreadSuspend_CMockIgnoreArg_thread_id(__LINE__)
void osThreadSuspend_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadResume_IgnoreAndReturn(cmock_retval) osThreadResume_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadResume_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osThreadResume_ExpectAndReturn(thread_id, cmock_retval) osThreadResume_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadResume_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osThreadResume_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadResume_StubWithCallback(CMOCK_osThreadResume_CALLBACK Callback);
#define osThreadResume_IgnoreArg_thread_id() osThreadResume_CMockIgnoreArg_thread_id(__LINE__)
void osThreadResume_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadDetach_IgnoreAndReturn(cmock_retval) osThreadDetach_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadDetach_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osThreadDetach_ExpectAndReturn(thread_id, cmock_retval) osThreadDetach_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadDetach_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osThreadDetach_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadDetach_StubWithCallback(CMOCK_osThreadDetach_CALLBACK Callback);
#define osThreadDetach_IgnoreArg_thread_id() osThreadDetach_CMockIgnoreArg_thread_id(__LINE__)
void osThreadDetach_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadJoin_IgnoreAndReturn(cmock_retval) osThreadJoin_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadJoin_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osThreadJoin_ExpectAndReturn(thread_id, cmock_retval) osThreadJoin_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadJoin_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osThreadJoin_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadJoin_StubWithCallback(CMOCK_osThreadJoin_CALLBACK Callback);
#define osThreadJoin_IgnoreArg_thread_id() osThreadJoin_CMockIgnoreArg_thread_id(__LINE__)
void osThreadJoin_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadExit_Ignore() osThreadExit_CMockIgnore()
void osThreadExit_CMockIgnore(void);
#define osThreadExit_Expect() osThreadExit_CMockExpect(__LINE__)
void osThreadExit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_osThreadExit_CALLBACK)(int cmock_num_calls);
void osThreadExit_StubWithCallback(CMOCK_osThreadExit_CALLBACK Callback);
#define osThreadTerminate_IgnoreAndReturn(cmock_retval) osThreadTerminate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadTerminate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osThreadTerminate_ExpectAndReturn(thread_id, cmock_retval) osThreadTerminate_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadTerminate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osThreadTerminate_CALLBACK)(osThreadId_t thread_id, int cmock_num_calls);
void osThreadTerminate_StubWithCallback(CMOCK_osThreadTerminate_CALLBACK Callback);
#define osThreadTerminate_IgnoreArg_thread_id() osThreadTerminate_CMockIgnoreArg_thread_id(__LINE__)
void osThreadTerminate_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadGetCount_IgnoreAndReturn(cmock_retval) osThreadGetCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadGetCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadGetCount_ExpectAndReturn(cmock_retval) osThreadGetCount_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadGetCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osThreadGetCount_CALLBACK)(int cmock_num_calls);
void osThreadGetCount_StubWithCallback(CMOCK_osThreadGetCount_CALLBACK Callback);
#define osThreadEnumerate_IgnoreAndReturn(cmock_retval) osThreadEnumerate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadEnumerate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadEnumerate_ExpectAndReturn(thread_array, array_items, cmock_retval) osThreadEnumerate_CMockExpectAndReturn(__LINE__, thread_array, array_items, cmock_retval)
void osThreadEnumerate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t* thread_array, uint32_t array_items, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osThreadEnumerate_CALLBACK)(osThreadId_t* thread_array, uint32_t array_items, int cmock_num_calls);
void osThreadEnumerate_StubWithCallback(CMOCK_osThreadEnumerate_CALLBACK Callback);
#define osThreadEnumerate_ReturnThruPtr_thread_array(thread_array) osThreadEnumerate_CMockReturnMemThruPtr_thread_array(__LINE__, thread_array, sizeof(*thread_array))
#define osThreadEnumerate_ReturnArrayThruPtr_thread_array(thread_array, cmock_len) osThreadEnumerate_CMockReturnMemThruPtr_thread_array(__LINE__, thread_array, (int)(cmock_len * (int)sizeof(*thread_array)))
#define osThreadEnumerate_ReturnMemThruPtr_thread_array(thread_array, cmock_size) osThreadEnumerate_CMockReturnMemThruPtr_thread_array(__LINE__, thread_array, cmock_size)
void osThreadEnumerate_CMockReturnMemThruPtr_thread_array(UNITY_LINE_TYPE cmock_line, osThreadId_t* thread_array, int cmock_size);
#define osThreadEnumerate_IgnoreArg_thread_array() osThreadEnumerate_CMockIgnoreArg_thread_array(__LINE__)
void osThreadEnumerate_CMockIgnoreArg_thread_array(UNITY_LINE_TYPE cmock_line);
#define osThreadEnumerate_IgnoreArg_array_items() osThreadEnumerate_CMockIgnoreArg_array_items(__LINE__)
void osThreadEnumerate_CMockIgnoreArg_array_items(UNITY_LINE_TYPE cmock_line);
#define osThreadFlagsSet_IgnoreAndReturn(cmock_retval) osThreadFlagsSet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadFlagsSet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadFlagsSet_ExpectAndReturn(thread_id, flags, cmock_retval) osThreadFlagsSet_CMockExpectAndReturn(__LINE__, thread_id, flags, cmock_retval)
void osThreadFlagsSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, uint32_t flags, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osThreadFlagsSet_CALLBACK)(osThreadId_t thread_id, uint32_t flags, int cmock_num_calls);
void osThreadFlagsSet_StubWithCallback(CMOCK_osThreadFlagsSet_CALLBACK Callback);
#define osThreadFlagsSet_IgnoreArg_thread_id() osThreadFlagsSet_CMockIgnoreArg_thread_id(__LINE__)
void osThreadFlagsSet_CMockIgnoreArg_thread_id(UNITY_LINE_TYPE cmock_line);
#define osThreadFlagsSet_IgnoreArg_flags() osThreadFlagsSet_CMockIgnoreArg_flags(__LINE__)
void osThreadFlagsSet_CMockIgnoreArg_flags(UNITY_LINE_TYPE cmock_line);
#define osThreadFlagsClear_IgnoreAndReturn(cmock_retval) osThreadFlagsClear_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadFlagsClear_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadFlagsClear_ExpectAndReturn(flags, cmock_retval) osThreadFlagsClear_CMockExpectAndReturn(__LINE__, flags, cmock_retval)
void osThreadFlagsClear_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t flags, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osThreadFlagsClear_CALLBACK)(uint32_t flags, int cmock_num_calls);
void osThreadFlagsClear_StubWithCallback(CMOCK_osThreadFlagsClear_CALLBACK Callback);
#define osThreadFlagsClear_IgnoreArg_flags() osThreadFlagsClear_CMockIgnoreArg_flags(__LINE__)
void osThreadFlagsClear_CMockIgnoreArg_flags(UNITY_LINE_TYPE cmock_line);
#define osThreadFlagsGet_IgnoreAndReturn(cmock_retval) osThreadFlagsGet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadFlagsGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadFlagsGet_ExpectAndReturn(cmock_retval) osThreadFlagsGet_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadFlagsGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osThreadFlagsGet_CALLBACK)(int cmock_num_calls);
void osThreadFlagsGet_StubWithCallback(CMOCK_osThreadFlagsGet_CALLBACK Callback);
#define osThreadFlagsWait_IgnoreAndReturn(cmock_retval) osThreadFlagsWait_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osThreadFlagsWait_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadFlagsWait_ExpectAndReturn(flags, options, timeout, cmock_retval) osThreadFlagsWait_CMockExpectAndReturn(__LINE__, flags, options, timeout, cmock_retval)
void osThreadFlagsWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t flags, uint32_t options, uint32_t timeout, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osThreadFlagsWait_CALLBACK)(uint32_t flags, uint32_t options, uint32_t timeout, int cmock_num_calls);
void osThreadFlagsWait_StubWithCallback(CMOCK_osThreadFlagsWait_CALLBACK Callback);
#define osThreadFlagsWait_IgnoreArg_flags() osThreadFlagsWait_CMockIgnoreArg_flags(__LINE__)
void osThreadFlagsWait_CMockIgnoreArg_flags(UNITY_LINE_TYPE cmock_line);
#define osThreadFlagsWait_IgnoreArg_options() osThreadFlagsWait_CMockIgnoreArg_options(__LINE__)
void osThreadFlagsWait_CMockIgnoreArg_options(UNITY_LINE_TYPE cmock_line);
#define osThreadFlagsWait_IgnoreArg_timeout() osThreadFlagsWait_CMockIgnoreArg_timeout(__LINE__)
void osThreadFlagsWait_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define osDelay_IgnoreAndReturn(cmock_retval) osDelay_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osDelay_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osDelay_ExpectAndReturn(ticks, cmock_retval) osDelay_CMockExpectAndReturn(__LINE__, ticks, cmock_retval)
void osDelay_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ticks, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osDelay_CALLBACK)(uint32_t ticks, int cmock_num_calls);
void osDelay_StubWithCallback(CMOCK_osDelay_CALLBACK Callback);
#define osDelay_IgnoreArg_ticks() osDelay_CMockIgnoreArg_ticks(__LINE__)
void osDelay_CMockIgnoreArg_ticks(UNITY_LINE_TYPE cmock_line);
#define osDelayUntil_IgnoreAndReturn(cmock_retval) osDelayUntil_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osDelayUntil_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osDelayUntil_ExpectAndReturn(ticks, cmock_retval) osDelayUntil_CMockExpectAndReturn(__LINE__, ticks, cmock_retval)
void osDelayUntil_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ticks, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osDelayUntil_CALLBACK)(uint32_t ticks, int cmock_num_calls);
void osDelayUntil_StubWithCallback(CMOCK_osDelayUntil_CALLBACK Callback);
#define osDelayUntil_IgnoreArg_ticks() osDelayUntil_CMockIgnoreArg_ticks(__LINE__)
void osDelayUntil_CMockIgnoreArg_ticks(UNITY_LINE_TYPE cmock_line);
#define osTimerNew_IgnoreAndReturn(cmock_retval) osTimerNew_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osTimerNew_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t cmock_to_return);
#define osTimerNew_ExpectAndReturn(func, type, argument, attr, cmock_retval) osTimerNew_CMockExpectAndReturn(__LINE__, func, type, argument, attr, cmock_retval)
void osTimerNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerFunc_t func, osTimerType_t type, void* argument, const osTimerAttr_t* attr, osTimerId_t cmock_to_return);
typedef osTimerId_t (* CMOCK_osTimerNew_CALLBACK)(osTimerFunc_t func, osTimerType_t type, void* argument, const osTimerAttr_t* attr, int cmock_num_calls);
void osTimerNew_StubWithCallback(CMOCK_osTimerNew_CALLBACK Callback);
#define osTimerNew_ReturnThruPtr_argument(argument) osTimerNew_CMockReturnMemThruPtr_argument(__LINE__, argument, sizeof(*argument))
#define osTimerNew_ReturnArrayThruPtr_argument(argument, cmock_len) osTimerNew_CMockReturnMemThruPtr_argument(__LINE__, argument, (int)(cmock_len * (int)sizeof(*argument)))
#define osTimerNew_ReturnMemThruPtr_argument(argument, cmock_size) osTimerNew_CMockReturnMemThruPtr_argument(__LINE__, argument, cmock_size)
void osTimerNew_CMockReturnMemThruPtr_argument(UNITY_LINE_TYPE cmock_line, void* argument, int cmock_size);
#define osTimerNew_IgnoreArg_func() osTimerNew_CMockIgnoreArg_func(__LINE__)
void osTimerNew_CMockIgnoreArg_func(UNITY_LINE_TYPE cmock_line);
#define osTimerNew_IgnoreArg_type() osTimerNew_CMockIgnoreArg_type(__LINE__)
void osTimerNew_CMockIgnoreArg_type(UNITY_LINE_TYPE cmock_line);
#define osTimerNew_IgnoreArg_argument() osTimerNew_CMockIgnoreArg_argument(__LINE__)
void osTimerNew_CMockIgnoreArg_argument(UNITY_LINE_TYPE cmock_line);
#define osTimerNew_IgnoreArg_attr() osTimerNew_CMockIgnoreArg_attr(__LINE__)
void osTimerNew_CMockIgnoreArg_attr(UNITY_LINE_TYPE cmock_line);
#define osTimerGetName_IgnoreAndReturn(cmock_retval) osTimerGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osTimerGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define osTimerGetName_ExpectAndReturn(timer_id, cmock_retval) osTimerGetName_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, const char* cmock_to_return);
typedef const char* (* CMOCK_osTimerGetName_CALLBACK)(osTimerId_t timer_id, int cmock_num_calls);
void osTimerGetName_StubWithCallback(CMOCK_osTimerGetName_CALLBACK Callback);
#define osTimerGetName_IgnoreArg_timer_id() osTimerGetName_CMockIgnoreArg_timer_id(__LINE__)
void osTimerGetName_CMockIgnoreArg_timer_id(UNITY_LINE_TYPE cmock_line);
#define osTimerStart_IgnoreAndReturn(cmock_retval) osTimerStart_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osTimerStart_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osTimerStart_ExpectAndReturn(timer_id, ticks, cmock_retval) osTimerStart_CMockExpectAndReturn(__LINE__, timer_id, ticks, cmock_retval)
void osTimerStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, uint32_t ticks, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osTimerStart_CALLBACK)(osTimerId_t timer_id, uint32_t ticks, int cmock_num_calls);
void osTimerStart_StubWithCallback(CMOCK_osTimerStart_CALLBACK Callback);
#define osTimerStart_IgnoreArg_timer_id() osTimerStart_CMockIgnoreArg_timer_id(__LINE__)
void osTimerStart_CMockIgnoreArg_timer_id(UNITY_LINE_TYPE cmock_line);
#define osTimerStart_IgnoreArg_ticks() osTimerStart_CMockIgnoreArg_ticks(__LINE__)
void osTimerStart_CMockIgnoreArg_ticks(UNITY_LINE_TYPE cmock_line);
#define osTimerStop_IgnoreAndReturn(cmock_retval) osTimerStop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osTimerStop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osTimerStop_ExpectAndReturn(timer_id, cmock_retval) osTimerStop_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerStop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osTimerStop_CALLBACK)(osTimerId_t timer_id, int cmock_num_calls);
void osTimerStop_StubWithCallback(CMOCK_osTimerStop_CALLBACK Callback);
#define osTimerStop_IgnoreArg_timer_id() osTimerStop_CMockIgnoreArg_timer_id(__LINE__)
void osTimerStop_CMockIgnoreArg_timer_id(UNITY_LINE_TYPE cmock_line);
#define osTimerIsRunning_IgnoreAndReturn(cmock_retval) osTimerIsRunning_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osTimerIsRunning_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osTimerIsRunning_ExpectAndReturn(timer_id, cmock_retval) osTimerIsRunning_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerIsRunning_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osTimerIsRunning_CALLBACK)(osTimerId_t timer_id, int cmock_num_calls);
void osTimerIsRunning_StubWithCallback(CMOCK_osTimerIsRunning_CALLBACK Callback);
#define osTimerIsRunning_IgnoreArg_timer_id() osTimerIsRunning_CMockIgnoreArg_timer_id(__LINE__)
void osTimerIsRunning_CMockIgnoreArg_timer_id(UNITY_LINE_TYPE cmock_line);
#define osTimerDelete_IgnoreAndReturn(cmock_retval) osTimerDelete_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osTimerDelete_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osTimerDelete_ExpectAndReturn(timer_id, cmock_retval) osTimerDelete_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osTimerDelete_CALLBACK)(osTimerId_t timer_id, int cmock_num_calls);
void osTimerDelete_StubWithCallback(CMOCK_osTimerDelete_CALLBACK Callback);
#define osTimerDelete_IgnoreArg_timer_id() osTimerDelete_CMockIgnoreArg_timer_id(__LINE__)
void osTimerDelete_CMockIgnoreArg_timer_id(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsNew_IgnoreAndReturn(cmock_retval) osEventFlagsNew_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osEventFlagsNew_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t cmock_to_return);
#define osEventFlagsNew_ExpectAndReturn(attr, cmock_retval) osEventFlagsNew_CMockExpectAndReturn(__LINE__, attr, cmock_retval)
void osEventFlagsNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osEventFlagsAttr_t* attr, osEventFlagsId_t cmock_to_return);
typedef osEventFlagsId_t (* CMOCK_osEventFlagsNew_CALLBACK)(const osEventFlagsAttr_t* attr, int cmock_num_calls);
void osEventFlagsNew_StubWithCallback(CMOCK_osEventFlagsNew_CALLBACK Callback);
#define osEventFlagsNew_IgnoreArg_attr() osEventFlagsNew_CMockIgnoreArg_attr(__LINE__)
void osEventFlagsNew_CMockIgnoreArg_attr(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsGetName_IgnoreAndReturn(cmock_retval) osEventFlagsGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osEventFlagsGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define osEventFlagsGetName_ExpectAndReturn(ef_id, cmock_retval) osEventFlagsGetName_CMockExpectAndReturn(__LINE__, ef_id, cmock_retval)
void osEventFlagsGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, const char* cmock_to_return);
typedef const char* (* CMOCK_osEventFlagsGetName_CALLBACK)(osEventFlagsId_t ef_id, int cmock_num_calls);
void osEventFlagsGetName_StubWithCallback(CMOCK_osEventFlagsGetName_CALLBACK Callback);
#define osEventFlagsGetName_IgnoreArg_ef_id() osEventFlagsGetName_CMockIgnoreArg_ef_id(__LINE__)
void osEventFlagsGetName_CMockIgnoreArg_ef_id(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsSet_IgnoreAndReturn(cmock_retval) osEventFlagsSet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osEventFlagsSet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osEventFlagsSet_ExpectAndReturn(ef_id, flags, cmock_retval) osEventFlagsSet_CMockExpectAndReturn(__LINE__, ef_id, flags, cmock_retval)
void osEventFlagsSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, uint32_t flags, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osEventFlagsSet_CALLBACK)(osEventFlagsId_t ef_id, uint32_t flags, int cmock_num_calls);
void osEventFlagsSet_StubWithCallback(CMOCK_osEventFlagsSet_CALLBACK Callback);
#define osEventFlagsSet_IgnoreArg_ef_id() osEventFlagsSet_CMockIgnoreArg_ef_id(__LINE__)
void osEventFlagsSet_CMockIgnoreArg_ef_id(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsSet_IgnoreArg_flags() osEventFlagsSet_CMockIgnoreArg_flags(__LINE__)
void osEventFlagsSet_CMockIgnoreArg_flags(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsClear_IgnoreAndReturn(cmock_retval) osEventFlagsClear_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osEventFlagsClear_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osEventFlagsClear_ExpectAndReturn(ef_id, flags, cmock_retval) osEventFlagsClear_CMockExpectAndReturn(__LINE__, ef_id, flags, cmock_retval)
void osEventFlagsClear_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, uint32_t flags, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osEventFlagsClear_CALLBACK)(osEventFlagsId_t ef_id, uint32_t flags, int cmock_num_calls);
void osEventFlagsClear_StubWithCallback(CMOCK_osEventFlagsClear_CALLBACK Callback);
#define osEventFlagsClear_IgnoreArg_ef_id() osEventFlagsClear_CMockIgnoreArg_ef_id(__LINE__)
void osEventFlagsClear_CMockIgnoreArg_ef_id(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsClear_IgnoreArg_flags() osEventFlagsClear_CMockIgnoreArg_flags(__LINE__)
void osEventFlagsClear_CMockIgnoreArg_flags(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsGet_IgnoreAndReturn(cmock_retval) osEventFlagsGet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osEventFlagsGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osEventFlagsGet_ExpectAndReturn(ef_id, cmock_retval) osEventFlagsGet_CMockExpectAndReturn(__LINE__, ef_id, cmock_retval)
void osEventFlagsGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osEventFlagsGet_CALLBACK)(osEventFlagsId_t ef_id, int cmock_num_calls);
void osEventFlagsGet_StubWithCallback(CMOCK_osEventFlagsGet_CALLBACK Callback);
#define osEventFlagsGet_IgnoreArg_ef_id() osEventFlagsGet_CMockIgnoreArg_ef_id(__LINE__)
void osEventFlagsGet_CMockIgnoreArg_ef_id(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsWait_IgnoreAndReturn(cmock_retval) osEventFlagsWait_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osEventFlagsWait_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osEventFlagsWait_ExpectAndReturn(ef_id, flags, options, timeout, cmock_retval) osEventFlagsWait_CMockExpectAndReturn(__LINE__, ef_id, flags, options, timeout, cmock_retval)
void osEventFlagsWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osEventFlagsWait_CALLBACK)(osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout, int cmock_num_calls);
void osEventFlagsWait_StubWithCallback(CMOCK_osEventFlagsWait_CALLBACK Callback);
#define osEventFlagsWait_IgnoreArg_ef_id() osEventFlagsWait_CMockIgnoreArg_ef_id(__LINE__)
void osEventFlagsWait_CMockIgnoreArg_ef_id(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsWait_IgnoreArg_flags() osEventFlagsWait_CMockIgnoreArg_flags(__LINE__)
void osEventFlagsWait_CMockIgnoreArg_flags(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsWait_IgnoreArg_options() osEventFlagsWait_CMockIgnoreArg_options(__LINE__)
void osEventFlagsWait_CMockIgnoreArg_options(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsWait_IgnoreArg_timeout() osEventFlagsWait_CMockIgnoreArg_timeout(__LINE__)
void osEventFlagsWait_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define osEventFlagsDelete_IgnoreAndReturn(cmock_retval) osEventFlagsDelete_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osEventFlagsDelete_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osEventFlagsDelete_ExpectAndReturn(ef_id, cmock_retval) osEventFlagsDelete_CMockExpectAndReturn(__LINE__, ef_id, cmock_retval)
void osEventFlagsDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osEventFlagsDelete_CALLBACK)(osEventFlagsId_t ef_id, int cmock_num_calls);
void osEventFlagsDelete_StubWithCallback(CMOCK_osEventFlagsDelete_CALLBACK Callback);
#define osEventFlagsDelete_IgnoreArg_ef_id() osEventFlagsDelete_CMockIgnoreArg_ef_id(__LINE__)
void osEventFlagsDelete_CMockIgnoreArg_ef_id(UNITY_LINE_TYPE cmock_line);
#define osMutexNew_IgnoreAndReturn(cmock_retval) osMutexNew_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMutexNew_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t cmock_to_return);
#define osMutexNew_ExpectAndReturn(attr, cmock_retval) osMutexNew_CMockExpectAndReturn(__LINE__, attr, cmock_retval)
void osMutexNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osMutexAttr_t* attr, osMutexId_t cmock_to_return);
typedef osMutexId_t (* CMOCK_osMutexNew_CALLBACK)(const osMutexAttr_t* attr, int cmock_num_calls);
void osMutexNew_StubWithCallback(CMOCK_osMutexNew_CALLBACK Callback);
#define osMutexNew_IgnoreArg_attr() osMutexNew_CMockIgnoreArg_attr(__LINE__)
void osMutexNew_CMockIgnoreArg_attr(UNITY_LINE_TYPE cmock_line);
#define osMutexGetName_IgnoreAndReturn(cmock_retval) osMutexGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMutexGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define osMutexGetName_ExpectAndReturn(mutex_id, cmock_retval) osMutexGetName_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, const char* cmock_to_return);
typedef const char* (* CMOCK_osMutexGetName_CALLBACK)(osMutexId_t mutex_id, int cmock_num_calls);
void osMutexGetName_StubWithCallback(CMOCK_osMutexGetName_CALLBACK Callback);
#define osMutexGetName_IgnoreArg_mutex_id() osMutexGetName_CMockIgnoreArg_mutex_id(__LINE__)
void osMutexGetName_CMockIgnoreArg_mutex_id(UNITY_LINE_TYPE cmock_line);
#define osMutexAcquire_IgnoreAndReturn(cmock_retval) osMutexAcquire_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMutexAcquire_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osMutexAcquire_ExpectAndReturn(mutex_id, timeout, cmock_retval) osMutexAcquire_CMockExpectAndReturn(__LINE__, mutex_id, timeout, cmock_retval)
void osMutexAcquire_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, uint32_t timeout, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osMutexAcquire_CALLBACK)(osMutexId_t mutex_id, uint32_t timeout, int cmock_num_calls);
void osMutexAcquire_StubWithCallback(CMOCK_osMutexAcquire_CALLBACK Callback);
#define osMutexAcquire_IgnoreArg_mutex_id() osMutexAcquire_CMockIgnoreArg_mutex_id(__LINE__)
void osMutexAcquire_CMockIgnoreArg_mutex_id(UNITY_LINE_TYPE cmock_line);
#define osMutexAcquire_IgnoreArg_timeout() osMutexAcquire_CMockIgnoreArg_timeout(__LINE__)
void osMutexAcquire_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define osMutexRelease_IgnoreAndReturn(cmock_retval) osMutexRelease_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMutexRelease_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osMutexRelease_ExpectAndReturn(mutex_id, cmock_retval) osMutexRelease_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexRelease_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osMutexRelease_CALLBACK)(osMutexId_t mutex_id, int cmock_num_calls);
void osMutexRelease_StubWithCallback(CMOCK_osMutexRelease_CALLBACK Callback);
#define osMutexRelease_IgnoreArg_mutex_id() osMutexRelease_CMockIgnoreArg_mutex_id(__LINE__)
void osMutexRelease_CMockIgnoreArg_mutex_id(UNITY_LINE_TYPE cmock_line);
#define osMutexGetOwner_IgnoreAndReturn(cmock_retval) osMutexGetOwner_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMutexGetOwner_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t cmock_to_return);
#define osMutexGetOwner_ExpectAndReturn(mutex_id, cmock_retval) osMutexGetOwner_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexGetOwner_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, osThreadId_t cmock_to_return);
typedef osThreadId_t (* CMOCK_osMutexGetOwner_CALLBACK)(osMutexId_t mutex_id, int cmock_num_calls);
void osMutexGetOwner_StubWithCallback(CMOCK_osMutexGetOwner_CALLBACK Callback);
#define osMutexGetOwner_IgnoreArg_mutex_id() osMutexGetOwner_CMockIgnoreArg_mutex_id(__LINE__)
void osMutexGetOwner_CMockIgnoreArg_mutex_id(UNITY_LINE_TYPE cmock_line);
#define osMutexDelete_IgnoreAndReturn(cmock_retval) osMutexDelete_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMutexDelete_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osMutexDelete_ExpectAndReturn(mutex_id, cmock_retval) osMutexDelete_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osMutexDelete_CALLBACK)(osMutexId_t mutex_id, int cmock_num_calls);
void osMutexDelete_StubWithCallback(CMOCK_osMutexDelete_CALLBACK Callback);
#define osMutexDelete_IgnoreArg_mutex_id() osMutexDelete_CMockIgnoreArg_mutex_id(__LINE__)
void osMutexDelete_CMockIgnoreArg_mutex_id(UNITY_LINE_TYPE cmock_line);
#define osSemaphoreNew_IgnoreAndReturn(cmock_retval) osSemaphoreNew_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osSemaphoreNew_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t cmock_to_return);
#define osSemaphoreNew_ExpectAndReturn(max_count, initial_count, attr, cmock_retval) osSemaphoreNew_CMockExpectAndReturn(__LINE__, max_count, initial_count, attr, cmock_retval)
void osSemaphoreNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t* attr, osSemaphoreId_t cmock_to_return);
typedef osSemaphoreId_t (* CMOCK_osSemaphoreNew_CALLBACK)(uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t* attr, int cmock_num_calls);
void osSemaphoreNew_StubWithCallback(CMOCK_osSemaphoreNew_CALLBACK Callback);
#define osSemaphoreNew_IgnoreArg_max_count() osSemaphoreNew_CMockIgnoreArg_max_count(__LINE__)
void osSemaphoreNew_CMockIgnoreArg_max_count(UNITY_LINE_TYPE cmock_line);
#define osSemaphoreNew_IgnoreArg_initial_count() osSemaphoreNew_CMockIgnoreArg_initial_count(__LINE__)
void osSemaphoreNew_CMockIgnoreArg_initial_count(UNITY_LINE_TYPE cmock_line);
#define osSemaphoreNew_IgnoreArg_attr() osSemaphoreNew_CMockIgnoreArg_attr(__LINE__)
void osSemaphoreNew_CMockIgnoreArg_attr(UNITY_LINE_TYPE cmock_line);
#define osSemaphoreGetName_IgnoreAndReturn(cmock_retval) osSemaphoreGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osSemaphoreGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define osSemaphoreGetName_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreGetName_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, const char* cmock_to_return);
typedef const char* (* CMOCK_osSemaphoreGetName_CALLBACK)(osSemaphoreId_t semaphore_id, int cmock_num_calls);
void osSemaphoreGetName_StubWithCallback(CMOCK_osSemaphoreGetName_CALLBACK Callback);
#define osSemaphoreGetName_IgnoreArg_semaphore_id() osSemaphoreGetName_CMockIgnoreArg_semaphore_id(__LINE__)
void osSemaphoreGetName_CMockIgnoreArg_semaphore_id(UNITY_LINE_TYPE cmock_line);
#define osSemaphoreAcquire_IgnoreAndReturn(cmock_retval) osSemaphoreAcquire_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osSemaphoreAcquire_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osSemaphoreAcquire_ExpectAndReturn(semaphore_id, timeout, cmock_retval) osSemaphoreAcquire_CMockExpectAndReturn(__LINE__, semaphore_id, timeout, cmock_retval)
void osSemaphoreAcquire_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, uint32_t timeout, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osSemaphoreAcquire_CALLBACK)(osSemaphoreId_t semaphore_id, uint32_t timeout, int cmock_num_calls);
void osSemaphoreAcquire_StubWithCallback(CMOCK_osSemaphoreAcquire_CALLBACK Callback);
#define osSemaphoreAcquire_IgnoreArg_semaphore_id() osSemaphoreAcquire_CMockIgnoreArg_semaphore_id(__LINE__)
void osSemaphoreAcquire_CMockIgnoreArg_semaphore_id(UNITY_LINE_TYPE cmock_line);
#define osSemaphoreAcquire_IgnoreArg_timeout() osSemaphoreAcquire_CMockIgnoreArg_timeout(__LINE__)
void osSemaphoreAcquire_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define osSemaphoreRelease_IgnoreAndReturn(cmock_retval) osSemaphoreRelease_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osSemaphoreRelease_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osSemaphoreRelease_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreRelease_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreRelease_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osSemaphoreRelease_CALLBACK)(osSemaphoreId_t semaphore_id, int cmock_num_calls);
void osSemaphoreRelease_StubWithCallback(CMOCK_osSemaphoreRelease_CALLBACK Callback);
#define osSemaphoreRelease_IgnoreArg_semaphore_id() osSemaphoreRelease_CMockIgnoreArg_semaphore_id(__LINE__)
void osSemaphoreRelease_CMockIgnoreArg_semaphore_id(UNITY_LINE_TYPE cmock_line);
#define osSemaphoreGetCount_IgnoreAndReturn(cmock_retval) osSemaphoreGetCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osSemaphoreGetCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osSemaphoreGetCount_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreGetCount_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreGetCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osSemaphoreGetCount_CALLBACK)(osSemaphoreId_t semaphore_id, int cmock_num_calls);
void osSemaphoreGetCount_StubWithCallback(CMOCK_osSemaphoreGetCount_CALLBACK Callback);
#define osSemaphoreGetCount_IgnoreArg_semaphore_id() osSemaphoreGetCount_CMockIgnoreArg_semaphore_id(__LINE__)
void osSemaphoreGetCount_CMockIgnoreArg_semaphore_id(UNITY_LINE_TYPE cmock_line);
#define osSemaphoreDelete_IgnoreAndReturn(cmock_retval) osSemaphoreDelete_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osSemaphoreDelete_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osSemaphoreDelete_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreDelete_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osSemaphoreDelete_CALLBACK)(osSemaphoreId_t semaphore_id, int cmock_num_calls);
void osSemaphoreDelete_StubWithCallback(CMOCK_osSemaphoreDelete_CALLBACK Callback);
#define osSemaphoreDelete_IgnoreArg_semaphore_id() osSemaphoreDelete_CMockIgnoreArg_semaphore_id(__LINE__)
void osSemaphoreDelete_CMockIgnoreArg_semaphore_id(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolNew_IgnoreAndReturn(cmock_retval) osMemoryPoolNew_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMemoryPoolNew_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t cmock_to_return);
#define osMemoryPoolNew_ExpectAndReturn(block_count, block_size, attr, cmock_retval) osMemoryPoolNew_CMockExpectAndReturn(__LINE__, block_count, block_size, attr, cmock_retval)
void osMemoryPoolNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t* attr, osMemoryPoolId_t cmock_to_return);
typedef osMemoryPoolId_t (* CMOCK_osMemoryPoolNew_CALLBACK)(uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t* attr, int cmock_num_calls);
void osMemoryPoolNew_StubWithCallback(CMOCK_osMemoryPoolNew_CALLBACK Callback);
#define osMemoryPoolNew_IgnoreArg_block_count() osMemoryPoolNew_CMockIgnoreArg_block_count(__LINE__)
void osMemoryPoolNew_CMockIgnoreArg_block_count(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolNew_IgnoreArg_block_size() osMemoryPoolNew_CMockIgnoreArg_block_size(__LINE__)
void osMemoryPoolNew_CMockIgnoreArg_block_size(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolNew_IgnoreArg_attr() osMemoryPoolNew_CMockIgnoreArg_attr(__LINE__)
void osMemoryPoolNew_CMockIgnoreArg_attr(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolGetName_IgnoreAndReturn(cmock_retval) osMemoryPoolGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMemoryPoolGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define osMemoryPoolGetName_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetName_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, const char* cmock_to_return);
typedef const char* (* CMOCK_osMemoryPoolGetName_CALLBACK)(osMemoryPoolId_t mp_id, int cmock_num_calls);
void osMemoryPoolGetName_StubWithCallback(CMOCK_osMemoryPoolGetName_CALLBACK Callback);
#define osMemoryPoolGetName_IgnoreArg_mp_id() osMemoryPoolGetName_CMockIgnoreArg_mp_id(__LINE__)
void osMemoryPoolGetName_CMockIgnoreArg_mp_id(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolAlloc_IgnoreAndReturn(cmock_retval) osMemoryPoolAlloc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMemoryPoolAlloc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define osMemoryPoolAlloc_ExpectAndReturn(mp_id, timeout, cmock_retval) osMemoryPoolAlloc_CMockExpectAndReturn(__LINE__, mp_id, timeout, cmock_retval)
void osMemoryPoolAlloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t timeout, void* cmock_to_return);
typedef void* (* CMOCK_osMemoryPoolAlloc_CALLBACK)(osMemoryPoolId_t mp_id, uint32_t timeout, int cmock_num_calls);
void osMemoryPoolAlloc_StubWithCallback(CMOCK_osMemoryPoolAlloc_CALLBACK Callback);
#define osMemoryPoolAlloc_IgnoreArg_mp_id() osMemoryPoolAlloc_CMockIgnoreArg_mp_id(__LINE__)
void osMemoryPoolAlloc_CMockIgnoreArg_mp_id(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolAlloc_IgnoreArg_timeout() osMemoryPoolAlloc_CMockIgnoreArg_timeout(__LINE__)
void osMemoryPoolAlloc_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolFree_IgnoreAndReturn(cmock_retval) osMemoryPoolFree_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMemoryPoolFree_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osMemoryPoolFree_ExpectAndReturn(mp_id, block, cmock_retval) osMemoryPoolFree_CMockExpectAndReturn(__LINE__, mp_id, block, cmock_retval)
void osMemoryPoolFree_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, void* block, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osMemoryPoolFree_CALLBACK)(osMemoryPoolId_t mp_id, void* block, int cmock_num_calls);
void osMemoryPoolFree_StubWithCallback(CMOCK_osMemoryPoolFree_CALLBACK Callback);
#define osMemoryPoolFree_ReturnThruPtr_block(block) osMemoryPoolFree_CMockReturnMemThruPtr_block(__LINE__, block, sizeof(*block))
#define osMemoryPoolFree_ReturnArrayThruPtr_block(block, cmock_len) osMemoryPoolFree_CMockReturnMemThruPtr_block(__LINE__, block, (int)(cmock_len * (int)sizeof(*block)))
#define osMemoryPoolFree_ReturnMemThruPtr_block(block, cmock_size) osMemoryPoolFree_CMockReturnMemThruPtr_block(__LINE__, block, cmock_size)
void osMemoryPoolFree_CMockReturnMemThruPtr_block(UNITY_LINE_TYPE cmock_line, void* block, int cmock_size);
#define osMemoryPoolFree_IgnoreArg_mp_id() osMemoryPoolFree_CMockIgnoreArg_mp_id(__LINE__)
void osMemoryPoolFree_CMockIgnoreArg_mp_id(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolFree_IgnoreArg_block() osMemoryPoolFree_CMockIgnoreArg_block(__LINE__)
void osMemoryPoolFree_CMockIgnoreArg_block(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolGetCapacity_IgnoreAndReturn(cmock_retval) osMemoryPoolGetCapacity_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMemoryPoolGetCapacity_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osMemoryPoolGetCapacity_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetCapacity_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetCapacity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osMemoryPoolGetCapacity_CALLBACK)(osMemoryPoolId_t mp_id, int cmock_num_calls);
void osMemoryPoolGetCapacity_StubWithCallback(CMOCK_osMemoryPoolGetCapacity_CALLBACK Callback);
#define osMemoryPoolGetCapacity_IgnoreArg_mp_id() osMemoryPoolGetCapacity_CMockIgnoreArg_mp_id(__LINE__)
void osMemoryPoolGetCapacity_CMockIgnoreArg_mp_id(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolGetBlockSize_IgnoreAndReturn(cmock_retval) osMemoryPoolGetBlockSize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMemoryPoolGetBlockSize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osMemoryPoolGetBlockSize_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetBlockSize_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetBlockSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osMemoryPoolGetBlockSize_CALLBACK)(osMemoryPoolId_t mp_id, int cmock_num_calls);
void osMemoryPoolGetBlockSize_StubWithCallback(CMOCK_osMemoryPoolGetBlockSize_CALLBACK Callback);
#define osMemoryPoolGetBlockSize_IgnoreArg_mp_id() osMemoryPoolGetBlockSize_CMockIgnoreArg_mp_id(__LINE__)
void osMemoryPoolGetBlockSize_CMockIgnoreArg_mp_id(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolGetCount_IgnoreAndReturn(cmock_retval) osMemoryPoolGetCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMemoryPoolGetCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osMemoryPoolGetCount_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetCount_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osMemoryPoolGetCount_CALLBACK)(osMemoryPoolId_t mp_id, int cmock_num_calls);
void osMemoryPoolGetCount_StubWithCallback(CMOCK_osMemoryPoolGetCount_CALLBACK Callback);
#define osMemoryPoolGetCount_IgnoreArg_mp_id() osMemoryPoolGetCount_CMockIgnoreArg_mp_id(__LINE__)
void osMemoryPoolGetCount_CMockIgnoreArg_mp_id(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolGetSpace_IgnoreAndReturn(cmock_retval) osMemoryPoolGetSpace_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMemoryPoolGetSpace_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osMemoryPoolGetSpace_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetSpace_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetSpace_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osMemoryPoolGetSpace_CALLBACK)(osMemoryPoolId_t mp_id, int cmock_num_calls);
void osMemoryPoolGetSpace_StubWithCallback(CMOCK_osMemoryPoolGetSpace_CALLBACK Callback);
#define osMemoryPoolGetSpace_IgnoreArg_mp_id() osMemoryPoolGetSpace_CMockIgnoreArg_mp_id(__LINE__)
void osMemoryPoolGetSpace_CMockIgnoreArg_mp_id(UNITY_LINE_TYPE cmock_line);
#define osMemoryPoolDelete_IgnoreAndReturn(cmock_retval) osMemoryPoolDelete_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMemoryPoolDelete_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osMemoryPoolDelete_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolDelete_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osMemoryPoolDelete_CALLBACK)(osMemoryPoolId_t mp_id, int cmock_num_calls);
void osMemoryPoolDelete_StubWithCallback(CMOCK_osMemoryPoolDelete_CALLBACK Callback);
#define osMemoryPoolDelete_IgnoreArg_mp_id() osMemoryPoolDelete_CMockIgnoreArg_mp_id(__LINE__)
void osMemoryPoolDelete_CMockIgnoreArg_mp_id(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueNew_IgnoreAndReturn(cmock_retval) osMessageQueueNew_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueueNew_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t cmock_to_return);
#define osMessageQueueNew_ExpectAndReturn(msg_count, msg_size, attr, cmock_retval) osMessageQueueNew_CMockExpectAndReturn(__LINE__, msg_count, msg_size, attr, cmock_retval)
void osMessageQueueNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t* attr, osMessageQueueId_t cmock_to_return);
typedef osMessageQueueId_t (* CMOCK_osMessageQueueNew_CALLBACK)(uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t* attr, int cmock_num_calls);
void osMessageQueueNew_StubWithCallback(CMOCK_osMessageQueueNew_CALLBACK Callback);
#define osMessageQueueNew_IgnoreArg_msg_count() osMessageQueueNew_CMockIgnoreArg_msg_count(__LINE__)
void osMessageQueueNew_CMockIgnoreArg_msg_count(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueNew_IgnoreArg_msg_size() osMessageQueueNew_CMockIgnoreArg_msg_size(__LINE__)
void osMessageQueueNew_CMockIgnoreArg_msg_size(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueNew_IgnoreArg_attr() osMessageQueueNew_CMockIgnoreArg_attr(__LINE__)
void osMessageQueueNew_CMockIgnoreArg_attr(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueGetName_IgnoreAndReturn(cmock_retval) osMessageQueueGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueueGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define osMessageQueueGetName_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetName_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, const char* cmock_to_return);
typedef const char* (* CMOCK_osMessageQueueGetName_CALLBACK)(osMessageQueueId_t mq_id, int cmock_num_calls);
void osMessageQueueGetName_StubWithCallback(CMOCK_osMessageQueueGetName_CALLBACK Callback);
#define osMessageQueueGetName_IgnoreArg_mq_id() osMessageQueueGetName_CMockIgnoreArg_mq_id(__LINE__)
void osMessageQueueGetName_CMockIgnoreArg_mq_id(UNITY_LINE_TYPE cmock_line);
#define osMessageQueuePut_IgnoreAndReturn(cmock_retval) osMessageQueuePut_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueuePut_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osMessageQueuePut_ExpectAndReturn(mq_id, msg_ptr, msg_prio, timeout, cmock_retval) osMessageQueuePut_CMockExpectAndReturn(__LINE__, mq_id, msg_ptr, msg_prio, timeout, cmock_retval)
void osMessageQueuePut_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, const void* msg_ptr, uint8_t msg_prio, uint32_t timeout, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osMessageQueuePut_CALLBACK)(osMessageQueueId_t mq_id, const void* msg_ptr, uint8_t msg_prio, uint32_t timeout, int cmock_num_calls);
void osMessageQueuePut_StubWithCallback(CMOCK_osMessageQueuePut_CALLBACK Callback);
#define osMessageQueuePut_IgnoreArg_mq_id() osMessageQueuePut_CMockIgnoreArg_mq_id(__LINE__)
void osMessageQueuePut_CMockIgnoreArg_mq_id(UNITY_LINE_TYPE cmock_line);
#define osMessageQueuePut_IgnoreArg_msg_ptr() osMessageQueuePut_CMockIgnoreArg_msg_ptr(__LINE__)
void osMessageQueuePut_CMockIgnoreArg_msg_ptr(UNITY_LINE_TYPE cmock_line);
#define osMessageQueuePut_IgnoreArg_msg_prio() osMessageQueuePut_CMockIgnoreArg_msg_prio(__LINE__)
void osMessageQueuePut_CMockIgnoreArg_msg_prio(UNITY_LINE_TYPE cmock_line);
#define osMessageQueuePut_IgnoreArg_timeout() osMessageQueuePut_CMockIgnoreArg_timeout(__LINE__)
void osMessageQueuePut_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueGet_IgnoreAndReturn(cmock_retval) osMessageQueueGet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueueGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osMessageQueueGet_ExpectAndReturn(mq_id, msg_ptr, msg_prio, timeout, cmock_retval) osMessageQueueGet_CMockExpectAndReturn(__LINE__, mq_id, msg_ptr, msg_prio, timeout, cmock_retval)
void osMessageQueueGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, void* msg_ptr, uint8_t* msg_prio, uint32_t timeout, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osMessageQueueGet_CALLBACK)(osMessageQueueId_t mq_id, void* msg_ptr, uint8_t* msg_prio, uint32_t timeout, int cmock_num_calls);
void osMessageQueueGet_StubWithCallback(CMOCK_osMessageQueueGet_CALLBACK Callback);
#define osMessageQueueGet_ReturnThruPtr_msg_ptr(msg_ptr) osMessageQueueGet_CMockReturnMemThruPtr_msg_ptr(__LINE__, msg_ptr, sizeof(*msg_ptr))
#define osMessageQueueGet_ReturnArrayThruPtr_msg_ptr(msg_ptr, cmock_len) osMessageQueueGet_CMockReturnMemThruPtr_msg_ptr(__LINE__, msg_ptr, (int)(cmock_len * (int)sizeof(*msg_ptr)))
#define osMessageQueueGet_ReturnMemThruPtr_msg_ptr(msg_ptr, cmock_size) osMessageQueueGet_CMockReturnMemThruPtr_msg_ptr(__LINE__, msg_ptr, cmock_size)
void osMessageQueueGet_CMockReturnMemThruPtr_msg_ptr(UNITY_LINE_TYPE cmock_line, void* msg_ptr, int cmock_size);
#define osMessageQueueGet_ReturnThruPtr_msg_prio(msg_prio) osMessageQueueGet_CMockReturnMemThruPtr_msg_prio(__LINE__, msg_prio, sizeof(*msg_prio))
#define osMessageQueueGet_ReturnArrayThruPtr_msg_prio(msg_prio, cmock_len) osMessageQueueGet_CMockReturnMemThruPtr_msg_prio(__LINE__, msg_prio, (int)(cmock_len * (int)sizeof(*msg_prio)))
#define osMessageQueueGet_ReturnMemThruPtr_msg_prio(msg_prio, cmock_size) osMessageQueueGet_CMockReturnMemThruPtr_msg_prio(__LINE__, msg_prio, cmock_size)
void osMessageQueueGet_CMockReturnMemThruPtr_msg_prio(UNITY_LINE_TYPE cmock_line, uint8_t* msg_prio, int cmock_size);
#define osMessageQueueGet_IgnoreArg_mq_id() osMessageQueueGet_CMockIgnoreArg_mq_id(__LINE__)
void osMessageQueueGet_CMockIgnoreArg_mq_id(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueGet_IgnoreArg_msg_ptr() osMessageQueueGet_CMockIgnoreArg_msg_ptr(__LINE__)
void osMessageQueueGet_CMockIgnoreArg_msg_ptr(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueGet_IgnoreArg_msg_prio() osMessageQueueGet_CMockIgnoreArg_msg_prio(__LINE__)
void osMessageQueueGet_CMockIgnoreArg_msg_prio(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueGet_IgnoreArg_timeout() osMessageQueueGet_CMockIgnoreArg_timeout(__LINE__)
void osMessageQueueGet_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueGetCapacity_IgnoreAndReturn(cmock_retval) osMessageQueueGetCapacity_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueueGetCapacity_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osMessageQueueGetCapacity_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetCapacity_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetCapacity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osMessageQueueGetCapacity_CALLBACK)(osMessageQueueId_t mq_id, int cmock_num_calls);
void osMessageQueueGetCapacity_StubWithCallback(CMOCK_osMessageQueueGetCapacity_CALLBACK Callback);
#define osMessageQueueGetCapacity_IgnoreArg_mq_id() osMessageQueueGetCapacity_CMockIgnoreArg_mq_id(__LINE__)
void osMessageQueueGetCapacity_CMockIgnoreArg_mq_id(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueGetMsgSize_IgnoreAndReturn(cmock_retval) osMessageQueueGetMsgSize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueueGetMsgSize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osMessageQueueGetMsgSize_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetMsgSize_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetMsgSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osMessageQueueGetMsgSize_CALLBACK)(osMessageQueueId_t mq_id, int cmock_num_calls);
void osMessageQueueGetMsgSize_StubWithCallback(CMOCK_osMessageQueueGetMsgSize_CALLBACK Callback);
#define osMessageQueueGetMsgSize_IgnoreArg_mq_id() osMessageQueueGetMsgSize_CMockIgnoreArg_mq_id(__LINE__)
void osMessageQueueGetMsgSize_CMockIgnoreArg_mq_id(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueGetCount_IgnoreAndReturn(cmock_retval) osMessageQueueGetCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueueGetCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osMessageQueueGetCount_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetCount_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osMessageQueueGetCount_CALLBACK)(osMessageQueueId_t mq_id, int cmock_num_calls);
void osMessageQueueGetCount_StubWithCallback(CMOCK_osMessageQueueGetCount_CALLBACK Callback);
#define osMessageQueueGetCount_IgnoreArg_mq_id() osMessageQueueGetCount_CMockIgnoreArg_mq_id(__LINE__)
void osMessageQueueGetCount_CMockIgnoreArg_mq_id(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueGetSpace_IgnoreAndReturn(cmock_retval) osMessageQueueGetSpace_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueueGetSpace_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osMessageQueueGetSpace_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetSpace_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetSpace_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_osMessageQueueGetSpace_CALLBACK)(osMessageQueueId_t mq_id, int cmock_num_calls);
void osMessageQueueGetSpace_StubWithCallback(CMOCK_osMessageQueueGetSpace_CALLBACK Callback);
#define osMessageQueueGetSpace_IgnoreArg_mq_id() osMessageQueueGetSpace_CMockIgnoreArg_mq_id(__LINE__)
void osMessageQueueGetSpace_CMockIgnoreArg_mq_id(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueReset_IgnoreAndReturn(cmock_retval) osMessageQueueReset_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueueReset_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osMessageQueueReset_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueReset_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueReset_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osMessageQueueReset_CALLBACK)(osMessageQueueId_t mq_id, int cmock_num_calls);
void osMessageQueueReset_StubWithCallback(CMOCK_osMessageQueueReset_CALLBACK Callback);
#define osMessageQueueReset_IgnoreArg_mq_id() osMessageQueueReset_CMockIgnoreArg_mq_id(__LINE__)
void osMessageQueueReset_CMockIgnoreArg_mq_id(UNITY_LINE_TYPE cmock_line);
#define osMessageQueueDelete_IgnoreAndReturn(cmock_retval) osMessageQueueDelete_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osMessageQueueDelete_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osMessageQueueDelete_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueDelete_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, osStatus_t cmock_to_return);
typedef osStatus_t (* CMOCK_osMessageQueueDelete_CALLBACK)(osMessageQueueId_t mq_id, int cmock_num_calls);
void osMessageQueueDelete_StubWithCallback(CMOCK_osMessageQueueDelete_CALLBACK Callback);
#define osMessageQueueDelete_IgnoreArg_mq_id() osMessageQueueDelete_CMockIgnoreArg_mq_id(__LINE__)
void osMessageQueueDelete_CMockIgnoreArg_mq_id(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
