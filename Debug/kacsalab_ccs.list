
kacsalab_ccs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bcc  08006bcc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006bcc  08006bcc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bcc  08006bcc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bcc  08006bcc  00016bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab4  20000010  08006be4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ac4  08006be4  00021ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002512a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f9e  00000000  00000000  0004516a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002188  00000000  00000000  00049108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe0  00000000  00000000  0004b290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed59  00000000  00000000  0004d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff30  00000000  00000000  0006bfc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba854  00000000  00000000  0008bef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014674d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f48  00000000  00000000  001467a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b00 	.word	0x08006b00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006b00 	.word	0x08006b00

080001d0 <LSM6DS3_ACC_GYRO_WriteReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
mems_status_t LSM6DS3_ACC_GYRO_WriteReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	607a      	str	r2, [r7, #4]
 80001da:	461a      	mov	r2, r3
 80001dc:	460b      	mov	r3, r1
 80001de:	72fb      	strb	r3, [r7, #11]
 80001e0:	4613      	mov	r3, r2
 80001e2:	813b      	strh	r3, [r7, #8]

  if (LSM6DS3_IO_Write(handle, Reg, Bufp, len))
 80001e4:	893b      	ldrh	r3, [r7, #8]
 80001e6:	7af9      	ldrb	r1, [r7, #11]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	68f8      	ldr	r0, [r7, #12]
 80001ec:	f000 fc7c 	bl	8000ae8 <LSM6DS3_IO_Write>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <LSM6DS3_ACC_GYRO_WriteReg+0x2a>
  {
    return MEMS_ERROR;
 80001f6:	2300      	movs	r3, #0
 80001f8:	e000      	b.n	80001fc <LSM6DS3_ACC_GYRO_WriteReg+0x2c>
  }
  else
  {
    return MEMS_SUCCESS;
 80001fa:	2301      	movs	r3, #1
  }
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3710      	adds	r7, #16
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <LSM6DS3_ACC_GYRO_ReadReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
mems_status_t LSM6DS3_ACC_GYRO_ReadReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	607a      	str	r2, [r7, #4]
 800020e:	461a      	mov	r2, r3
 8000210:	460b      	mov	r3, r1
 8000212:	72fb      	strb	r3, [r7, #11]
 8000214:	4613      	mov	r3, r2
 8000216:	813b      	strh	r3, [r7, #8]

  if (LSM6DS3_IO_Read(handle, Reg, Bufp, len))
 8000218:	893b      	ldrh	r3, [r7, #8]
 800021a:	7af9      	ldrb	r1, [r7, #11]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	68f8      	ldr	r0, [r7, #12]
 8000220:	f000 fc7f 	bl	8000b22 <LSM6DS3_IO_Read>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <LSM6DS3_ACC_GYRO_ReadReg+0x2a>
  {
    return MEMS_ERROR;
 800022a:	2300      	movs	r3, #0
 800022c:	e000      	b.n	8000230 <LSM6DS3_ACC_GYRO_ReadReg+0x2c>
  }
  else
  {
    return MEMS_SUCCESS;
 800022e:	2301      	movs	r3, #1
  }
}
 8000230:	4618      	mov	r0, r3
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <LSM6DS3_ACC_GYRO_W_BDU>:
* Input          : LSM6DS3_ACC_GYRO_BDU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_BDU(void *handle, LSM6DS3_ACC_GYRO_BDU_t newValue)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	460b      	mov	r3, r1
 8000242:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 8000244:	f107 020f 	add.w	r2, r7, #15
 8000248:	2301      	movs	r3, #1
 800024a:	2112      	movs	r1, #18
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f7ff ffd9 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d101      	bne.n	800025c <LSM6DS3_ACC_GYRO_W_BDU+0x24>
    return MEMS_ERROR;
 8000258:	2300      	movs	r3, #0
 800025a:	e016      	b.n	800028a <LSM6DS3_ACC_GYRO_W_BDU+0x52>

  value &= ~LSM6DS3_ACC_GYRO_BDU_MASK;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000262:	b2db      	uxtb	r3, r3
 8000264:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 8000266:	7bfa      	ldrb	r2, [r7, #15]
 8000268:	78fb      	ldrb	r3, [r7, #3]
 800026a:	4313      	orrs	r3, r2
 800026c:	b2db      	uxtb	r3, r3
 800026e:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 8000270:	f107 020f 	add.w	r2, r7, #15
 8000274:	2301      	movs	r3, #1
 8000276:	2112      	movs	r1, #18
 8000278:	6878      	ldr	r0, [r7, #4]
 800027a:	f7ff ffa9 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d101      	bne.n	8000288 <LSM6DS3_ACC_GYRO_W_BDU+0x50>
    return MEMS_ERROR;
 8000284:	2300      	movs	r3, #0
 8000286:	e000      	b.n	800028a <LSM6DS3_ACC_GYRO_W_BDU+0x52>

  return MEMS_SUCCESS;
 8000288:	2301      	movs	r3, #1
}
 800028a:	4618      	mov	r0, r3
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <LSM6DS3_ACC_GYRO_GetRawAccData>:
* Input          : pointer to [u8_t]
* Output         : GetAccData buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t LSM6DS3_ACC_GYRO_GetRawAccData(void *handle, u8_t *buff)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b084      	sub	sp, #16
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
  u8_t i, j, k;
  u8_t numberOfByteForDimension;

  numberOfByteForDimension = 6 / 3;
 800029c:	2302      	movs	r3, #2
 800029e:	733b      	strb	r3, [r7, #12]

  k = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	737b      	strb	r3, [r7, #13]
  for (i = 0; i < 3; i++ )
 80002a4:	2300      	movs	r3, #0
 80002a6:	73fb      	strb	r3, [r7, #15]
 80002a8:	e01e      	b.n	80002e8 <LSM6DS3_ACC_GYRO_GetRawAccData+0x56>
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
 80002aa:	2300      	movs	r3, #0
 80002ac:	73bb      	strb	r3, [r7, #14]
 80002ae:	e014      	b.n	80002da <LSM6DS3_ACC_GYRO_GetRawAccData+0x48>
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_XL + k, &buff[k], 1))
 80002b0:	7b7b      	ldrb	r3, [r7, #13]
 80002b2:	3328      	adds	r3, #40	; 0x28
 80002b4:	b2d9      	uxtb	r1, r3
 80002b6:	7b7b      	ldrb	r3, [r7, #13]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	441a      	add	r2, r3
 80002bc:	2301      	movs	r3, #1
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ffa0 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d101      	bne.n	80002ce <LSM6DS3_ACC_GYRO_GetRawAccData+0x3c>
        return MEMS_ERROR;
 80002ca:	2300      	movs	r3, #0
 80002cc:	e010      	b.n	80002f0 <LSM6DS3_ACC_GYRO_GetRawAccData+0x5e>
      k++;
 80002ce:	7b7b      	ldrb	r3, [r7, #13]
 80002d0:	3301      	adds	r3, #1
 80002d2:	737b      	strb	r3, [r7, #13]
    for (j = 0; j < numberOfByteForDimension; j++ )
 80002d4:	7bbb      	ldrb	r3, [r7, #14]
 80002d6:	3301      	adds	r3, #1
 80002d8:	73bb      	strb	r3, [r7, #14]
 80002da:	7bba      	ldrb	r2, [r7, #14]
 80002dc:	7b3b      	ldrb	r3, [r7, #12]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d3e6      	bcc.n	80002b0 <LSM6DS3_ACC_GYRO_GetRawAccData+0x1e>
  for (i = 0; i < 3; i++ )
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	3301      	adds	r3, #1
 80002e6:	73fb      	strb	r3, [r7, #15]
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d9dd      	bls.n	80002aa <LSM6DS3_ACC_GYRO_GetRawAccData+0x18>
    }
  }

  return MEMS_SUCCESS;
 80002ee:	2301      	movs	r3, #1
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <LSM6DS3_ACC_GYRO_W_ODR_XL>:
* Input          : LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t newValue)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 8000304:	f107 020f 	add.w	r2, r7, #15
 8000308:	2301      	movs	r3, #1
 800030a:	2110      	movs	r1, #16
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f7ff ff79 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d101      	bne.n	800031c <LSM6DS3_ACC_GYRO_W_ODR_XL+0x24>
    return MEMS_ERROR;
 8000318:	2300      	movs	r3, #0
 800031a:	e016      	b.n	800034a <LSM6DS3_ACC_GYRO_W_ODR_XL+0x52>

  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	b2db      	uxtb	r3, r3
 8000324:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 8000326:	7bfa      	ldrb	r2, [r7, #15]
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	4313      	orrs	r3, r2
 800032c:	b2db      	uxtb	r3, r3
 800032e:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 8000330:	f107 020f 	add.w	r2, r7, #15
 8000334:	2301      	movs	r3, #1
 8000336:	2110      	movs	r1, #16
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f7ff ff49 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d101      	bne.n	8000348 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x50>
    return MEMS_ERROR;
 8000344:	2300      	movs	r3, #0
 8000346:	e000      	b.n	800034a <LSM6DS3_ACC_GYRO_W_ODR_XL+0x52>

  return MEMS_SUCCESS;
 8000348:	2301      	movs	r3, #1
}
 800034a:	4618      	mov	r0, r3
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <LSM6DS3_ACC_GYRO_R_ODR_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : Status of ODR_XL see LSM6DS3_ACC_GYRO_ODR_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t LSM6DS3_ACC_GYRO_R_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t *value)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b082      	sub	sp, #8
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	6039      	str	r1, [r7, #0]
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, (u8_t *)value, 1) )
 800035c:	2301      	movs	r3, #1
 800035e:	683a      	ldr	r2, [r7, #0]
 8000360:	2110      	movs	r1, #16
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f7ff ff4e 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <LSM6DS3_ACC_GYRO_R_ODR_XL+0x20>
    return MEMS_ERROR;
 800036e:	2300      	movs	r3, #0
 8000370:	e007      	b.n	8000382 <LSM6DS3_ACC_GYRO_R_ODR_XL+0x30>

  *value &= LSM6DS3_ACC_GYRO_ODR_XL_MASK; //mask
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	f023 030f 	bic.w	r3, r3, #15
 800037a:	b2da      	uxtb	r2, r3
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8000380:	2301      	movs	r3, #1
}
 8000382:	4618      	mov	r0, r3
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}

0800038a <LSM6DS3_ACC_GYRO_W_ODR_G>:
* Input          : LSM6DS3_ACC_GYRO_ODR_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_ODR_G(void *handle, LSM6DS3_ACC_GYRO_ODR_G_t newValue)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b084      	sub	sp, #16
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
 8000392:	460b      	mov	r3, r1
 8000394:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 8000396:	f107 020f 	add.w	r2, r7, #15
 800039a:	2301      	movs	r3, #1
 800039c:	2111      	movs	r1, #17
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f7ff ff30 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d101      	bne.n	80003ae <LSM6DS3_ACC_GYRO_W_ODR_G+0x24>
    return MEMS_ERROR;
 80003aa:	2300      	movs	r3, #0
 80003ac:	e016      	b.n	80003dc <LSM6DS3_ACC_GYRO_W_ODR_G+0x52>

  value &= ~LSM6DS3_ACC_GYRO_ODR_G_MASK;
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	f003 030f 	and.w	r3, r3, #15
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 80003b8:	7bfa      	ldrb	r2, [r7, #15]
 80003ba:	78fb      	ldrb	r3, [r7, #3]
 80003bc:	4313      	orrs	r3, r2
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 80003c2:	f107 020f 	add.w	r2, r7, #15
 80003c6:	2301      	movs	r3, #1
 80003c8:	2111      	movs	r1, #17
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f7ff ff00 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d101      	bne.n	80003da <LSM6DS3_ACC_GYRO_W_ODR_G+0x50>
    return MEMS_ERROR;
 80003d6:	2300      	movs	r3, #0
 80003d8:	e000      	b.n	80003dc <LSM6DS3_ACC_GYRO_W_ODR_G+0x52>

  return MEMS_SUCCESS;
 80003da:	2301      	movs	r3, #1
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>:
* Input          : LSM6DS3_ACC_GYRO_FIFO_MODE_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_FIFO_MODE(void *handle, LSM6DS3_ACC_GYRO_FIFO_MODE_t newValue)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
 80003f0:	f107 020f 	add.w	r2, r7, #15
 80003f4:	2301      	movs	r3, #1
 80003f6:	210a      	movs	r1, #10
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f7ff ff03 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x24>
    return MEMS_ERROR;
 8000404:	2300      	movs	r3, #0
 8000406:	e016      	b.n	8000436 <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x52>

  value &= ~LSM6DS3_ACC_GYRO_FIFO_MODE_MASK;
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	f023 0307 	bic.w	r3, r3, #7
 800040e:	b2db      	uxtb	r3, r3
 8000410:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 8000412:	7bfa      	ldrb	r2, [r7, #15]
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	4313      	orrs	r3, r2
 8000418:	b2db      	uxtb	r3, r3
 800041a:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
 800041c:	f107 020f 	add.w	r2, r7, #15
 8000420:	2301      	movs	r3, #1
 8000422:	210a      	movs	r1, #10
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff fed3 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d101      	bne.n	8000434 <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x50>
    return MEMS_ERROR;
 8000430:	2300      	movs	r3, #0
 8000432:	e000      	b.n	8000436 <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x52>

  return MEMS_SUCCESS;
 8000434:	2301      	movs	r3, #1
}
 8000436:	4618      	mov	r0, r3
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>:
* Input          : LSM6DS3_ACC_GYRO_IF_INC_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(void *handle, LSM6DS3_ACC_GYRO_IF_INC_t newValue)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b084      	sub	sp, #16
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	460b      	mov	r3, r1
 8000448:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 800044a:	f107 020f 	add.w	r2, r7, #15
 800044e:	2301      	movs	r3, #1
 8000450:	2112      	movs	r1, #18
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff fed6 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d101      	bne.n	8000462 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x24>
    return MEMS_ERROR;
 800045e:	2300      	movs	r3, #0
 8000460:	e016      	b.n	8000490 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x52>

  value &= ~LSM6DS3_ACC_GYRO_IF_INC_MASK;
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	f023 0304 	bic.w	r3, r3, #4
 8000468:	b2db      	uxtb	r3, r3
 800046a:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 800046c:	7bfa      	ldrb	r2, [r7, #15]
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	4313      	orrs	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 8000476:	f107 020f 	add.w	r2, r7, #15
 800047a:	2301      	movs	r3, #1
 800047c:	2112      	movs	r1, #18
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff fea6 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d101      	bne.n	800048e <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x50>
    return MEMS_ERROR;
 800048a:	2300      	movs	r3, #0
 800048c:	e000      	b.n	8000490 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x52>

  return MEMS_SUCCESS;
 800048e:	2301      	movs	r3, #1
}
 8000490:	4618      	mov	r0, r3
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <LSM6DS3_ACC_GYRO_W_XEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_XEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_XEN_XL(void *handle, LSM6DS3_ACC_GYRO_XEN_XL_t newValue)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	460b      	mov	r3, r1
 80004a2:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 80004a4:	f107 020f 	add.w	r2, r7, #15
 80004a8:	2301      	movs	r3, #1
 80004aa:	2118      	movs	r1, #24
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f7ff fea9 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d101      	bne.n	80004bc <LSM6DS3_ACC_GYRO_W_XEN_XL+0x24>
    return MEMS_ERROR;
 80004b8:	2300      	movs	r3, #0
 80004ba:	e016      	b.n	80004ea <LSM6DS3_ACC_GYRO_W_XEN_XL+0x52>

  value &= ~LSM6DS3_ACC_GYRO_XEN_XL_MASK;
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	f023 0308 	bic.w	r3, r3, #8
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 80004c6:	7bfa      	ldrb	r2, [r7, #15]
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 80004d0:	f107 020f 	add.w	r2, r7, #15
 80004d4:	2301      	movs	r3, #1
 80004d6:	2118      	movs	r1, #24
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff fe79 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d101      	bne.n	80004e8 <LSM6DS3_ACC_GYRO_W_XEN_XL+0x50>
    return MEMS_ERROR;
 80004e4:	2300      	movs	r3, #0
 80004e6:	e000      	b.n	80004ea <LSM6DS3_ACC_GYRO_W_XEN_XL+0x52>

  return MEMS_SUCCESS;
 80004e8:	2301      	movs	r3, #1
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <LSM6DS3_ACC_GYRO_W_YEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_YEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_YEN_XL(void *handle, LSM6DS3_ACC_GYRO_YEN_XL_t newValue)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b084      	sub	sp, #16
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
 80004fa:	460b      	mov	r3, r1
 80004fc:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 80004fe:	f107 020f 	add.w	r2, r7, #15
 8000502:	2301      	movs	r3, #1
 8000504:	2118      	movs	r1, #24
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff fe7c 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d101      	bne.n	8000516 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x24>
    return MEMS_ERROR;
 8000512:	2300      	movs	r3, #0
 8000514:	e016      	b.n	8000544 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x52>

  value &= ~LSM6DS3_ACC_GYRO_YEN_XL_MASK;
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	f023 0310 	bic.w	r3, r3, #16
 800051c:	b2db      	uxtb	r3, r3
 800051e:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 8000520:	7bfa      	ldrb	r2, [r7, #15]
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	4313      	orrs	r3, r2
 8000526:	b2db      	uxtb	r3, r3
 8000528:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800052a:	f107 020f 	add.w	r2, r7, #15
 800052e:	2301      	movs	r3, #1
 8000530:	2118      	movs	r1, #24
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff fe4c 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d101      	bne.n	8000542 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x50>
    return MEMS_ERROR;
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x52>

  return MEMS_SUCCESS;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <LSM6DS3_ACC_GYRO_W_ZEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_ZEN_XL(void *handle, LSM6DS3_ACC_GYRO_ZEN_XL_t newValue)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 8000558:	f107 020f 	add.w	r2, r7, #15
 800055c:	2301      	movs	r3, #1
 800055e:	2118      	movs	r1, #24
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f7ff fe4f 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d101      	bne.n	8000570 <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x24>
    return MEMS_ERROR;
 800056c:	2300      	movs	r3, #0
 800056e:	e016      	b.n	800059e <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x52>

  value &= ~LSM6DS3_ACC_GYRO_ZEN_XL_MASK;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f023 0320 	bic.w	r3, r3, #32
 8000576:	b2db      	uxtb	r3, r3
 8000578:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 800057a:	7bfa      	ldrb	r2, [r7, #15]
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	4313      	orrs	r3, r2
 8000580:	b2db      	uxtb	r3, r3
 8000582:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 8000584:	f107 020f 	add.w	r2, r7, #15
 8000588:	2301      	movs	r3, #1
 800058a:	2118      	movs	r1, #24
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff fe1f 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x50>
    return MEMS_ERROR;
 8000598:	2300      	movs	r3, #0
 800059a:	e000      	b.n	800059e <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x52>

  return MEMS_SUCCESS;
 800059c:	2301      	movs	r3, #1
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <LSM6DS3_ACC_GYRO_W_XEN_G>:
* Input          : LSM6DS3_ACC_GYRO_XEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_XEN_G(void *handle, LSM6DS3_ACC_GYRO_XEN_G_t newValue)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b084      	sub	sp, #16
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	460b      	mov	r3, r1
 80005b0:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 80005b2:	f107 020f 	add.w	r2, r7, #15
 80005b6:	2301      	movs	r3, #1
 80005b8:	2119      	movs	r1, #25
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff fe22 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <LSM6DS3_ACC_GYRO_W_XEN_G+0x24>
    return MEMS_ERROR;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e016      	b.n	80005f8 <LSM6DS3_ACC_GYRO_W_XEN_G+0x52>

  value &= ~LSM6DS3_ACC_GYRO_XEN_G_MASK;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	f023 0308 	bic.w	r3, r3, #8
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 80005d4:	7bfa      	ldrb	r2, [r7, #15]
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	4313      	orrs	r3, r2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 80005de:	f107 020f 	add.w	r2, r7, #15
 80005e2:	2301      	movs	r3, #1
 80005e4:	2119      	movs	r1, #25
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff fdf2 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <LSM6DS3_ACC_GYRO_W_XEN_G+0x50>
    return MEMS_ERROR;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e000      	b.n	80005f8 <LSM6DS3_ACC_GYRO_W_XEN_G+0x52>

  return MEMS_SUCCESS;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <LSM6DS3_ACC_GYRO_W_YEN_G>:
* Input          : LSM6DS3_ACC_GYRO_YEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_YEN_G(void *handle, LSM6DS3_ACC_GYRO_YEN_G_t newValue)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800060c:	f107 020f 	add.w	r2, r7, #15
 8000610:	2301      	movs	r3, #1
 8000612:	2119      	movs	r1, #25
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff fdf5 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d101      	bne.n	8000624 <LSM6DS3_ACC_GYRO_W_YEN_G+0x24>
    return MEMS_ERROR;
 8000620:	2300      	movs	r3, #0
 8000622:	e016      	b.n	8000652 <LSM6DS3_ACC_GYRO_W_YEN_G+0x52>

  value &= ~LSM6DS3_ACC_GYRO_YEN_G_MASK;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	f023 0310 	bic.w	r3, r3, #16
 800062a:	b2db      	uxtb	r3, r3
 800062c:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 800062e:	7bfa      	ldrb	r2, [r7, #15]
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	4313      	orrs	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 8000638:	f107 020f 	add.w	r2, r7, #15
 800063c:	2301      	movs	r3, #1
 800063e:	2119      	movs	r1, #25
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff fdc5 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d101      	bne.n	8000650 <LSM6DS3_ACC_GYRO_W_YEN_G+0x50>
    return MEMS_ERROR;
 800064c:	2300      	movs	r3, #0
 800064e:	e000      	b.n	8000652 <LSM6DS3_ACC_GYRO_W_YEN_G+0x52>

  return MEMS_SUCCESS;
 8000650:	2301      	movs	r3, #1
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <LSM6DS3_ACC_GYRO_W_ZEN_G>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
mems_status_t  LSM6DS3_ACC_GYRO_W_ZEN_G(void *handle, LSM6DS3_ACC_GYRO_ZEN_G_t newValue)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	460b      	mov	r3, r1
 8000664:	70fb      	strb	r3, [r7, #3]
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 8000666:	f107 020f 	add.w	r2, r7, #15
 800066a:	2301      	movs	r3, #1
 800066c:	2119      	movs	r1, #25
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff fdc8 	bl	8000204 <LSM6DS3_ACC_GYRO_ReadReg>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d101      	bne.n	800067e <LSM6DS3_ACC_GYRO_W_ZEN_G+0x24>
    return MEMS_ERROR;
 800067a:	2300      	movs	r3, #0
 800067c:	e016      	b.n	80006ac <LSM6DS3_ACC_GYRO_W_ZEN_G+0x52>

  value &= ~LSM6DS3_ACC_GYRO_ZEN_G_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	f023 0320 	bic.w	r3, r3, #32
 8000684:	b2db      	uxtb	r3, r3
 8000686:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 8000688:	7bfa      	ldrb	r2, [r7, #15]
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	4313      	orrs	r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	73fb      	strb	r3, [r7, #15]

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 8000692:	f107 020f 	add.w	r2, r7, #15
 8000696:	2301      	movs	r3, #1
 8000698:	2119      	movs	r1, #25
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff fd98 	bl	80001d0 <LSM6DS3_ACC_GYRO_WriteReg>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <LSM6DS3_ACC_GYRO_W_ZEN_G+0x50>
    return MEMS_ERROR;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <LSM6DS3_ACC_GYRO_W_ZEN_G+0x52>

  return MEMS_SUCCESS;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_CAN_Init+0x60>)
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_CAN_Init+0x64>)
 80006bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_CAN_Init+0x60>)
 80006c0:	2210      	movs	r2, #16
 80006c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_CAN_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_CAN_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_CAN_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_CAN_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_CAN_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_CAN_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_CAN_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_CAN_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_CAN_Init+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_CAN_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_CAN_Init+0x60>)
 8000702:	f000 fc33 	bl	8000f6c <HAL_CAN_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800070c:	f000 faa2 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20001934 	.word	0x20001934
 8000718:	40006400 	.word	0x40006400

0800071c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a18      	ldr	r2, [pc, #96]	; (800079c <HAL_CAN_MspInit+0x80>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d129      	bne.n	8000792 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_CAN_MspInit+0x84>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_CAN_MspInit+0x84>)
 8000744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_CAN_MspInit+0x84>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_CAN_MspInit+0x84>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <HAL_CAN_MspInit+0x84>)
 800075c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_CAN_MspInit+0x84>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800076e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000780:	2309      	movs	r3, #9
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f000 fdcb 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40006400 	.word	0x40006400
 80007a0:	40021000 	.word	0x40021000

080007a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <MX_FREERTOS_Init+0x28>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <MX_FREERTOS_Init+0x2c>)
 80007ae:	f003 fc8f 	bl	80040d0 <osThreadNew>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <MX_FREERTOS_Init+0x30>)
 80007b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  imu_task_handle = osThreadNew(StartImuTask, NULL, &imu_task_attributes);
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <MX_FREERTOS_Init+0x34>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <MX_FREERTOS_Init+0x38>)
 80007be:	f003 fc87 	bl	80040d0 <osThreadNew>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <MX_FREERTOS_Init+0x3c>)
 80007c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	08006b70 	.word	0x08006b70
 80007d0:	080007e5 	.word	0x080007e5
 80007d4:	2000195c 	.word	0x2000195c
 80007d8:	08006b4c 	.word	0x08006b4c
 80007dc:	08000959 	.word	0x08000959
 80007e0:	20001960 	.word	0x20001960

080007e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f003 fd19 	bl	8004224 <osDelay>
 80007f2:	e7fb      	b.n	80007ec <StartDefaultTask+0x8>

080007f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_GPIO_Init+0x5c>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <MX_GPIO_Init+0x5c>)
 8000800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_GPIO_Init+0x5c>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_GPIO_Init+0x5c>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <MX_GPIO_Init+0x5c>)
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_GPIO_Init+0x5c>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_GPIO_Init+0x5c>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <MX_GPIO_Init+0x5c>)
 8000830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000834:	6153      	str	r3, [r2, #20]
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_GPIO_Init+0x5c>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000890:	f000 febc 	bl	800160c <HAL_I2C_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089a:	f000 f9db 	bl	8000c54 <Error_Handler>
 // }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20001964 	.word	0x20001964
 80008a8:	40005400 	.word	0x40005400
 80008ac:	2000090e 	.word	0x2000090e

080008b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_I2C_MspInit+0x7c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d127      	bne.n	8000922 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <HAL_I2C_MspInit+0x80>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <HAL_I2C_MspInit+0x80>)
 80008d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_I2C_MspInit+0x80>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ea:	23c0      	movs	r3, #192	; 0xc0
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ee:	2312      	movs	r3, #18
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fa:	2304      	movs	r3, #4
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <HAL_I2C_MspInit+0x84>)
 8000906:	f000 fd0f 	bl	8001328 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_I2C_MspInit+0x80>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_I2C_MspInit+0x80>)
 8000910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000914:	61d3      	str	r3, [r2, #28]
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_I2C_MspInit+0x80>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	; 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40005400 	.word	0x40005400
 8000930:	40021000 	.word	0x40021000
 8000934:	48000400 	.word	0x48000400

08000938 <dik>:
#include "cmsis_os.h"
#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void dik() {
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
	volatile uint8_t ouch = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	71fb      	strb	r3, [r7, #7]
	++ouch;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	3301      	adds	r3, #1
 8000948:	b2db      	uxtb	r3, r3
 800094a:	71fb      	strb	r3, [r7, #7]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <StartImuTask>:
void StartImuTask(void *argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	75fb      	strb	r3, [r7, #23]
	  /* Enable register address automatically incremented during a multiple byte
	     access with a serial interface. */
	if ( LSM6DS3_ACC_GYRO_W_IF_Addr_Incr( (void *)&hi2c1, LSM6DS3_ACC_GYRO_IF_INC_ENABLED ) == MEMS_ERROR )
 8000964:	2104      	movs	r1, #4
 8000966:	485e      	ldr	r0, [pc, #376]	; (8000ae0 <StartImuTask+0x188>)
 8000968:	f7ff fd69 	bl	800043e <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <StartImuTask+0x1e>
	  {
		dik();
 8000972:	f7ff ffe1 	bl	8000938 <dik>
	  }

	  /* Enable BDU */
	  if ( LSM6DS3_ACC_GYRO_W_BDU( (void *)&hi2c1, LSM6DS3_ACC_GYRO_BDU_BLOCK_UPDATE ) == MEMS_ERROR )
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	4859      	ldr	r0, [pc, #356]	; (8000ae0 <StartImuTask+0x188>)
 800097a:	f7ff fc5d 	bl	8000238 <LSM6DS3_ACC_GYRO_W_BDU>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <StartImuTask+0x30>
	  {dik();
 8000984:	f7ff ffd8 	bl	8000938 <dik>
	  }

	  /* FIFO mode selection */
	  if ( LSM6DS3_ACC_GYRO_W_FIFO_MODE( (void *)&hi2c1, LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS ) == MEMS_ERROR )
 8000988:	2100      	movs	r1, #0
 800098a:	4855      	ldr	r0, [pc, #340]	; (8000ae0 <StartImuTask+0x188>)
 800098c:	f7ff fd2a 	bl	80003e4 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <StartImuTask+0x42>
	  {dik();
 8000996:	f7ff ffcf 	bl	8000938 <dik>
	  }

	  /* Output data rate selection - power down. */
	  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)&hi2c1, LSM6DS3_ACC_GYRO_ODR_XL_POWER_DOWN ) == MEMS_ERROR )
 800099a:	2100      	movs	r1, #0
 800099c:	4850      	ldr	r0, [pc, #320]	; (8000ae0 <StartImuTask+0x188>)
 800099e:	f7ff fcab 	bl	80002f8 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <StartImuTask+0x54>
	  {dik();
 80009a8:	f7ff ffc6 	bl	8000938 <dik>
	  }


	  /* Enable axes. */
	  if ( LSM6DS3_ACC_GYRO_W_XEN_XL( (void *)&hi2c1, LSM6DS3_ACC_GYRO_XEN_XL_ENABLED ) == MEMS_ERROR )
 80009ac:	2108      	movs	r1, #8
 80009ae:	484c      	ldr	r0, [pc, #304]	; (8000ae0 <StartImuTask+0x188>)
 80009b0:	f7ff fd72 	bl	8000498 <LSM6DS3_ACC_GYRO_W_XEN_XL>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <StartImuTask+0x66>
	  {
		  dik();
 80009ba:	f7ff ffbd 	bl	8000938 <dik>
	  }

	  if ( LSM6DS3_ACC_GYRO_W_YEN_XL( (void *)&hi2c1, LSM6DS3_ACC_GYRO_YEN_XL_ENABLED ) == MEMS_ERROR )
 80009be:	2110      	movs	r1, #16
 80009c0:	4847      	ldr	r0, [pc, #284]	; (8000ae0 <StartImuTask+0x188>)
 80009c2:	f7ff fd96 	bl	80004f2 <LSM6DS3_ACC_GYRO_W_YEN_XL>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d101      	bne.n	80009d0 <StartImuTask+0x78>
	  {dik();
 80009cc:	f7ff ffb4 	bl	8000938 <dik>
	  }

	  if ( LSM6DS3_ACC_GYRO_W_ZEN_XL( (void *)&hi2c1, LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED ) == MEMS_ERROR )
 80009d0:	2120      	movs	r1, #32
 80009d2:	4843      	ldr	r0, [pc, #268]	; (8000ae0 <StartImuTask+0x188>)
 80009d4:	f7ff fdba 	bl	800054c <LSM6DS3_ACC_GYRO_W_ZEN_XL>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <StartImuTask+0x8a>
	  {dik();
 80009de:	f7ff ffab 	bl	8000938 <dik>
	  }

	  /* Output data rate selection - power down */
	  if ( LSM6DS3_ACC_GYRO_W_ODR_G( (void *)&hi2c1, LSM6DS3_ACC_GYRO_ODR_G_POWER_DOWN ) == MEMS_ERROR )
 80009e2:	2100      	movs	r1, #0
 80009e4:	483e      	ldr	r0, [pc, #248]	; (8000ae0 <StartImuTask+0x188>)
 80009e6:	f7ff fcd0 	bl	800038a <LSM6DS3_ACC_GYRO_W_ODR_G>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d101      	bne.n	80009f4 <StartImuTask+0x9c>
	  {dik();
 80009f0:	f7ff ffa2 	bl	8000938 <dik>
	  }


	  if ( LSM6DS3_ACC_GYRO_W_XEN_G( (void *)&hi2c1, LSM6DS3_ACC_GYRO_XEN_G_ENABLED ) == MEMS_ERROR )
 80009f4:	2108      	movs	r1, #8
 80009f6:	483a      	ldr	r0, [pc, #232]	; (8000ae0 <StartImuTask+0x188>)
 80009f8:	f7ff fdd5 	bl	80005a6 <LSM6DS3_ACC_GYRO_W_XEN_G>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <StartImuTask+0xae>
	  {dik();
 8000a02:	f7ff ff99 	bl	8000938 <dik>
	  }

	  if ( LSM6DS3_ACC_GYRO_W_YEN_G( (void *)&hi2c1, LSM6DS3_ACC_GYRO_YEN_G_ENABLED ) == MEMS_ERROR )
 8000a06:	2110      	movs	r1, #16
 8000a08:	4835      	ldr	r0, [pc, #212]	; (8000ae0 <StartImuTask+0x188>)
 8000a0a:	f7ff fdf9 	bl	8000600 <LSM6DS3_ACC_GYRO_W_YEN_G>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d101      	bne.n	8000a18 <StartImuTask+0xc0>
	  {dik();
 8000a14:	f7ff ff90 	bl	8000938 <dik>
	  }

	  if ( LSM6DS3_ACC_GYRO_W_ZEN_G( (void *)&hi2c1, LSM6DS3_ACC_GYRO_ZEN_G_ENABLED ) == MEMS_ERROR )
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4831      	ldr	r0, [pc, #196]	; (8000ae0 <StartImuTask+0x188>)
 8000a1c:	f7ff fe1d 	bl	800065a <LSM6DS3_ACC_GYRO_W_ZEN_G>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <StartImuTask+0xd2>
	  {dik();
 8000a26:	f7ff ff87 	bl	8000938 <dik>
	  }

	  if (LSM6DS3_ACC_GYRO_W_ODR_G( (void *)&hi2c1, LSM6DS3_ACC_GYRO_ODR_G_104Hz))
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	482c      	ldr	r0, [pc, #176]	; (8000ae0 <StartImuTask+0x188>)
 8000a2e:	f7ff fcac 	bl	800038a <LSM6DS3_ACC_GYRO_W_ODR_G>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <StartImuTask+0xe4>
	  {
		  dik();
 8000a38:	f7ff ff7e 	bl	8000938 <dik>
	  }
	  uint8_t i_guess = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	75bb      	strb	r3, [r7, #22]
	  LSM6DS3_ACC_GYRO_R_ODR_XL( (void *)&hi2c1, &i_guess );
 8000a40:	f107 0316 	add.w	r3, r7, #22
 8000a44:	4619      	mov	r1, r3
 8000a46:	4826      	ldr	r0, [pc, #152]	; (8000ae0 <StartImuTask+0x188>)
 8000a48:	f7ff fc83 	bl	8000352 <LSM6DS3_ACC_GYRO_R_ODR_XL>
	  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)&hi2c1, LSM6DS3_ACC_GYRO_ODR_XL_104Hz ) == MEMS_ERROR )
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <StartImuTask+0x188>)
 8000a50:	f7ff fc52 	bl	80002f8 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <StartImuTask+0x106>
	    {
		  dik();
 8000a5a:	f7ff ff6d 	bl	8000938 <dik>
	    }
	  LSM6DS3_ACC_GYRO_R_ODR_XL( (void *)&hi2c1, &i_guess );
 8000a5e:	f107 0316 	add.w	r3, r7, #22
 8000a62:	4619      	mov	r1, r3
 8000a64:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <StartImuTask+0x188>)
 8000a66:	f7ff fc74 	bl	8000352 <LSM6DS3_ACC_GYRO_R_ODR_XL>
	  int16_t pData[3] = {0, 0, 0};
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	823b      	strh	r3, [r7, #16]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	827b      	strh	r3, [r7, #18]
 8000a72:	2300      	movs	r3, #0
 8000a74:	82bb      	strh	r3, [r7, #20]
	  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8000a76:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <StartImuTask+0x18c>)
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a80:	6018      	str	r0, [r3, #0]
 8000a82:	3304      	adds	r3, #4
 8000a84:	8019      	strh	r1, [r3, #0]
  for(;;)
  {


	  /* Read output registers from LSM6DS3_ACC_GYRO_OUTX_L_XL to LSM6DS3_ACC_GYRO_OUTZ_H_XL. */
	  if ( LSM6DS3_ACC_GYRO_GetRawAccData( (void *)&hi2c1, regValue ) == MEMS_ERROR )
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <StartImuTask+0x188>)
 8000a8e:	f7ff fc00 	bl	8000292 <LSM6DS3_ACC_GYRO_GetRawAccData>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <StartImuTask+0x144>
	  {
		  dik();
 8000a98:	f7ff ff4e 	bl	8000938 <dik>
	  }

	  /* Format the data. */
	  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 8000a9c:	7a7b      	ldrb	r3, [r7, #9]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	7a3b      	ldrb	r3, [r7, #8]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	823b      	strh	r3, [r7, #16]
	  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 8000ab0:	7afb      	ldrb	r3, [r7, #11]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	7abb      	ldrb	r3, [r7, #10]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	827b      	strh	r3, [r7, #18]
	  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8000ac4:	7b7b      	ldrb	r3, [r7, #13]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	7b3b      	ldrb	r3, [r7, #12]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	82bb      	strh	r3, [r7, #20]
	  osDelay(100);
 8000ad8:	2064      	movs	r0, #100	; 0x64
 8000ada:	f003 fba3 	bl	8004224 <osDelay>
	  if ( LSM6DS3_ACC_GYRO_GetRawAccData( (void *)&hi2c1, regValue ) == MEMS_ERROR )
 8000ade:	e7d2      	b.n	8000a86 <StartImuTask+0x12e>
 8000ae0:	20001964 	.word	0x20001964
 8000ae4:	08006b2c 	.word	0x08006b2c

08000ae8 <LSM6DS3_IO_Write>:
  }

}

uint8_t LSM6DS3_IO_Write( void *handle, uint8_t WriteAddr, uint8_t *pBuffer, uint16_t nBytesToWrite )
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af04      	add	r7, sp, #16
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	461a      	mov	r2, r3
 8000af4:	460b      	mov	r3, r1
 8000af6:	72fb      	strb	r3, [r7, #11]
 8000af8:	4613      	mov	r3, r2
 8000afa:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Write((I2C_HandleTypeDef*)handle, 0x6A<<1, WriteAddr, 1, pBuffer, nBytesToWrite, HAL_MAX_DELAY);
 8000afc:	7afb      	ldrb	r3, [r7, #11]
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	9302      	str	r3, [sp, #8]
 8000b06:	893b      	ldrh	r3, [r7, #8]
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	21d4      	movs	r1, #212	; 0xd4
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f000 fe0a 	bl	800172c <HAL_I2C_Mem_Write>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <LSM6DS3_IO_Read>:

uint8_t LSM6DS3_IO_Read( void *handle, uint8_t ReadAddr, uint8_t *pBuffer, uint16_t nBytesToRead )
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b088      	sub	sp, #32
 8000b26:	af04      	add	r7, sp, #16
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	460b      	mov	r3, r1
 8000b30:	72fb      	strb	r3, [r7, #11]
 8000b32:	4613      	mov	r3, r2
 8000b34:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read((I2C_HandleTypeDef*)handle, 0x6A<<1, ReadAddr, 1, pBuffer, nBytesToRead, HAL_MAX_DELAY);
 8000b36:	7afb      	ldrb	r3, [r7, #11]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	9302      	str	r3, [sp, #8]
 8000b40:	893b      	ldrh	r3, [r7, #8]
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	21d4      	movs	r1, #212	; 0xd4
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f000 ff01 	bl	8001954 <HAL_I2C_Mem_Read>
 8000b52:	4603      	mov	r3, r0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f000 f9ce 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f80f 	bl	8000b86 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f7ff fe44 	bl	80007f4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000b6c:	f7ff fda2 	bl	80006b4 <MX_CAN_Init>
  MX_I2C1_Init();
 8000b70:	f7ff fe70 	bl	8000854 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000b74:	f000 f926 	bl	8000dc4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b78:	f003 fa42 	bl	8004000 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b7c:	f7ff fe12 	bl	80007a4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b80:	f003 fa72 	bl	8004068 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <main+0x28>

08000b86 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b096      	sub	sp, #88	; 0x58
 8000b8a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b90:	2228      	movs	r2, #40	; 0x28
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f005 ffab 	bl	8006af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 f9f1 	bl	8001fc0 <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000be4:	f000 f836 	bl	8000c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2101      	movs	r1, #1
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 f8e3 	bl	8002dd0 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c10:	f000 f820 	bl	8000c54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c14:	2320      	movs	r3, #32
 8000c16:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 fb40 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c2a:	f000 f813 	bl	8000c54 <Error_Handler>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3758      	adds	r7, #88	; 0x58
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c46:	d101      	bne.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c48:	f000 f970 	bl	8000f2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_MspInit+0x4c>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_MspInit+0x4c>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_MspInit+0x4c>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_MspInit+0x4c>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_MspInit+0x4c>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210f      	movs	r1, #15
 8000c9a:	f06f 0001 	mvn.w	r0, #1
 8000c9e:	f000 fb19 	bl	80012d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	201c      	movs	r0, #28
 8000cc6:	f000 fb05 	bl	80012d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f000 fb1e 	bl	800130c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <HAL_InitTick+0xa4>)
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <HAL_InitTick+0xa4>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	61d3      	str	r3, [r2, #28]
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_InitTick+0xa4>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce8:	f107 0210 	add.w	r2, r7, #16
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 faa4 	bl	8003240 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cf8:	f002 fa5e 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9b      	lsrs	r3, r3, #18
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0xac>)
 8000d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_InitTick+0xac>)
 8000d1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_InitTick+0xac>)
 8000d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d24:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_InitTick+0xac>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_InitTick+0xac>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000d32:	480a      	ldr	r0, [pc, #40]	; (8000d5c <HAL_InitTick+0xac>)
 8000d34:	f002 fbdc 	bl	80034f0 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d104      	bne.n	8000d48 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <HAL_InitTick+0xac>)
 8000d40:	f002 fc38 	bl	80035b4 <HAL_TIM_Base_Start_IT>
 8000d44:	4603      	mov	r3, r0
 8000d46:	e000      	b.n	8000d4a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	200019b0 	.word	0x200019b0

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM2_IRQHandler+0x10>)
 8000d92:	f002 fc6b 	bl	800366c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200019b0 	.word	0x200019b0

08000da0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <MX_USART2_UART_Init+0x5c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dd0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000e08:	f002 fe0e 	bl	8003a28 <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e12:	f7ff ff1f 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200019fc 	.word	0x200019fc
 8000e20:	40004400 	.word	0x40004400

08000e24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <HAL_UART_MspInit+0x80>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d129      	bne.n	8000e9a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_UART_MspInit+0x84>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0x84>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_UART_MspInit+0x84>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_UART_MspInit+0x84>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <HAL_UART_MspInit+0x84>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	6153      	str	r3, [r2, #20]
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_UART_MspInit+0x84>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000e76:	f248 0304 	movw	r3, #32772	; 0x8004
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f000 fa47 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	40021000 	.word	0x40021000

08000eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb2:	490e      	ldr	r1, [pc, #56]	; (8000eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <LoopForever+0xe>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec8:	4c0b      	ldr	r4, [pc, #44]	; (8000ef8 <LoopForever+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ed6:	f7ff ff63 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f005 fdd7 	bl	8006a8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ede:	f7ff fe3d 	bl	8000b5c <main>

08000ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ef0:	08006bd4 	.word	0x08006bd4
  ldr r2, =_sbss
 8000ef4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ef8:	20001ac4 	.word	0x20001ac4

08000efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_2_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x28>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x28>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f9d4 	bl	80012be <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff feca 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fea0 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40022000 	.word	0x40022000

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20001a80 	.word	0x20001a80

08000f54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20001a80 	.word	0x20001a80

08000f6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e0ed      	b.n	800115a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fbc6 	bl	800071c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0202 	bic.w	r2, r2, #2
 8000f9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fa0:	f7ff ffd8 	bl	8000f54 <HAL_GetTick>
 8000fa4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fa6:	e012      	b.n	8000fce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fa8:	f7ff ffd4 	bl	8000f54 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b0a      	cmp	r3, #10
 8000fb4:	d90b      	bls.n	8000fce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0c5      	b.n	800115a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e5      	bne.n	8000fa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fec:	f7ff ffb2 	bl	8000f54 <HAL_GetTick>
 8000ff0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ff2:	e012      	b.n	800101a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ff4:	f7ff ffae 	bl	8000f54 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b0a      	cmp	r3, #10
 8001000:	d90b      	bls.n	800101a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2205      	movs	r2, #5
 8001012:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e09f      	b.n	800115a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0e5      	beq.n	8000ff4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7e1b      	ldrb	r3, [r3, #24]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d108      	bne.n	8001042 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e007      	b.n	8001052 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7e5b      	ldrb	r3, [r3, #25]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e007      	b.n	800107c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800107a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e9b      	ldrb	r3, [r3, #26]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d108      	bne.n	8001096 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0220 	orr.w	r2, r2, #32
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e007      	b.n	80010a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0220 	bic.w	r2, r2, #32
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7edb      	ldrb	r3, [r3, #27]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d108      	bne.n	80010c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0210 	bic.w	r2, r2, #16
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e007      	b.n	80010d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0210 	orr.w	r2, r2, #16
 80010ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7f1b      	ldrb	r3, [r3, #28]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d108      	bne.n	80010ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0208 	orr.w	r2, r2, #8
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e007      	b.n	80010fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0208 	bic.w	r2, r2, #8
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7f5b      	ldrb	r3, [r3, #29]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d108      	bne.n	8001114 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0204 	orr.w	r2, r2, #4
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e007      	b.n	8001124 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0204 	bic.w	r2, r2, #4
 8001122:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	ea42 0103 	orr.w	r1, r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff4c 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e6:	f7ff ff61 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	6978      	ldr	r0, [r7, #20]
 80012f2:	f7ff ffb1 	bl	8001258 <NVIC_EncodePriority>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff80 	bl	8001204 <__NVIC_SetPriority>
}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff54 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	e14e      	b.n	80015d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8140 	beq.w	80015d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d00b      	beq.n	8001370 <HAL_GPIO_Init+0x48>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d007      	beq.n	8001370 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001364:	2b11      	cmp	r3, #17
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b12      	cmp	r3, #18
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0xea>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b12      	cmp	r3, #18
 8001410:	d123      	bne.n	800145a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	6939      	ldr	r1, [r7, #16]
 8001456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0203 	and.w	r2, r3, #3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 809a 	beq.w	80015d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <HAL_GPIO_Init+0x2cc>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a54      	ldr	r2, [pc, #336]	; (80015f4 <HAL_GPIO_Init+0x2cc>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b52      	ldr	r3, [pc, #328]	; (80015f4 <HAL_GPIO_Init+0x2cc>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b4:	4a50      	ldr	r2, [pc, #320]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014de:	d013      	beq.n	8001508 <HAL_GPIO_Init+0x1e0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a46      	ldr	r2, [pc, #280]	; (80015fc <HAL_GPIO_Init+0x2d4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d00d      	beq.n	8001504 <HAL_GPIO_Init+0x1dc>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a45      	ldr	r2, [pc, #276]	; (8001600 <HAL_GPIO_Init+0x2d8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d007      	beq.n	8001500 <HAL_GPIO_Init+0x1d8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a44      	ldr	r2, [pc, #272]	; (8001604 <HAL_GPIO_Init+0x2dc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d101      	bne.n	80014fc <HAL_GPIO_Init+0x1d4>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e006      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 80014fc:	2305      	movs	r3, #5
 80014fe:	e004      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 8001500:	2302      	movs	r3, #2
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 8001508:	2300      	movs	r3, #0
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	f002 0203 	and.w	r2, r2, #3
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	4093      	lsls	r3, r2
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800151a:	4937      	ldr	r1, [pc, #220]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800154c:	4a2e      	ldr	r2, [pc, #184]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001576:	4a24      	ldr	r2, [pc, #144]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f47f aea9 	bne.w	8001338 <HAL_GPIO_Init+0x10>
  }
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010000 	.word	0x40010000
 80015fc:	48000400 	.word	0x48000400
 8001600:	48000800 	.word	0x48000800
 8001604:	48000c00 	.word	0x48000c00
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e081      	b.n	8001722 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff f93c 	bl	80008b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2224      	movs	r2, #36	; 0x24
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800165c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800166c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e006      	b.n	8001694 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001692:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d104      	bne.n	80016a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ea42 0103 	orr.w	r1, r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	021a      	lsls	r2, r3, #8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69d9      	ldr	r1, [r3, #28]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2220      	movs	r2, #32
 800170e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	4608      	mov	r0, r1
 8001736:	4611      	mov	r1, r2
 8001738:	461a      	mov	r2, r3
 800173a:	4603      	mov	r3, r0
 800173c:	817b      	strh	r3, [r7, #10]
 800173e:	460b      	mov	r3, r1
 8001740:	813b      	strh	r3, [r7, #8]
 8001742:	4613      	mov	r3, r2
 8001744:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b20      	cmp	r3, #32
 8001750:	f040 80f9 	bne.w	8001946 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_I2C_Mem_Write+0x34>
 800175a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001766:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0ed      	b.n	8001948 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_I2C_Mem_Write+0x4e>
 8001776:	2302      	movs	r3, #2
 8001778:	e0e6      	b.n	8001948 <HAL_I2C_Mem_Write+0x21c>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001782:	f7ff fbe7 	bl	8000f54 <HAL_GetTick>
 8001786:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2319      	movs	r3, #25
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fac3 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0d1      	b.n	8001948 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2221      	movs	r2, #33	; 0x21
 80017a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a3a      	ldr	r2, [r7, #32]
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017cc:	88f8      	ldrh	r0, [r7, #6]
 80017ce:	893a      	ldrh	r2, [r7, #8]
 80017d0:	8979      	ldrh	r1, [r7, #10]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	4603      	mov	r3, r0
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f9d3 	bl	8001b88 <I2C_RequestMemoryWrite>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0a9      	b.n	8001948 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2bff      	cmp	r3, #255	; 0xff
 80017fc:	d90e      	bls.n	800181c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	22ff      	movs	r2, #255	; 0xff
 8001802:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	b2da      	uxtb	r2, r3
 800180a:	8979      	ldrh	r1, [r7, #10]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 fba5 	bl	8001f64 <I2C_TransferConfig>
 800181a:	e00f      	b.n	800183c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182a:	b2da      	uxtb	r2, r3
 800182c:	8979      	ldrh	r1, [r7, #10]
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fb94 	bl	8001f64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 faad 	bl	8001da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e07b      	b.n	8001948 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186a:	b29b      	uxth	r3, r3
 800186c:	3b01      	subs	r3, #1
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d034      	beq.n	80018f4 <HAL_I2C_Mem_Write+0x1c8>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	2b00      	cmp	r3, #0
 8001890:	d130      	bne.n	80018f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001898:	2200      	movs	r2, #0
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 fa3f 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e04d      	b.n	8001948 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d90e      	bls.n	80018d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	22ff      	movs	r2, #255	; 0xff
 80018ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	8979      	ldrh	r1, [r7, #10]
 80018c4:	2300      	movs	r3, #0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fb49 	bl	8001f64 <I2C_TransferConfig>
 80018d2:	e00f      	b.n	80018f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	8979      	ldrh	r1, [r7, #10]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fb38 	bl	8001f64 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d19e      	bne.n	800183c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fa8c 	bl	8001e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e01a      	b.n	8001948 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2220      	movs	r2, #32
 8001918:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_I2C_Mem_Write+0x224>)
 8001926:	400b      	ands	r3, r1
 8001928:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2220      	movs	r2, #32
 800192e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001946:	2302      	movs	r3, #2
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	fe00e800 	.word	0xfe00e800

08001954 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af02      	add	r7, sp, #8
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4603      	mov	r3, r0
 8001964:	817b      	strh	r3, [r7, #10]
 8001966:	460b      	mov	r3, r1
 8001968:	813b      	strh	r3, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b20      	cmp	r3, #32
 8001978:	f040 80fd 	bne.w	8001b76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_I2C_Mem_Read+0x34>
 8001982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0f1      	b.n	8001b78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_I2C_Mem_Read+0x4e>
 800199e:	2302      	movs	r3, #2
 80019a0:	e0ea      	b.n	8001b78 <HAL_I2C_Mem_Read+0x224>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019aa:	f7ff fad3 	bl	8000f54 <HAL_GetTick>
 80019ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2319      	movs	r3, #25
 80019b6:	2201      	movs	r2, #1
 80019b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f9af 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0d5      	b.n	8001b78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2222      	movs	r2, #34	; 0x22
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2240      	movs	r2, #64	; 0x40
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a3a      	ldr	r2, [r7, #32]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019f4:	88f8      	ldrh	r0, [r7, #6]
 80019f6:	893a      	ldrh	r2, [r7, #8]
 80019f8:	8979      	ldrh	r1, [r7, #10]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4603      	mov	r3, r0
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f913 	bl	8001c30 <I2C_RequestMemoryRead>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0ad      	b.n	8001b78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d90e      	bls.n	8001a44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	22ff      	movs	r2, #255	; 0xff
 8001a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	8979      	ldrh	r1, [r7, #10]
 8001a34:	4b52      	ldr	r3, [pc, #328]	; (8001b80 <HAL_I2C_Mem_Read+0x22c>)
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fa91 	bl	8001f64 <I2C_TransferConfig>
 8001a42:	e00f      	b.n	8001a64 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	8979      	ldrh	r1, [r7, #10]
 8001a56:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <HAL_I2C_Mem_Read+0x22c>)
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fa80 	bl	8001f64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f956 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07c      	b.n	8001b78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d034      	beq.n	8001b24 <HAL_I2C_Mem_Read+0x1d0>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d130      	bne.n	8001b24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f927 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e04d      	b.n	8001b78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2bff      	cmp	r3, #255	; 0xff
 8001ae4:	d90e      	bls.n	8001b04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	22ff      	movs	r2, #255	; 0xff
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	8979      	ldrh	r1, [r7, #10]
 8001af4:	2300      	movs	r3, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fa31 	bl	8001f64 <I2C_TransferConfig>
 8001b02:	e00f      	b.n	8001b24 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	8979      	ldrh	r1, [r7, #10]
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fa20 	bl	8001f64 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d19a      	bne.n	8001a64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f974 	bl	8001e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e01a      	b.n	8001b78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2220      	movs	r2, #32
 8001b48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_I2C_Mem_Read+0x230>)
 8001b56:	400b      	ands	r3, r1
 8001b58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e000      	b.n	8001b78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001b76:	2302      	movs	r3, #2
  }
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	80002400 	.word	0x80002400
 8001b84:	fe00e800 	.word	0xfe00e800

08001b88 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	817b      	strh	r3, [r7, #10]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	813b      	strh	r3, [r7, #8]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	8979      	ldrh	r1, [r7, #10]
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <I2C_RequestMemoryWrite+0xa4>)
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f9d7 	bl	8001f64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	69b9      	ldr	r1, [r7, #24]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f8f0 	bl	8001da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e02c      	b.n	8001c24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd0:	893b      	ldrh	r3, [r7, #8]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
 8001bda:	e015      	b.n	8001c08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bdc:	893b      	ldrh	r3, [r7, #8]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	69b9      	ldr	r1, [r7, #24]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f8d6 	bl	8001da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e012      	b.n	8001c24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bfe:	893b      	ldrh	r3, [r7, #8]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f884 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	80002000 	.word	0x80002000

08001c30 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	4608      	mov	r0, r1
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	817b      	strh	r3, [r7, #10]
 8001c42:	460b      	mov	r3, r1
 8001c44:	813b      	strh	r3, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	8979      	ldrh	r1, [r7, #10]
 8001c50:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <I2C_RequestMemoryRead+0xa4>)
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2300      	movs	r3, #0
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f984 	bl	8001f64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f89d 	bl	8001da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e02c      	b.n	8001cca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d105      	bne.n	8001c82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c76:	893b      	ldrh	r3, [r7, #8]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c80:	e015      	b.n	8001cae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c82:	893b      	ldrh	r3, [r7, #8]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f883 	bl	8001da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e012      	b.n	8001cca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca4:	893b      	ldrh	r3, [r7, #8]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2140      	movs	r1, #64	; 0x40
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f831 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	80002000 	.word	0x80002000

08001cd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d103      	bne.n	8001cf6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d007      	beq.n	8001d14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	619a      	str	r2, [r3, #24]
  }
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d30:	e022      	b.n	8001d78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d01e      	beq.n	8001d78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3a:	f7ff f90b 	bl	8000f54 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d302      	bcc.n	8001d50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d113      	bne.n	8001d78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e00f      	b.n	8001d98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4013      	ands	r3, r2
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d0cd      	beq.n	8001d32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dac:	e02c      	b.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f870 	bl	8001e98 <I2C_IsAcknowledgeFailed>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e02a      	b.n	8001e18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d01e      	beq.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dca:	f7ff f8c3 	bl	8000f54 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d302      	bcc.n	8001de0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d113      	bne.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	f043 0220 	orr.w	r2, r3, #32
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e007      	b.n	8001e18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d1cb      	bne.n	8001dae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e2c:	e028      	b.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f830 	bl	8001e98 <I2C_IsAcknowledgeFailed>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e026      	b.n	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e42:	f7ff f887 	bl	8000f54 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d302      	bcc.n	8001e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d113      	bne.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e007      	b.n	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d1cf      	bne.n	8001e2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d151      	bne.n	8001f56 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eb2:	e022      	b.n	8001efa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eba:	d01e      	beq.n	8001efa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ebc:	f7ff f84a 	bl	8000f54 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d302      	bcc.n	8001ed2 <I2C_IsAcknowledgeFailed+0x3a>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d113      	bne.n	8001efa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f043 0220 	orr.w	r2, r3, #32
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e02e      	b.n	8001f58 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d1d5      	bne.n	8001eb4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2220      	movs	r2, #32
 8001f16:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff fedd 	bl	8001cd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <I2C_IsAcknowledgeFailed+0xc8>)
 8001f2a:	400b      	ands	r3, r1
 8001f2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f043 0204 	orr.w	r2, r3, #4
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	fe00e800 	.word	0xfe00e800

08001f64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	817b      	strh	r3, [r7, #10]
 8001f72:	4613      	mov	r3, r2
 8001f74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	0d5b      	lsrs	r3, r3, #21
 8001f80:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <I2C_TransferConfig+0x58>)
 8001f86:	430b      	orrs	r3, r1
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	ea02 0103 	and.w	r1, r2, r3
 8001f8e:	897b      	ldrh	r3, [r7, #10]
 8001f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	03ff63ff 	.word	0x03ff63ff

08001fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f000 bef4 	b.w	8002dc2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 816a 	beq.w	80022be <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fea:	4bb3      	ldr	r3, [pc, #716]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d00c      	beq.n	8002010 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff6:	4bb0      	ldr	r3, [pc, #704]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d159      	bne.n	80020b6 <HAL_RCC_OscConfig+0xf6>
 8002002:	4bad      	ldr	r3, [pc, #692]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d152      	bne.n	80020b6 <HAL_RCC_OscConfig+0xf6>
 8002010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002014:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002024:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d102      	bne.n	8002042 <HAL_RCC_OscConfig+0x82>
 800203c:	4b9e      	ldr	r3, [pc, #632]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	e015      	b.n	800206e <HAL_RCC_OscConfig+0xae>
 8002042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002046:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800205a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800205e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800206a:	4b93      	ldr	r3, [pc, #588]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002072:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002076:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800207a:	fa92 f2a2 	rbit	r2, r2
 800207e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002082:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f042 0220 	orr.w	r2, r2, #32
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f002 021f 	and.w	r2, r2, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 810c 	beq.w	80022bc <HAL_RCC_OscConfig+0x2fc>
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 8106 	bne.w	80022bc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f000 be86 	b.w	8002dc2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c0:	d106      	bne.n	80020d0 <HAL_RCC_OscConfig+0x110>
 80020c2:	4b7d      	ldr	r3, [pc, #500]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7c      	ldr	r2, [pc, #496]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e030      	b.n	8002132 <HAL_RCC_OscConfig+0x172>
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x134>
 80020da:	4b77      	ldr	r3, [pc, #476]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a76      	ldr	r2, [pc, #472]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b74      	ldr	r3, [pc, #464]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a73      	ldr	r2, [pc, #460]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01e      	b.n	8002132 <HAL_RCC_OscConfig+0x172>
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fe:	d10c      	bne.n	800211a <HAL_RCC_OscConfig+0x15a>
 8002100:	4b6d      	ldr	r3, [pc, #436]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6c      	ldr	r2, [pc, #432]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a69      	ldr	r2, [pc, #420]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e00b      	b.n	8002132 <HAL_RCC_OscConfig+0x172>
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a63      	ldr	r2, [pc, #396]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 800212c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002130:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002132:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	f023 020f 	bic.w	r2, r3, #15
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	495d      	ldr	r1, [pc, #372]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d059      	beq.n	8002204 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe ff00 	bl	8000f54 <HAL_GetTick>
 8002154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215a:	f7fe fefb 	bl	8000f54 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d902      	bls.n	8002170 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	f000 be29 	b.w	8002dc2 <HAL_RCC_OscConfig+0xe02>
 8002170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002174:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002184:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <HAL_RCC_OscConfig+0x1e2>
 800219c:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x20e>
 80021a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80021b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021be:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80021d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021da:	fa92 f2a2 	rbit	r2, r2
 80021de:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80021e2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0ab      	beq.n	800215a <HAL_RCC_OscConfig+0x19a>
 8002202:	e05c      	b.n	80022be <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe fea6 	bl	8000f54 <HAL_GetTick>
 8002208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800220e:	f7fe fea1 	bl	8000f54 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d902      	bls.n	8002224 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	f000 bdcf 	b.w	8002dc2 <HAL_RCC_OscConfig+0xe02>
 8002224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002228:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002238:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d102      	bne.n	8002256 <HAL_RCC_OscConfig+0x296>
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x2c2>
 8002256:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800226a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800226e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002272:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_RCC_OscConfig+0x2f8>)
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002286:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800228a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800228e:	fa92 f2a2 	rbit	r2, r2
 8002292:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002296:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800229a:	fab2 f282 	clz	r2, r2
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	f042 0220 	orr.w	r2, r2, #32
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	f002 021f 	and.w	r2, r2, #31
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1ab      	bne.n	800220e <HAL_RCC_OscConfig+0x24e>
 80022b6:	e002      	b.n	80022be <HAL_RCC_OscConfig+0x2fe>
 80022b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 816f 	beq.w	80025ac <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022ce:	4bd0      	ldr	r3, [pc, #832]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022da:	4bcd      	ldr	r3, [pc, #820]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d16c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x400>
 80022e6:	4bca      	ldr	r3, [pc, #808]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d166      	bne.n	80023c0 <HAL_RCC_OscConfig+0x400>
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002304:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_RCC_OscConfig+0x362>
 800231c:	4bbc      	ldr	r3, [pc, #752]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e013      	b.n	800234a <HAL_RCC_OscConfig+0x38a>
 8002322:	2302      	movs	r3, #2
 8002324:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800233a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002346:	4bb2      	ldr	r3, [pc, #712]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2202      	movs	r2, #2
 800234c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002350:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002354:	fa92 f2a2 	rbit	r2, r2
 8002358:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800235c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f002 021f 	and.w	r2, r2, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <HAL_RCC_OscConfig+0x3cc>
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d002      	beq.n	800238c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	f000 bd1b 	b.w	8002dc2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4ba0      	ldr	r3, [pc, #640]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	21f8      	movs	r1, #248	; 0xf8
 800239c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80023a4:	fa91 f1a1 	rbit	r1, r1
 80023a8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80023ac:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80023b0:	fab1 f181 	clz	r1, r1
 80023b4:	b2c9      	uxtb	r1, r1
 80023b6:	408b      	lsls	r3, r1
 80023b8:	4995      	ldr	r1, [pc, #596]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e0f5      	b.n	80025ac <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8085 	beq.w	80024d6 <HAL_RCC_OscConfig+0x516>
 80023cc:	2301      	movs	r3, #1
 80023ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	461a      	mov	r2, r3
 80023f4:	2301      	movs	r3, #1
 80023f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe fdac 	bl	8000f54 <HAL_GetTick>
 80023fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002402:	f7fe fda7 	bl	8000f54 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d902      	bls.n	8002418 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	f000 bcd5 	b.w	8002dc2 <HAL_RCC_OscConfig+0xe02>
 8002418:	2302      	movs	r3, #2
 800241a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800242a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_RCC_OscConfig+0x488>
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	e013      	b.n	8002470 <HAL_RCC_OscConfig+0x4b0>
 8002448:	2302      	movs	r3, #2
 800244a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800245a:	2302      	movs	r3, #2
 800245c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002460:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800246c:	4b68      	ldr	r3, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2202      	movs	r2, #2
 8002472:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002476:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800247a:	fa92 f2a2 	rbit	r2, r2
 800247e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002482:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002486:	fab2 f282 	clz	r2, r2
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f042 0220 	orr.w	r2, r2, #32
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	f002 021f 	and.w	r2, r2, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f202 	lsl.w	r2, r1, r2
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0af      	beq.n	8002402 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b5b      	ldr	r3, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	21f8      	movs	r1, #248	; 0xf8
 80024b2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024ba:	fa91 f1a1 	rbit	r1, r1
 80024be:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80024c2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80024c6:	fab1 f181 	clz	r1, r1
 80024ca:	b2c9      	uxtb	r1, r1
 80024cc:	408b      	lsls	r3, r1
 80024ce:	4950      	ldr	r1, [pc, #320]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e06a      	b.n	80025ac <HAL_RCC_OscConfig+0x5ec>
 80024d6:	2301      	movs	r3, #1
 80024d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80024e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	2300      	movs	r3, #0
 8002500:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fd27 	bl	8000f54 <HAL_GetTick>
 8002506:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250c:	f7fe fd22 	bl	8000f54 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d902      	bls.n	8002522 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	f000 bc50 	b.w	8002dc2 <HAL_RCC_OscConfig+0xe02>
 8002522:	2302      	movs	r3, #2
 8002524:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0x592>
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e013      	b.n	800257a <HAL_RCC_OscConfig+0x5ba>
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800256a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_RCC_OscConfig+0x650>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	2202      	movs	r2, #2
 800257c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002580:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002584:	fa92 f2a2 	rbit	r2, r2
 8002588:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800258c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002590:	fab2 f282 	clz	r2, r2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f042 0220 	orr.w	r2, r2, #32
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f002 021f 	and.w	r2, r2, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1af      	bne.n	800250c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80da 	beq.w	8002770 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d069      	beq.n	800269a <HAL_RCC_OscConfig+0x6da>
 80025c6:	2301      	movs	r3, #1
 80025c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_OscConfig+0x654>)
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	461a      	mov	r2, r3
 80025ec:	2301      	movs	r3, #1
 80025ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7fe fcb0 	bl	8000f54 <HAL_GetTick>
 80025f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f8:	e00e      	b.n	8002618 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fa:	f7fe fcab 	bl	8000f54 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d906      	bls.n	8002618 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e3d9      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	10908120 	.word	0x10908120
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800262a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800262e:	2202      	movs	r2, #2
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002646:	2202      	movs	r2, #2
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002658:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4ba5      	ldr	r3, [pc, #660]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 800265c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800265e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002662:	2102      	movs	r1, #2
 8002664:	6019      	str	r1, [r3, #0]
 8002666:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f1a3 	rbit	r1, r3
 8002670:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002674:	6019      	str	r1, [r3, #0]
  return result;
 8002676:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0b0      	beq.n	80025fa <HAL_RCC_OscConfig+0x63a>
 8002698:	e06a      	b.n	8002770 <HAL_RCC_OscConfig+0x7b0>
 800269a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026b0:	601a      	str	r2, [r3, #0]
  return result;
 80026b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026b6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	4b8c      	ldr	r3, [pc, #560]	; (80028f4 <HAL_RCC_OscConfig+0x934>)
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	461a      	mov	r2, r3
 80026c8:	2300      	movs	r3, #0
 80026ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7fe fc42 	bl	8000f54 <HAL_GetTick>
 80026d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e009      	b.n	80026ea <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe fc3d 	bl	8000f54 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e36b      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
 80026ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026ee:	2202      	movs	r2, #2
 80026f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	fa93 f2a3 	rbit	r2, r3
 80026fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002706:	2202      	movs	r2, #2
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800271e:	2202      	movs	r2, #2
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002730:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002732:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002736:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800273a:	2102      	movs	r1, #2
 800273c:	6019      	str	r1, [r3, #0]
 800273e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f1a3 	rbit	r1, r3
 8002748:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800274c:	6019      	str	r1, [r3, #0]
  return result;
 800274e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1b2      	bne.n	80026d6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8158 	beq.w	8002a30 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d112      	bne.n	80027b8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	f107 0308 	add.w	r3, r7, #8
 80027b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	4b4f      	ldr	r3, [pc, #316]	; (80028f8 <HAL_RCC_OscConfig+0x938>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11a      	bne.n	80027fa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c4:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <HAL_RCC_OscConfig+0x938>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a4b      	ldr	r2, [pc, #300]	; (80028f8 <HAL_RCC_OscConfig+0x938>)
 80027ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d0:	f7fe fbc0 	bl	8000f54 <HAL_GetTick>
 80027d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	e009      	b.n	80027ee <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027da:	f7fe fbbb 	bl	8000f54 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e2e9      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <HAL_RCC_OscConfig+0x938>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ef      	beq.n	80027da <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x852>
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a39      	ldr	r2, [pc, #228]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6213      	str	r3, [r2, #32]
 8002810:	e02f      	b.n	8002872 <HAL_RCC_OscConfig+0x8b2>
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x876>
 800281c:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a33      	ldr	r2, [pc, #204]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a30      	ldr	r2, [pc, #192]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 800282e:	f023 0304 	bic.w	r3, r3, #4
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	e01d      	b.n	8002872 <HAL_RCC_OscConfig+0x8b2>
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b05      	cmp	r3, #5
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x89a>
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6213      	str	r3, [r2, #32]
 8002858:	e00b      	b.n	8002872 <HAL_RCC_OscConfig+0x8b2>
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6213      	str	r3, [r2, #32]
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d06b      	beq.n	8002954 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fe fb6a 	bl	8000f54 <HAL_GetTick>
 8002880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00b      	b.n	800289e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fb65 	bl	8000f54 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e291      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
 800289e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028a2:	2202      	movs	r2, #2
 80028a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	fa93 f2a3 	rbit	r2, r3
 80028b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028ba:	2202      	movs	r2, #2
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fa93 f2a3 	rbit	r2, r3
 80028c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028cc:	601a      	str	r2, [r3, #0]
  return result;
 80028ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d109      	bne.n	80028fc <HAL_RCC_OscConfig+0x93c>
 80028e8:	4b01      	ldr	r3, [pc, #4]	; (80028f0 <HAL_RCC_OscConfig+0x930>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	e014      	b.n	8002918 <HAL_RCC_OscConfig+0x958>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	10908120 	.word	0x10908120
 80028f8:	40007000 	.word	0x40007000
 80028fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002900:	2202      	movs	r2, #2
 8002902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	fa93 f2a3 	rbit	r2, r3
 800290e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	4bbb      	ldr	r3, [pc, #748]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800291c:	2102      	movs	r1, #2
 800291e:	6011      	str	r1, [r2, #0]
 8002920:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	fa92 f1a2 	rbit	r1, r2
 800292a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800292e:	6011      	str	r1, [r2, #0]
  return result;
 8002930:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	fab2 f282 	clz	r2, r2
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	f002 021f 	and.w	r2, r2, #31
 8002946:	2101      	movs	r1, #1
 8002948:	fa01 f202 	lsl.w	r2, r1, r2
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d099      	beq.n	8002886 <HAL_RCC_OscConfig+0x8c6>
 8002952:	e063      	b.n	8002a1c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002954:	f7fe fafe 	bl	8000f54 <HAL_GetTick>
 8002958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295c:	e00b      	b.n	8002976 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe faf9 	bl	8000f54 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e225      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
 8002976:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800297a:	2202      	movs	r2, #2
 800297c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f2a3 	rbit	r2, r3
 8002988:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002992:	2202      	movs	r2, #2
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029a4:	601a      	str	r2, [r3, #0]
  return result;
 80029a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0xa06>
 80029c0:	4b90      	ldr	r3, [pc, #576]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	e00d      	b.n	80029e2 <HAL_RCC_OscConfig+0xa22>
 80029c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029ca:	2202      	movs	r2, #2
 80029cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	4b89      	ldr	r3, [pc, #548]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80029e6:	2102      	movs	r1, #2
 80029e8:	6011      	str	r1, [r2, #0]
 80029ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	fa92 f1a2 	rbit	r1, r2
 80029f4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80029f8:	6011      	str	r1, [r2, #0]
  return result;
 80029fa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	fab2 f282 	clz	r2, r2
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f002 021f 	and.w	r2, r2, #31
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1a0      	bne.n	800295e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a1c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a24:	4b77      	ldr	r3, [pc, #476]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	4a76      	ldr	r2, [pc, #472]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 8002a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 81c2 	beq.w	8002dc0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a3c:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	f000 819c 	beq.w	8002d82 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	f040 8114 	bne.w	8002c7e <HAL_RCC_OscConfig+0xcbe>
 8002a56:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a6e:	601a      	str	r2, [r3, #0]
  return result;
 8002a70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	461a      	mov	r2, r3
 8002a88:	2300      	movs	r3, #0
 8002a8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fa62 	bl	8000f54 <HAL_GetTick>
 8002a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	e009      	b.n	8002aaa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe fa5d 	bl	8000f54 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e18b      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
 8002aaa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	fa93 f2a3 	rbit	r2, r3
 8002abe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ac2:	601a      	str	r2, [r3, #0]
  return result;
 8002ac4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ac8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d102      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xb24>
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	e01b      	b.n	8002b1c <HAL_RCC_OscConfig+0xb5c>
 8002ae4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b24:	6011      	str	r1, [r2, #0]
 8002b26:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fa92 f1a2 	rbit	r1, r2
 8002b30:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002b34:	6011      	str	r1, [r2, #0]
  return result;
 8002b36:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f042 0220 	orr.w	r2, r2, #32
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f002 021f 	and.w	r2, r2, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d19e      	bne.n	8002a96 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	4925      	ldr	r1, [pc, #148]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
 8002b74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b8c:	601a      	str	r2, [r3, #0]
  return result;
 8002b8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b92:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe f9d3 	bl	8000f54 <HAL_GetTick>
 8002bae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb2:	e009      	b.n	8002bc8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe f9ce 	bl	8000f54 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0fc      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
 8002bc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f2a3 	rbit	r2, r3
 8002bdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002be0:	601a      	str	r2, [r3, #0]
  return result;
 8002be2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002be6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0xc48>
 8002bfc:	4b01      	ldr	r3, [pc, #4]	; (8002c04 <HAL_RCC_OscConfig+0xc44>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	e01e      	b.n	8002c40 <HAL_RCC_OscConfig+0xc80>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	fa93 f2a3 	rbit	r2, r3
 8002c1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_RCC_OscConfig+0xe0c>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c48:	6011      	str	r1, [r2, #0]
 8002c4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	fa92 f1a2 	rbit	r1, r2
 8002c54:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002c58:	6011      	str	r1, [r2, #0]
  return result;
 8002c5a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	fab2 f282 	clz	r2, r2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d09b      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xbf4>
 8002c7c:	e0a0      	b.n	8002dc0 <HAL_RCC_OscConfig+0xe00>
 8002c7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c96:	601a      	str	r2, [r3, #0]
  return result;
 8002c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe f94e 	bl	8000f54 <HAL_GetTick>
 8002cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbc:	e009      	b.n	8002cd2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe f949 	bl	8000f54 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e077      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
 8002cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f2a3 	rbit	r2, r3
 8002ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cea:	601a      	str	r2, [r3, #0]
  return result;
 8002cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_RCC_OscConfig+0xd4c>
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <HAL_RCC_OscConfig+0xe0c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e01b      	b.n	8002d44 <HAL_RCC_OscConfig+0xd84>
 8002d0c:	f107 0320 	add.w	r3, r7, #32
 8002d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f107 0320 	add.w	r3, r7, #32
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f107 0318 	add.w	r3, r7, #24
 8002d2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f107 0318 	add.w	r3, r7, #24
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	fa93 f2a3 	rbit	r2, r3
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <HAL_RCC_OscConfig+0xe0c>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f107 0210 	add.w	r2, r7, #16
 8002d48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d4c:	6011      	str	r1, [r2, #0]
 8002d4e:	f107 0210 	add.w	r2, r7, #16
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fa92 f1a2 	rbit	r1, r2
 8002d58:	f107 020c 	add.w	r2, r7, #12
 8002d5c:	6011      	str	r1, [r2, #0]
  return result;
 8002d5e:	f107 020c 	add.w	r2, r7, #12
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	fab2 f282 	clz	r2, r2
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	f042 0220 	orr.w	r2, r2, #32
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	f002 021f 	and.w	r2, r2, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d19e      	bne.n	8002cbe <HAL_RCC_OscConfig+0xcfe>
 8002d80:	e01e      	b.n	8002dc0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e018      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_RCC_OscConfig+0xe0c>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d98:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d108      	bne.n	8002dbc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002daa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b09e      	sub	sp, #120	; 0x78
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e162      	b.n	80030ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b90      	ldr	r3, [pc, #576]	; (800302c <HAL_RCC_ClockConfig+0x25c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d910      	bls.n	8002e18 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b8d      	ldr	r3, [pc, #564]	; (800302c <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	498b      	ldr	r1, [pc, #556]	; (800302c <HAL_RCC_ClockConfig+0x25c>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b89      	ldr	r3, [pc, #548]	; (800302c <HAL_RCC_ClockConfig+0x25c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e14a      	b.n	80030ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b82      	ldr	r3, [pc, #520]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	497f      	ldr	r1, [pc, #508]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80dc 	beq.w	8002ffc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d13c      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xf6>
 8002e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e50:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d102      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xa6>
 8002e70:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	e00f      	b.n	8002e96 <HAL_RCC_ClockConfig+0xc6>
 8002e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	667b      	str	r3, [r7, #100]	; 0x64
 8002e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e88:	663b      	str	r3, [r7, #96]	; 0x60
 8002e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e92:	4b67      	ldr	r3, [pc, #412]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f042 0220 	orr.w	r2, r2, #32
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f002 021f 	and.w	r2, r2, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d17b      	bne.n	8002fba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0f3      	b.n	80030ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d13c      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x178>
 8002ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x128>
 8002ef2:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	e00f      	b.n	8002f18 <HAL_RCC_ClockConfig+0x148>
 8002ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
 8002f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f1c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f20:	fa92 f2a2 	rbit	r2, r2
 8002f24:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f28:	fab2 f282 	clz	r2, r2
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f042 0220 	orr.w	r2, r2, #32
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	f002 021f 	and.w	r2, r2, #31
 8002f38:	2101      	movs	r1, #1
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d13a      	bne.n	8002fba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0b2      	b.n	80030ae <HAL_RCC_ClockConfig+0x2de>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x1a0>
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e00d      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1bc>
 8002f70:	2302      	movs	r3, #2
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	4b29      	ldr	r3, [pc, #164]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	61ba      	str	r2, [r7, #24]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	617a      	str	r2, [r7, #20]
  return result;
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f042 0220 	orr.w	r2, r2, #32
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f002 021f 	and.w	r2, r2, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e079      	b.n	80030ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fba:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	491a      	ldr	r1, [pc, #104]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fcc:	f7fd ffc2 	bl	8000f54 <HAL_GetTick>
 8002fd0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f7fd ffbe 	bl	8000f54 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e061      	b.n	80030ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_RCC_ClockConfig+0x260>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 020c 	and.w	r2, r3, #12
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d1eb      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_ClockConfig+0x25c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d214      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_RCC_ClockConfig+0x25c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	4906      	ldr	r1, [pc, #24]	; (800302c <HAL_RCC_ClockConfig+0x25c>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <HAL_RCC_ClockConfig+0x25c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e040      	b.n	80030ae <HAL_RCC_ClockConfig+0x2de>
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	491a      	ldr	r1, [pc, #104]	; (80030b8 <HAL_RCC_ClockConfig+0x2e8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4912      	ldr	r1, [pc, #72]	; (80030b8 <HAL_RCC_ClockConfig+0x2e8>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003072:	f000 f829 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003076:	4601      	mov	r1, r0
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_RCC_ClockConfig+0x2e8>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003080:	22f0      	movs	r2, #240	; 0xf0
 8003082:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	fa92 f2a2 	rbit	r2, r2
 800308a:	60fa      	str	r2, [r7, #12]
  return result;
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	40d3      	lsrs	r3, r2
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x2ec>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	fa21 f303 	lsr.w	r3, r1, r3
 800309e:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <HAL_RCC_ClockConfig+0x2f0>)
 80030a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_RCC_ClockConfig+0x2f4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fe02 	bl	8000cb0 <HAL_InitTick>
  
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3778      	adds	r7, #120	; 0x78
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08006b94 	.word	0x08006b94
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b08b      	sub	sp, #44	; 0x2c
 80030cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030e2:	4b29      	ldr	r3, [pc, #164]	; (8003188 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x30>
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x36>
 80030f6:	e03c      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030f8:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030fa:	623b      	str	r3, [r7, #32]
      break;
 80030fc:	e03c      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003104:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003108:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	fa92 f2a2 	rbit	r2, r2
 8003110:	607a      	str	r2, [r7, #4]
  return result;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	40d3      	lsrs	r3, r2
 800311c:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_RCC_GetSysClockFreq+0xc8>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003122:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	220f      	movs	r2, #15
 800312c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	fa92 f2a2 	rbit	r2, r2
 8003134:	60fa      	str	r2, [r7, #12]
  return result;
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	fab2 f282 	clz	r2, r2
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	40d3      	lsrs	r3, r2
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003150:	4a0e      	ldr	r2, [pc, #56]	; (800318c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	fbb2 f2f3 	udiv	r2, r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
 8003160:	e004      	b.n	800316c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	4a0c      	ldr	r2, [pc, #48]	; (8003198 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	623b      	str	r3, [r7, #32]
      break;
 8003170:	e002      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003174:	623b      	str	r3, [r7, #32]
      break;
 8003176:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003178:	6a3b      	ldr	r3, [r7, #32]
}
 800317a:	4618      	mov	r0, r3
 800317c:	372c      	adds	r7, #44	; 0x2c
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	01e84800 	.word	0x01e84800
 8003190:	08006bac 	.word	0x08006bac
 8003194:	08006bbc 	.word	0x08006bbc
 8003198:	003d0900 	.word	0x003d0900
 800319c:	007a1200 	.word	0x007a1200

080031a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000000 	.word	0x20000000

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031be:	f7ff ffef 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031c2:	4601      	mov	r1, r0
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	fa92 f2a2 	rbit	r2, r2
 80031d8:	603a      	str	r2, [r7, #0]
  return result;
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	fab2 f282 	clz	r2, r2
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	40d3      	lsrs	r3, r2
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	08006ba4 	.word	0x08006ba4

080031fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003202:	f7ff ffcd 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 8003206:	4601      	mov	r1, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003210:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	fa92 f2a2 	rbit	r2, r2
 800321c:	603a      	str	r2, [r7, #0]
  return result;
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	40d3      	lsrs	r3, r2
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_RCC_GetPCLK2Freq+0x40>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	08006ba4 	.word	0x08006ba4

08003240 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	220f      	movs	r2, #15
 800324e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_RCC_GetClockConfig+0x5c>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0203 	and.w	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_RCC_GetClockConfig+0x5c>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_RCC_GetClockConfig+0x5c>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_GetClockConfig+0x5c>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	08db      	lsrs	r3, r3, #3
 800327a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <HAL_RCC_GetClockConfig+0x60>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0207 	and.w	r2, r3, #7
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	601a      	str	r2, [r3, #0]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	40022000 	.word	0x40022000

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b092      	sub	sp, #72	; 0x48
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80cd 	beq.w	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c8:	4b86      	ldr	r3, [pc, #536]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10e      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	4b83      	ldr	r3, [pc, #524]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4a82      	ldr	r2, [pc, #520]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032de:	61d3      	str	r3, [r2, #28]
 80032e0:	4b80      	ldr	r3, [pc, #512]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b7d      	ldr	r3, [pc, #500]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a79      	ldr	r2, [pc, #484]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fd fe23 	bl	8000f54 <HAL_GetTick>
 800330e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fd fe1f 	bl	8000f54 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	; 0x64
 800331e:	d901      	bls.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0db      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b70      	ldr	r3, [pc, #448]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003330:	4b6c      	ldr	r3, [pc, #432]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003338:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d07d      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800334a:	429a      	cmp	r2, r3
 800334c:	d076      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	4b5e      	ldr	r3, [pc, #376]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	2301      	movs	r3, #1
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	4b55      	ldr	r3, [pc, #340]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	461a      	mov	r2, r3
 800339c:	2300      	movs	r3, #0
 800339e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d045      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fd fdd0 	bl	8000f54 <HAL_GetTick>
 80033b4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fd fdcc 	bl	8000f54 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e086      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80033ce:	2302      	movs	r3, #2
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	2302      	movs	r3, #2
 80033dc:	623b      	str	r3, [r7, #32]
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	61fb      	str	r3, [r7, #28]
  return result;
 80033e6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f043 0302 	orr.w	r3, r3, #2
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d102      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033fc:	4b39      	ldr	r3, [pc, #228]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	e007      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003402:	2302      	movs	r3, #2
 8003404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2202      	movs	r2, #2
 8003414:	613a      	str	r2, [r7, #16]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	fa92 f2a2 	rbit	r2, r2
 800341c:	60fa      	str	r2, [r7, #12]
  return result;
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f002 021f 	and.w	r2, r2, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0bd      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800343c:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4926      	ldr	r1, [pc, #152]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800344a:	4313      	orrs	r3, r2
 800344c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800344e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	491a      	ldr	r1, [pc, #104]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800347c:	4313      	orrs	r3, r2
 800347e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800348c:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	f023 0210 	bic.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4912      	ldr	r1, [pc, #72]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800349a:	4313      	orrs	r3, r2
 800349c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034aa:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	490b      	ldr	r1, [pc, #44]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	4903      	ldr	r1, [pc, #12]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3748      	adds	r7, #72	; 0x48
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
 80034ec:	10908100 	.word	0x10908100

080034f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e049      	b.n	8003596 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f841 	bl	800359e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f000 f9e4 	bl	80038fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d001      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e040      	b.n	800364e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_TIM_Base_Start_IT+0xa8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00e      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x58>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f6:	d009      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x58>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a18      	ldr	r2, [pc, #96]	; (8003660 <HAL_TIM_Base_Start_IT+0xac>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x58>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_TIM_Base_Start_IT+0xb0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d115      	bne.n	8003638 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <HAL_TIM_Base_Start_IT+0xb4>)
 8003614:	4013      	ands	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d015      	beq.n	800364a <HAL_TIM_Base_Start_IT+0x96>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d011      	beq.n	800364a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003636:	e008      	b.n	800364a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e000      	b.n	800364c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40012c00 	.word	0x40012c00
 8003660:	40000400 	.word	0x40000400
 8003664:	40014000 	.word	0x40014000
 8003668:	00010007 	.word	0x00010007

0800366c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0202 	mvn.w	r2, #2
 8003698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f905 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8f7 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f908 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0204 	mvn.w	r2, #4
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8db 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8cd 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f8de 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b08      	cmp	r3, #8
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b08      	cmp	r3, #8
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0208 	mvn.w	r2, #8
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2204      	movs	r2, #4
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8b1 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8a3 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8b4 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b10      	cmp	r3, #16
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b10      	cmp	r3, #16
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0210 	mvn.w	r2, #16
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2208      	movs	r2, #8
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f887 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f879 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f88a 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d10e      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0201 	mvn.w	r2, #1
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fa23 	bl	8000c36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b80      	cmp	r3, #128	; 0x80
 80037fc:	d10e      	bne.n	800381c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003808:	2b80      	cmp	r3, #128	; 0x80
 800380a:	d107      	bne.n	800381c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8f2 	bl	8003a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382a:	d10e      	bne.n	800384a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	2b80      	cmp	r3, #128	; 0x80
 8003838:	d107      	bne.n	800384a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f8e5 	bl	8003a14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d10e      	bne.n	8003876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d107      	bne.n	8003876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800386e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f838 	bl	80038e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b20      	cmp	r3, #32
 8003882:	d10e      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b20      	cmp	r3, #32
 8003890:	d107      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0220 	mvn.w	r2, #32
 800389a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8a5 	bl	80039ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <TIM_Base_SetConfig+0xdc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d007      	beq.n	8003924 <TIM_Base_SetConfig+0x28>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391a:	d003      	beq.n	8003924 <TIM_Base_SetConfig+0x28>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a2f      	ldr	r2, [pc, #188]	; (80039dc <TIM_Base_SetConfig+0xe0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d108      	bne.n	8003936 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <TIM_Base_SetConfig+0xdc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <TIM_Base_SetConfig+0x6a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d00f      	beq.n	8003966 <TIM_Base_SetConfig+0x6a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a24      	ldr	r2, [pc, #144]	; (80039dc <TIM_Base_SetConfig+0xe0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0x6a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <TIM_Base_SetConfig+0xe4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0x6a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <TIM_Base_SetConfig+0xe8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0x6a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <TIM_Base_SetConfig+0xec>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <TIM_Base_SetConfig+0xdc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00b      	beq.n	80039bc <TIM_Base_SetConfig+0xc0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <TIM_Base_SetConfig+0xe4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <TIM_Base_SetConfig+0xc0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <TIM_Base_SetConfig+0xe8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0xc0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <TIM_Base_SetConfig+0xec>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d103      	bne.n	80039c4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	615a      	str	r2, [r3, #20]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40014000 	.word	0x40014000
 80039e4:	40014400 	.word	0x40014400
 80039e8:	40014800 	.word	0x40014800

080039ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e040      	b.n	8003abc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd f9ea 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f82c 	bl	8003ac4 <UART_SetConfig>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e022      	b.n	8003abc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f956 	bl	8003d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f9dd 	bl	8003e74 <UART_CheckIdleState>
 8003aba:	4603      	mov	r3, r0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b8a      	ldr	r3, [pc, #552]	; (8003d18 <UART_SetConfig+0x254>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	6979      	ldr	r1, [r7, #20]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a78      	ldr	r2, [pc, #480]	; (8003d1c <UART_SetConfig+0x258>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d120      	bne.n	8003b82 <UART_SetConfig+0xbe>
 8003b40:	4b77      	ldr	r3, [pc, #476]	; (8003d20 <UART_SetConfig+0x25c>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d817      	bhi.n	8003b7c <UART_SetConfig+0xb8>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <UART_SetConfig+0x90>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b65 	.word	0x08003b65
 8003b58:	08003b71 	.word	0x08003b71
 8003b5c:	08003b77 	.word	0x08003b77
 8003b60:	08003b6b 	.word	0x08003b6b
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e01d      	b.n	8003ba6 <UART_SetConfig+0xe2>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e01a      	b.n	8003ba6 <UART_SetConfig+0xe2>
 8003b70:	2304      	movs	r3, #4
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e017      	b.n	8003ba6 <UART_SetConfig+0xe2>
 8003b76:	2308      	movs	r3, #8
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e014      	b.n	8003ba6 <UART_SetConfig+0xe2>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e011      	b.n	8003ba6 <UART_SetConfig+0xe2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a67      	ldr	r2, [pc, #412]	; (8003d24 <UART_SetConfig+0x260>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d102      	bne.n	8003b92 <UART_SetConfig+0xce>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e009      	b.n	8003ba6 <UART_SetConfig+0xe2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a64      	ldr	r2, [pc, #400]	; (8003d28 <UART_SetConfig+0x264>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d102      	bne.n	8003ba2 <UART_SetConfig+0xde>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e001      	b.n	8003ba6 <UART_SetConfig+0xe2>
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bae:	d15b      	bne.n	8003c68 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003bb0:	7ffb      	ldrb	r3, [r7, #31]
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d827      	bhi.n	8003c06 <UART_SetConfig+0x142>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <UART_SetConfig+0xf8>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003be1 	.word	0x08003be1
 8003bc0:	08003be9 	.word	0x08003be9
 8003bc4:	08003bf1 	.word	0x08003bf1
 8003bc8:	08003c07 	.word	0x08003c07
 8003bcc:	08003bf7 	.word	0x08003bf7
 8003bd0:	08003c07 	.word	0x08003c07
 8003bd4:	08003c07 	.word	0x08003c07
 8003bd8:	08003c07 	.word	0x08003c07
 8003bdc:	08003bff 	.word	0x08003bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be0:	f7ff faea 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8003be4:	61b8      	str	r0, [r7, #24]
        break;
 8003be6:	e013      	b.n	8003c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be8:	f7ff fb08 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 8003bec:	61b8      	str	r0, [r7, #24]
        break;
 8003bee:	e00f      	b.n	8003c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf0:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <UART_SetConfig+0x268>)
 8003bf2:	61bb      	str	r3, [r7, #24]
        break;
 8003bf4:	e00c      	b.n	8003c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf6:	f7ff fa67 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003bfa:	61b8      	str	r0, [r7, #24]
        break;
 8003bfc:	e008      	b.n	8003c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c02:	61bb      	str	r3, [r7, #24]
        break;
 8003c04:	e004      	b.n	8003c10 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d074      	beq.n	8003d00 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	005a      	lsls	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	441a      	add	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b0f      	cmp	r3, #15
 8003c32:	d916      	bls.n	8003c62 <UART_SetConfig+0x19e>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3a:	d212      	bcs.n	8003c62 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f023 030f 	bic.w	r3, r3, #15
 8003c44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	89fb      	ldrh	r3, [r7, #14]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	89fa      	ldrh	r2, [r7, #14]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	e04e      	b.n	8003d00 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	77bb      	strb	r3, [r7, #30]
 8003c66:	e04b      	b.n	8003d00 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c68:	7ffb      	ldrb	r3, [r7, #31]
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d827      	bhi.n	8003cbe <UART_SetConfig+0x1fa>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <UART_SetConfig+0x1b0>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003c99 	.word	0x08003c99
 8003c78:	08003ca1 	.word	0x08003ca1
 8003c7c:	08003ca9 	.word	0x08003ca9
 8003c80:	08003cbf 	.word	0x08003cbf
 8003c84:	08003caf 	.word	0x08003caf
 8003c88:	08003cbf 	.word	0x08003cbf
 8003c8c:	08003cbf 	.word	0x08003cbf
 8003c90:	08003cbf 	.word	0x08003cbf
 8003c94:	08003cb7 	.word	0x08003cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c98:	f7ff fa8e 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8003c9c:	61b8      	str	r0, [r7, #24]
        break;
 8003c9e:	e013      	b.n	8003cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca0:	f7ff faac 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 8003ca4:	61b8      	str	r0, [r7, #24]
        break;
 8003ca6:	e00f      	b.n	8003cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <UART_SetConfig+0x268>)
 8003caa:	61bb      	str	r3, [r7, #24]
        break;
 8003cac:	e00c      	b.n	8003cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cae:	f7ff fa0b 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003cb2:	61b8      	str	r0, [r7, #24]
        break;
 8003cb4:	e008      	b.n	8003cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cba:	61bb      	str	r3, [r7, #24]
        break;
 8003cbc:	e004      	b.n	8003cc8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8003cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	085a      	lsrs	r2, r3, #1
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	441a      	add	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	d908      	bls.n	8003cfc <UART_SetConfig+0x238>
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf0:	d204      	bcs.n	8003cfc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	e001      	b.n	8003d00 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	efff69f3 	.word	0xefff69f3
 8003d1c:	40013800 	.word	0x40013800
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40004400 	.word	0x40004400
 8003d28:	40004800 	.word	0x40004800
 8003d2c:	007a1200 	.word	0x007a1200

08003d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2e:	d10a      	bne.n	8003e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e84:	f7fd f866 	bl	8000f54 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d10e      	bne.n	8003eb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f82d 	bl	8003f06 <UART_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e023      	b.n	8003efe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d10e      	bne.n	8003ee2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f817 	bl	8003f06 <UART_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00d      	b.n	8003efe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	4613      	mov	r3, r2
 8003f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f16:	e05e      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1e:	d05a      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f20:	f7fd f818 	bl	8000f54 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d11b      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e043      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d02c      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8a:	d124      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fa4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e00f      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d091      	beq.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004006:	f3ef 8305 	mrs	r3, IPSR
 800400a:	60bb      	str	r3, [r7, #8]
  return(result);
 800400c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004012:	f3ef 8310 	mrs	r3, PRIMASK
 8004016:	607b      	str	r3, [r7, #4]
  return(result);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <osKernelInitialize+0x32>
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <osKernelInitialize+0x64>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d109      	bne.n	800403a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004026:	f3ef 8311 	mrs	r3, BASEPRI
 800402a:	603b      	str	r3, [r7, #0]
  return(result);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004032:	f06f 0305 	mvn.w	r3, #5
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e00c      	b.n	8004054 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <osKernelInitialize+0x64>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d105      	bne.n	800404e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <osKernelInitialize+0x64>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e002      	b.n	8004054 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
 8004052:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000002c 	.word	0x2000002c

08004068 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800406e:	f3ef 8305 	mrs	r3, IPSR
 8004072:	60bb      	str	r3, [r7, #8]
  return(result);
 8004074:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407a:	f3ef 8310 	mrs	r3, PRIMASK
 800407e:	607b      	str	r3, [r7, #4]
  return(result);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <osKernelStart+0x32>
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <osKernelStart+0x64>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d109      	bne.n	80040a2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800408e:	f3ef 8311 	mrs	r3, BASEPRI
 8004092:	603b      	str	r3, [r7, #0]
  return(result);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800409a:	f06f 0305 	mvn.w	r3, #5
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e00e      	b.n	80040c0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <osKernelStart+0x64>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <osKernelStart+0x64>)
 80040ac:	2202      	movs	r2, #2
 80040ae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80040b0:	f001 f880 	bl	80051b4 <vTaskStartScheduler>
      stat = osOK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e002      	b.n	80040c0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040c0:	68fb      	ldr	r3, [r7, #12]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	2000002c 	.word	0x2000002c

080040d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b092      	sub	sp, #72	; 0x48
 80040d4:	af04      	add	r7, sp, #16
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e0:	f3ef 8305 	mrs	r3, IPSR
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 8094 	bne.w	8004216 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ee:	f3ef 8310 	mrs	r3, PRIMASK
 80040f2:	623b      	str	r3, [r7, #32]
  return(result);
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f040 808d 	bne.w	8004216 <osThreadNew+0x146>
 80040fc:	4b48      	ldr	r3, [pc, #288]	; (8004220 <osThreadNew+0x150>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d106      	bne.n	8004112 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004104:	f3ef 8311 	mrs	r3, BASEPRI
 8004108:	61fb      	str	r3, [r7, #28]
  return(result);
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f040 8082 	bne.w	8004216 <osThreadNew+0x146>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d07e      	beq.n	8004216 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800411c:	2318      	movs	r3, #24
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004120:	2300      	movs	r3, #0
 8004122:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004124:	f107 031b 	add.w	r3, r7, #27
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d045      	beq.n	80041c2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <osThreadNew+0x74>
        name = attr->name;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <osThreadNew+0x9a>
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	2b38      	cmp	r3, #56	; 0x38
 800415c:	d805      	bhi.n	800416a <osThreadNew+0x9a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <osThreadNew+0x9e>
        return (NULL);
 800416a:	2300      	movs	r3, #0
 800416c:	e054      	b.n	8004218 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00e      	beq.n	80041a4 <osThreadNew+0xd4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b5b      	cmp	r3, #91	; 0x5b
 800418c:	d90a      	bls.n	80041a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <osThreadNew+0xd4>
        mem = 1;
 800419e:	2301      	movs	r3, #1
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a2:	e010      	b.n	80041c6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10c      	bne.n	80041c6 <osThreadNew+0xf6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <osThreadNew+0xf6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <osThreadNew+0xf6>
          mem = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c0:	e001      	b.n	80041c6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d110      	bne.n	80041ee <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041d4:	9202      	str	r2, [sp, #8]
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fe1a 	bl	8004e1c <xTaskCreateStatic>
 80041e8:	4603      	mov	r3, r0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e013      	b.n	8004216 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d110      	bne.n	8004216 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fe64 	bl	8004ed4 <xTaskCreate>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <osThreadNew+0x146>
          hTask = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004216:	697b      	ldr	r3, [r7, #20]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3738      	adds	r7, #56	; 0x38
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	2000002c 	.word	0x2000002c

08004224 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800422c:	f3ef 8305 	mrs	r3, IPSR
 8004230:	613b      	str	r3, [r7, #16]
  return(result);
 8004232:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10f      	bne.n	8004258 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004238:	f3ef 8310 	mrs	r3, PRIMASK
 800423c:	60fb      	str	r3, [r7, #12]
  return(result);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <osDelay+0x34>
 8004244:	4b0d      	ldr	r3, [pc, #52]	; (800427c <osDelay+0x58>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d109      	bne.n	8004260 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800424c:	f3ef 8311 	mrs	r3, BASEPRI
 8004250:	60bb      	str	r3, [r7, #8]
  return(result);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <osDelay+0x3c>
    stat = osErrorISR;
 8004258:	f06f 0305 	mvn.w	r3, #5
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e007      	b.n	8004270 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <osDelay+0x4c>
      vTaskDelay(ticks);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 ff6e 	bl	800514c <vTaskDelay>
    }
  }

  return (stat);
 8004270:	697b      	ldr	r3, [r7, #20]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	2000002c 	.word	0x2000002c

08004280 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4a07      	ldr	r2, [pc, #28]	; (80042ac <vApplicationGetIdleTaskMemory+0x2c>)
 8004290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4a06      	ldr	r2, [pc, #24]	; (80042b0 <vApplicationGetIdleTaskMemory+0x30>)
 8004296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000030 	.word	0x20000030
 80042b0:	2000008c 	.word	0x2000008c

080042b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80042c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4a06      	ldr	r2, [pc, #24]	; (80042e4 <vApplicationGetTimerTaskMemory+0x30>)
 80042ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d2:	601a      	str	r2, [r3, #0]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	2000028c 	.word	0x2000028c
 80042e4:	200002e8 	.word	0x200002e8

080042e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f103 0208 	add.w	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004300:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f103 0208 	add.w	r2, r3, #8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f103 0208 	add.w	r2, r3, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d103      	bne.n	80043aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e00c      	b.n	80043c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3308      	adds	r3, #8
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e002      	b.n	80043b8 <vListInsert+0x2e>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d2f6      	bcs.n	80043b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6892      	ldr	r2, [r2, #8]
 8004412:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6852      	ldr	r2, [r2, #4]
 800441c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	429a      	cmp	r2, r3
 8004426:	d103      	bne.n	8004430 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800447a:	f002 f80b 	bl	8006494 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	441a      	add	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	3b01      	subs	r3, #1
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	441a      	add	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	22ff      	movs	r2, #255	; 0xff
 80044be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	22ff      	movs	r2, #255	; 0xff
 80044c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d114      	bne.n	80044fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01a      	beq.n	800450e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3310      	adds	r3, #16
 80044dc:	4618      	mov	r0, r3
 80044de:	f001 f8f7 	bl	80056d0 <xTaskRemoveFromEventList>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d012      	beq.n	800450e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <xQueueGenericReset+0xcc>)
 80044ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	e009      	b.n	800450e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3310      	adds	r3, #16
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fef2 	bl	80042e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3324      	adds	r3, #36	; 0x24
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff feed 	bl	80042e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800450e:	f001 fff1 	bl	80064f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004512:	2301      	movs	r3, #1
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08e      	sub	sp, #56	; 0x38
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <xQueueGenericCreateStatic+0x52>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <xQueueGenericCreateStatic+0x56>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <xQueueGenericCreateStatic+0x58>
 8004576:	2300      	movs	r3, #0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	623b      	str	r3, [r7, #32]
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <xQueueGenericCreateStatic+0x7e>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <xQueueGenericCreateStatic+0x82>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <xQueueGenericCreateStatic+0x84>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	61fb      	str	r3, [r7, #28]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045be:	2350      	movs	r3, #80	; 0x50
 80045c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b50      	cmp	r3, #80	; 0x50
 80045c6:	d00a      	beq.n	80045de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	61bb      	str	r3, [r7, #24]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f805 	bl	800460e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004606:	4618      	mov	r0, r3
 8004608:	3730      	adds	r7, #48	; 0x30
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e002      	b.n	8004630 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800463c:	2101      	movs	r1, #1
 800463e:	69b8      	ldr	r0, [r7, #24]
 8004640:	f7ff ff06 	bl	8004450 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08e      	sub	sp, #56	; 0x38
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004662:	2300      	movs	r3, #0
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xQueueGenericSend+0x32>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <xQueueGenericSend+0x40>
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <xQueueGenericSend+0x44>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <xQueueGenericSend+0x46>
 8004698:	2300      	movs	r3, #0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <xQueueGenericSend+0x60>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d103      	bne.n	80046c2 <xQueueGenericSend+0x6e>
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <xQueueGenericSend+0x72>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <xQueueGenericSend+0x74>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	623b      	str	r3, [r7, #32]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046e2:	f001 f9b9 	bl	8005a58 <xTaskGetSchedulerState>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d102      	bne.n	80046f2 <xQueueGenericSend+0x9e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <xQueueGenericSend+0xa2>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <xQueueGenericSend+0xa4>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <xQueueGenericSend+0xbe>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	61fb      	str	r3, [r7, #28]
}
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004712:	f001 febf 	bl	8006494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <xQueueGenericSend+0xd4>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d129      	bne.n	800477c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800472e:	f000 fa07 	bl	8004b40 <prvCopyDataToQueue>
 8004732:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	2b00      	cmp	r3, #0
 800473a:	d010      	beq.n	800475e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	3324      	adds	r3, #36	; 0x24
 8004740:	4618      	mov	r0, r3
 8004742:	f000 ffc5 	bl	80056d0 <xTaskRemoveFromEventList>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800474c:	4b3f      	ldr	r3, [pc, #252]	; (800484c <xQueueGenericSend+0x1f8>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	e00a      	b.n	8004774 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004764:	4b39      	ldr	r3, [pc, #228]	; (800484c <xQueueGenericSend+0x1f8>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004774:	f001 febe 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 8004778:	2301      	movs	r3, #1
 800477a:	e063      	b.n	8004844 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004782:	f001 feb7 	bl	80064f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004786:	2300      	movs	r3, #0
 8004788:	e05c      	b.n	8004844 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004790:	f107 0314 	add.w	r3, r7, #20
 8004794:	4618      	mov	r0, r3
 8004796:	f000 ffff 	bl	8005798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800479e:	f001 fea9 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a2:	f000 fd6d 	bl	8005280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047a6:	f001 fe75 	bl	8006494 <vPortEnterCritical>
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d103      	bne.n	80047c0 <xQueueGenericSend+0x16c>
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047c6:	b25b      	sxtb	r3, r3
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d103      	bne.n	80047d6 <xQueueGenericSend+0x182>
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d6:	f001 fe8d 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047da:	1d3a      	adds	r2, r7, #4
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 ffee 	bl	80057c4 <xTaskCheckForTimeOut>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d124      	bne.n	8004838 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047f0:	f000 fa9e 	bl	8004d30 <prvIsQueueFull>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d018      	beq.n	800482c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	3310      	adds	r3, #16
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f000 ff14 	bl	8005630 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480a:	f000 fa29 	bl	8004c60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800480e:	f000 fd45 	bl	800529c <xTaskResumeAll>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	f47f af7c 	bne.w	8004712 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <xQueueGenericSend+0x1f8>)
 800481c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	e772      	b.n	8004712 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800482c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800482e:	f000 fa17 	bl	8004c60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004832:	f000 fd33 	bl	800529c <xTaskResumeAll>
 8004836:	e76c      	b.n	8004712 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800483a:	f000 fa11 	bl	8004c60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800483e:	f000 fd2d 	bl	800529c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004842:	2300      	movs	r3, #0
		}
	}
}
 8004844:	4618      	mov	r0, r3
 8004846:	3738      	adds	r7, #56	; 0x38
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	e000ed04 	.word	0xe000ed04

08004850 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08e      	sub	sp, #56	; 0x38
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d103      	bne.n	800488c <xQueueGenericSendFromISR+0x3c>
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <xQueueGenericSendFromISR+0x40>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <xQueueGenericSendFromISR+0x42>
 8004890:	2300      	movs	r3, #0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	623b      	str	r3, [r7, #32]
}
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d103      	bne.n	80048ba <xQueueGenericSendFromISR+0x6a>
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <xQueueGenericSendFromISR+0x6e>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <xQueueGenericSendFromISR+0x70>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	61fb      	str	r3, [r7, #28]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048da:	f001 febd 	bl	8006658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048de:	f3ef 8211 	mrs	r2, BASEPRI
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	61ba      	str	r2, [r7, #24]
 80048f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <xQueueGenericSendFromISR+0xbc>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d12c      	bne.n	8004966 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800491c:	f000 f910 	bl	8004b40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004920:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d112      	bne.n	8004950 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	3324      	adds	r3, #36	; 0x24
 8004936:	4618      	mov	r0, r3
 8004938:	f000 feca 	bl	80056d0 <xTaskRemoveFromEventList>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00e      	beq.n	8004960 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e007      	b.n	8004960 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004950:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004954:	3301      	adds	r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	b25a      	sxtb	r2, r3
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004960:	2301      	movs	r3, #1
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004964:	e001      	b.n	800496a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004966:	2300      	movs	r3, #0
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004974:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004978:	4618      	mov	r0, r3
 800497a:	3738      	adds	r7, #56	; 0x38
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08c      	sub	sp, #48	; 0x30
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800498c:	2300      	movs	r3, #0
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <xQueueReceive+0x30>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	623b      	str	r3, [r7, #32]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <xQueueReceive+0x3e>
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <xQueueReceive+0x42>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <xQueueReceive+0x44>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xQueueReceive+0x5e>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	61fb      	str	r3, [r7, #28]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049de:	f001 f83b 	bl	8005a58 <xTaskGetSchedulerState>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <xQueueReceive+0x6e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <xQueueReceive+0x72>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <xQueueReceive+0x74>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <xQueueReceive+0x8e>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	61bb      	str	r3, [r7, #24]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a0e:	f001 fd41 	bl	8006494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01f      	beq.n	8004a5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a22:	f000 f8f7 	bl	8004c14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1e5a      	subs	r2, r3, #1
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00f      	beq.n	8004a56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	3310      	adds	r3, #16
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fe48 	bl	80056d0 <xTaskRemoveFromEventList>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a46:	4b3d      	ldr	r3, [pc, #244]	; (8004b3c <xQueueReceive+0x1bc>)
 8004a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a56:	f001 fd4d 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e069      	b.n	8004b32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a64:	f001 fd46 	bl	80064f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e062      	b.n	8004b32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a72:	f107 0310 	add.w	r3, r7, #16
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fe8e 	bl	8005798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a80:	f001 fd38 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a84:	f000 fbfc 	bl	8005280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a88:	f001 fd04 	bl	8006494 <vPortEnterCritical>
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d103      	bne.n	8004aa2 <xQueueReceive+0x122>
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa8:	b25b      	sxtb	r3, r3
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d103      	bne.n	8004ab8 <xQueueReceive+0x138>
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab8:	f001 fd1c 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004abc:	1d3a      	adds	r2, r7, #4
 8004abe:	f107 0310 	add.w	r3, r7, #16
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fe7d 	bl	80057c4 <xTaskCheckForTimeOut>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d123      	bne.n	8004b18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad2:	f000 f917 	bl	8004d04 <prvIsQueueEmpty>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d017      	beq.n	8004b0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	3324      	adds	r3, #36	; 0x24
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fda3 	bl	8005630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aec:	f000 f8b8 	bl	8004c60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004af0:	f000 fbd4 	bl	800529c <xTaskResumeAll>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d189      	bne.n	8004a0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004afa:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <xQueueReceive+0x1bc>)
 8004afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	e780      	b.n	8004a0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0e:	f000 f8a7 	bl	8004c60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b12:	f000 fbc3 	bl	800529c <xTaskResumeAll>
 8004b16:	e77a      	b.n	8004a0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b1a:	f000 f8a1 	bl	8004c60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b1e:	f000 fbbd 	bl	800529c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b24:	f000 f8ee 	bl	8004d04 <prvIsQueueEmpty>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f43f af6f 	beq.w	8004a0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3730      	adds	r7, #48	; 0x30
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10d      	bne.n	8004b7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d14d      	bne.n	8004c02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 ff92 	bl	8005a94 <xTaskPriorityDisinherit>
 8004b70:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	605a      	str	r2, [r3, #4]
 8004b78:	e043      	b.n	8004c02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d119      	bne.n	8004bb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6898      	ldr	r0, [r3, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	461a      	mov	r2, r3
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	f001 ffa2 	bl	8006ad4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	441a      	add	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d32b      	bcc.n	8004c02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	e026      	b.n	8004c02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68d8      	ldr	r0, [r3, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	f001 ff88 	bl	8006ad4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	425b      	negs	r3, r3
 8004bce:	441a      	add	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d207      	bcs.n	8004bf0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	425b      	negs	r3, r3
 8004bea:	441a      	add	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d105      	bne.n	8004c02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c0a:	697b      	ldr	r3, [r7, #20]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d018      	beq.n	8004c58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	441a      	add	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d303      	bcc.n	8004c48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68d9      	ldr	r1, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	461a      	mov	r2, r3
 8004c52:	6838      	ldr	r0, [r7, #0]
 8004c54:	f001 ff3e 	bl	8006ad4 <memcpy>
	}
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c68:	f001 fc14 	bl	8006494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c74:	e011      	b.n	8004c9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d012      	beq.n	8004ca4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3324      	adds	r3, #36	; 0x24
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fd24 	bl	80056d0 <xTaskRemoveFromEventList>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c8e:	f000 fdfb 	bl	8005888 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	dce9      	bgt.n	8004c76 <prvUnlockQueue+0x16>
 8004ca2:	e000      	b.n	8004ca6 <prvUnlockQueue+0x46>
					break;
 8004ca4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	22ff      	movs	r2, #255	; 0xff
 8004caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cae:	f001 fc21 	bl	80064f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cb2:	f001 fbef 	bl	8006494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cbe:	e011      	b.n	8004ce4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d012      	beq.n	8004cee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3310      	adds	r3, #16
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fcff 	bl	80056d0 <xTaskRemoveFromEventList>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cd8:	f000 fdd6 	bl	8005888 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cdc:	7bbb      	ldrb	r3, [r7, #14]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	dce9      	bgt.n	8004cc0 <prvUnlockQueue+0x60>
 8004cec:	e000      	b.n	8004cf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	22ff      	movs	r2, #255	; 0xff
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cf8:	f001 fbfc 	bl	80064f4 <vPortExitCritical>
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d0c:	f001 fbc2 	bl	8006494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e001      	b.n	8004d22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d22:	f001 fbe7 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8004d26:	68fb      	ldr	r3, [r7, #12]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d38:	f001 fbac 	bl	8006494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d102      	bne.n	8004d4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e001      	b.n	8004d52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d52:	f001 fbcf 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8004d56:	68fb      	ldr	r3, [r7, #12]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e014      	b.n	8004d9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d70:	4a0f      	ldr	r2, [pc, #60]	; (8004db0 <vQueueAddToRegistry+0x50>)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d7c:	490c      	ldr	r1, [pc, #48]	; (8004db0 <vQueueAddToRegistry+0x50>)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d86:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <vQueueAddToRegistry+0x50>)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d92:	e006      	b.n	8004da2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b07      	cmp	r3, #7
 8004d9e:	d9e7      	bls.n	8004d70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20001a84 	.word	0x20001a84

08004db4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004dc4:	f001 fb66 	bl	8006494 <vPortEnterCritical>
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dce:	b25b      	sxtb	r3, r3
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d103      	bne.n	8004dde <vQueueWaitForMessageRestricted+0x2a>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004de4:	b25b      	sxtb	r3, r3
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d103      	bne.n	8004df4 <vQueueWaitForMessageRestricted+0x40>
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df4:	f001 fb7e 	bl	80064f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	3324      	adds	r3, #36	; 0x24
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fc35 	bl	8005678 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e0e:	6978      	ldr	r0, [r7, #20]
 8004e10:	f7ff ff26 	bl	8004c60 <prvUnlockQueue>
	}
 8004e14:	bf00      	nop
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08e      	sub	sp, #56	; 0x38
 8004e20:	af04      	add	r7, sp, #16
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	623b      	str	r3, [r7, #32]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <xTaskCreateStatic+0x46>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	61fb      	str	r3, [r7, #28]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e62:	235c      	movs	r3, #92	; 0x5c
 8004e64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b5c      	cmp	r3, #92	; 0x5c
 8004e6a:	d00a      	beq.n	8004e82 <xTaskCreateStatic+0x66>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	61bb      	str	r3, [r7, #24]
}
 8004e7e:	bf00      	nop
 8004e80:	e7fe      	b.n	8004e80 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01e      	beq.n	8004ec6 <xTaskCreateStatic+0xaa>
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01b      	beq.n	8004ec6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	9303      	str	r3, [sp, #12]
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	9302      	str	r3, [sp, #8]
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f850 	bl	8004f5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ec0:	f000 f8d4 	bl	800506c <prvAddNewTaskToReadyList>
 8004ec4:	e001      	b.n	8004eca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004eca:	697b      	ldr	r3, [r7, #20]
	}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3728      	adds	r7, #40	; 0x28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08c      	sub	sp, #48	; 0x30
 8004ed8:	af04      	add	r7, sp, #16
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 fbf5 	bl	80066d8 <pvPortMalloc>
 8004eee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00e      	beq.n	8004f14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ef6:	205c      	movs	r0, #92	; 0x5c
 8004ef8:	f001 fbee 	bl	80066d8 <pvPortMalloc>
 8004efc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
 8004f0a:	e005      	b.n	8004f18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f0c:	6978      	ldr	r0, [r7, #20]
 8004f0e:	f001 fca7 	bl	8006860 <vPortFree>
 8004f12:	e001      	b.n	8004f18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d017      	beq.n	8004f4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9303      	str	r3, [sp, #12]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	9302      	str	r3, [sp, #8]
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f80e 	bl	8004f5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f42:	69f8      	ldr	r0, [r7, #28]
 8004f44:	f000 f892 	bl	800506c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	e002      	b.n	8004f54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f54:	69bb      	ldr	r3, [r7, #24]
	}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b088      	sub	sp, #32
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	461a      	mov	r2, r3
 8004f76:	21a5      	movs	r1, #165	; 0xa5
 8004f78:	f001 fdba 	bl	8006af0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f86:	3b01      	subs	r3, #1
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	617b      	str	r3, [r7, #20]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	e012      	b.n	8004fe2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	7819      	ldrb	r1, [r3, #0]
 8004fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	3334      	adds	r3, #52	; 0x34
 8004fcc:	460a      	mov	r2, r1
 8004fce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d006      	beq.n	8004fea <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2b0f      	cmp	r3, #15
 8004fe6:	d9e9      	bls.n	8004fbc <prvInitialiseNewTask+0x5e>
 8004fe8:	e000      	b.n	8004fec <prvInitialiseNewTask+0x8e>
		{
			break;
 8004fea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	2b37      	cmp	r3, #55	; 0x37
 8004ff8:	d901      	bls.n	8004ffe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ffa:	2337      	movs	r3, #55	; 0x37
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005008:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	2200      	movs	r2, #0
 800500e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff f987 	bl	8004328 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	3318      	adds	r3, #24
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff f982 	bl	8004328 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005028:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005038:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2200      	movs	r2, #0
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	69b8      	ldr	r0, [r7, #24]
 800504e:	f001 f8f5 	bl	800623c <pxPortInitialiseStack>
 8005052:	4602      	mov	r2, r0
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005062:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005064:	bf00      	nop
 8005066:	3720      	adds	r7, #32
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005074:	f001 fa0e 	bl	8006494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005078:	4b2d      	ldr	r3, [pc, #180]	; (8005130 <prvAddNewTaskToReadyList+0xc4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	4a2c      	ldr	r2, [pc, #176]	; (8005130 <prvAddNewTaskToReadyList+0xc4>)
 8005080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005082:	4b2c      	ldr	r3, [pc, #176]	; (8005134 <prvAddNewTaskToReadyList+0xc8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800508a:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <prvAddNewTaskToReadyList+0xc8>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <prvAddNewTaskToReadyList+0xc4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d110      	bne.n	80050ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005098:	f000 fc1a 	bl	80058d0 <prvInitialiseTaskLists>
 800509c:	e00d      	b.n	80050ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <prvAddNewTaskToReadyList+0xcc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <prvAddNewTaskToReadyList+0xc8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d802      	bhi.n	80050ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050b4:	4a1f      	ldr	r2, [pc, #124]	; (8005134 <prvAddNewTaskToReadyList+0xc8>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050ba:	4b20      	ldr	r3, [pc, #128]	; (800513c <prvAddNewTaskToReadyList+0xd0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3301      	adds	r3, #1
 80050c0:	4a1e      	ldr	r2, [pc, #120]	; (800513c <prvAddNewTaskToReadyList+0xd0>)
 80050c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050c4:	4b1d      	ldr	r3, [pc, #116]	; (800513c <prvAddNewTaskToReadyList+0xd0>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <prvAddNewTaskToReadyList+0xd4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d903      	bls.n	80050e0 <prvAddNewTaskToReadyList+0x74>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <prvAddNewTaskToReadyList+0xd4>)
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4a15      	ldr	r2, [pc, #84]	; (8005144 <prvAddNewTaskToReadyList+0xd8>)
 80050ee:	441a      	add	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f7ff f923 	bl	8004342 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050fc:	f001 f9fa 	bl	80064f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005100:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <prvAddNewTaskToReadyList+0xcc>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00e      	beq.n	8005126 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <prvAddNewTaskToReadyList+0xc8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	429a      	cmp	r2, r3
 8005114:	d207      	bcs.n	8005126 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005116:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <prvAddNewTaskToReadyList+0xdc>)
 8005118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000bbc 	.word	0x20000bbc
 8005134:	200006e8 	.word	0x200006e8
 8005138:	20000bc8 	.word	0x20000bc8
 800513c:	20000bd8 	.word	0x20000bd8
 8005140:	20000bc4 	.word	0x20000bc4
 8005144:	200006ec 	.word	0x200006ec
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d017      	beq.n	800518e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <vTaskDelay+0x60>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <vTaskDelay+0x30>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60bb      	str	r3, [r7, #8]
}
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800517c:	f000 f880 	bl	8005280 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005180:	2100      	movs	r1, #0
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fcf4 	bl	8005b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005188:	f000 f888 	bl	800529c <xTaskResumeAll>
 800518c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d107      	bne.n	80051a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <vTaskDelay+0x64>)
 8005196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20000be4 	.word	0x20000be4
 80051b0:	e000ed04 	.word	0xe000ed04

080051b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08a      	sub	sp, #40	; 0x28
 80051b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051c2:	463a      	mov	r2, r7
 80051c4:	1d39      	adds	r1, r7, #4
 80051c6:	f107 0308 	add.w	r3, r7, #8
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff f858 	bl	8004280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	9202      	str	r2, [sp, #8]
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	2300      	movs	r3, #0
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	2300      	movs	r3, #0
 80051e0:	460a      	mov	r2, r1
 80051e2:	4921      	ldr	r1, [pc, #132]	; (8005268 <vTaskStartScheduler+0xb4>)
 80051e4:	4821      	ldr	r0, [pc, #132]	; (800526c <vTaskStartScheduler+0xb8>)
 80051e6:	f7ff fe19 	bl	8004e1c <xTaskCreateStatic>
 80051ea:	4603      	mov	r3, r0
 80051ec:	4a20      	ldr	r2, [pc, #128]	; (8005270 <vTaskStartScheduler+0xbc>)
 80051ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051f0:	4b1f      	ldr	r3, [pc, #124]	; (8005270 <vTaskStartScheduler+0xbc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051f8:	2301      	movs	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e001      	b.n	8005202 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d102      	bne.n	800520e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005208:	f000 fd06 	bl	8005c18 <xTimerCreateTimerTask>
 800520c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d116      	bne.n	8005242 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	613b      	str	r3, [r7, #16]
}
 8005226:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005228:	4b12      	ldr	r3, [pc, #72]	; (8005274 <vTaskStartScheduler+0xc0>)
 800522a:	f04f 32ff 	mov.w	r2, #4294967295
 800522e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005230:	4b11      	ldr	r3, [pc, #68]	; (8005278 <vTaskStartScheduler+0xc4>)
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <vTaskStartScheduler+0xc8>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800523c:	f001 f888 	bl	8006350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005240:	e00e      	b.n	8005260 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d10a      	bne.n	8005260 <vTaskStartScheduler+0xac>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	60fb      	str	r3, [r7, #12]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <vTaskStartScheduler+0xaa>
}
 8005260:	bf00      	nop
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	08006b34 	.word	0x08006b34
 800526c:	080058a1 	.word	0x080058a1
 8005270:	20000be0 	.word	0x20000be0
 8005274:	20000bdc 	.word	0x20000bdc
 8005278:	20000bc8 	.word	0x20000bc8
 800527c:	20000bc0 	.word	0x20000bc0

08005280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <vTaskSuspendAll+0x18>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a03      	ldr	r2, [pc, #12]	; (8005298 <vTaskSuspendAll+0x18>)
 800528c:	6013      	str	r3, [r2, #0]
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000be4 	.word	0x20000be4

0800529c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052aa:	4b42      	ldr	r3, [pc, #264]	; (80053b4 <xTaskResumeAll+0x118>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	603b      	str	r3, [r7, #0]
}
 80052c4:	bf00      	nop
 80052c6:	e7fe      	b.n	80052c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052c8:	f001 f8e4 	bl	8006494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052cc:	4b39      	ldr	r3, [pc, #228]	; (80053b4 <xTaskResumeAll+0x118>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	4a38      	ldr	r2, [pc, #224]	; (80053b4 <xTaskResumeAll+0x118>)
 80052d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d6:	4b37      	ldr	r3, [pc, #220]	; (80053b4 <xTaskResumeAll+0x118>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d162      	bne.n	80053a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052de:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <xTaskResumeAll+0x11c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d05e      	beq.n	80053a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052e6:	e02f      	b.n	8005348 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80052e8:	4b34      	ldr	r3, [pc, #208]	; (80053bc <xTaskResumeAll+0x120>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3318      	adds	r3, #24
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff f881 	bl	80043fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff f87c 	bl	80043fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	4b2d      	ldr	r3, [pc, #180]	; (80053c0 <xTaskResumeAll+0x124>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d903      	bls.n	8005318 <xTaskResumeAll+0x7c>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <xTaskResumeAll+0x124>)
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4a27      	ldr	r2, [pc, #156]	; (80053c4 <xTaskResumeAll+0x128>)
 8005326:	441a      	add	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f7ff f807 	bl	8004342 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	4b23      	ldr	r3, [pc, #140]	; (80053c8 <xTaskResumeAll+0x12c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	429a      	cmp	r2, r3
 8005340:	d302      	bcc.n	8005348 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005342:	4b22      	ldr	r3, [pc, #136]	; (80053cc <xTaskResumeAll+0x130>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005348:	4b1c      	ldr	r3, [pc, #112]	; (80053bc <xTaskResumeAll+0x120>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1cb      	bne.n	80052e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005356:	f000 fb59 	bl	8005a0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800535a:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <xTaskResumeAll+0x134>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005366:	f000 f847 	bl	80053f8 <xTaskIncrementTick>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005370:	4b16      	ldr	r3, [pc, #88]	; (80053cc <xTaskResumeAll+0x130>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3b01      	subs	r3, #1
 800537a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f1      	bne.n	8005366 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005382:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <xTaskResumeAll+0x134>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005388:	4b10      	ldr	r3, [pc, #64]	; (80053cc <xTaskResumeAll+0x130>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005390:	2301      	movs	r3, #1
 8005392:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005394:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <xTaskResumeAll+0x138>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053a4:	f001 f8a6 	bl	80064f4 <vPortExitCritical>

	return xAlreadyYielded;
 80053a8:	68bb      	ldr	r3, [r7, #8]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000be4 	.word	0x20000be4
 80053b8:	20000bbc 	.word	0x20000bbc
 80053bc:	20000b7c 	.word	0x20000b7c
 80053c0:	20000bc4 	.word	0x20000bc4
 80053c4:	200006ec 	.word	0x200006ec
 80053c8:	200006e8 	.word	0x200006e8
 80053cc:	20000bd0 	.word	0x20000bd0
 80053d0:	20000bcc 	.word	0x20000bcc
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <xTaskGetTickCount+0x1c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053e4:	687b      	ldr	r3, [r7, #4]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000bc0 	.word	0x20000bc0

080053f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005402:	4b51      	ldr	r3, [pc, #324]	; (8005548 <xTaskIncrementTick+0x150>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f040 808e 	bne.w	8005528 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800540c:	4b4f      	ldr	r3, [pc, #316]	; (800554c <xTaskIncrementTick+0x154>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005414:	4a4d      	ldr	r2, [pc, #308]	; (800554c <xTaskIncrementTick+0x154>)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d120      	bne.n	8005462 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005420:	4b4b      	ldr	r3, [pc, #300]	; (8005550 <xTaskIncrementTick+0x158>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <xTaskIncrementTick+0x48>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	603b      	str	r3, [r7, #0]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <xTaskIncrementTick+0x46>
 8005440:	4b43      	ldr	r3, [pc, #268]	; (8005550 <xTaskIncrementTick+0x158>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	4b43      	ldr	r3, [pc, #268]	; (8005554 <xTaskIncrementTick+0x15c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a41      	ldr	r2, [pc, #260]	; (8005550 <xTaskIncrementTick+0x158>)
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	4a41      	ldr	r2, [pc, #260]	; (8005554 <xTaskIncrementTick+0x15c>)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	4b40      	ldr	r3, [pc, #256]	; (8005558 <xTaskIncrementTick+0x160>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	4a3f      	ldr	r2, [pc, #252]	; (8005558 <xTaskIncrementTick+0x160>)
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	f000 fad5 	bl	8005a0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005462:	4b3e      	ldr	r3, [pc, #248]	; (800555c <xTaskIncrementTick+0x164>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	429a      	cmp	r2, r3
 800546a:	d34e      	bcc.n	800550a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800546c:	4b38      	ldr	r3, [pc, #224]	; (8005550 <xTaskIncrementTick+0x158>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <xTaskIncrementTick+0x82>
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <xTaskIncrementTick+0x84>
 800547a:	2300      	movs	r3, #0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005480:	4b36      	ldr	r3, [pc, #216]	; (800555c <xTaskIncrementTick+0x164>)
 8005482:	f04f 32ff 	mov.w	r2, #4294967295
 8005486:	601a      	str	r2, [r3, #0]
					break;
 8005488:	e03f      	b.n	800550a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <xTaskIncrementTick+0x158>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d203      	bcs.n	80054aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054a2:	4a2e      	ldr	r2, [pc, #184]	; (800555c <xTaskIncrementTick+0x164>)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6013      	str	r3, [r2, #0]
						break;
 80054a8:	e02f      	b.n	800550a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe ffa4 	bl	80043fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d004      	beq.n	80054c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	3318      	adds	r3, #24
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe ff9b 	bl	80043fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	4b25      	ldr	r3, [pc, #148]	; (8005560 <xTaskIncrementTick+0x168>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d903      	bls.n	80054da <xTaskIncrementTick+0xe2>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	4a22      	ldr	r2, [pc, #136]	; (8005560 <xTaskIncrementTick+0x168>)
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4a1f      	ldr	r2, [pc, #124]	; (8005564 <xTaskIncrementTick+0x16c>)
 80054e8:	441a      	add	r2, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7fe ff26 	bl	8004342 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fa:	4b1b      	ldr	r3, [pc, #108]	; (8005568 <xTaskIncrementTick+0x170>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	429a      	cmp	r2, r3
 8005502:	d3b3      	bcc.n	800546c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005504:	2301      	movs	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005508:	e7b0      	b.n	800546c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800550a:	4b17      	ldr	r3, [pc, #92]	; (8005568 <xTaskIncrementTick+0x170>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005510:	4914      	ldr	r1, [pc, #80]	; (8005564 <xTaskIncrementTick+0x16c>)
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d907      	bls.n	8005532 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005522:	2301      	movs	r3, #1
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e004      	b.n	8005532 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005528:	4b10      	ldr	r3, [pc, #64]	; (800556c <xTaskIncrementTick+0x174>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3301      	adds	r3, #1
 800552e:	4a0f      	ldr	r2, [pc, #60]	; (800556c <xTaskIncrementTick+0x174>)
 8005530:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <xTaskIncrementTick+0x178>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800553a:	2301      	movs	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800553e:	697b      	ldr	r3, [r7, #20]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000be4 	.word	0x20000be4
 800554c:	20000bc0 	.word	0x20000bc0
 8005550:	20000b74 	.word	0x20000b74
 8005554:	20000b78 	.word	0x20000b78
 8005558:	20000bd4 	.word	0x20000bd4
 800555c:	20000bdc 	.word	0x20000bdc
 8005560:	20000bc4 	.word	0x20000bc4
 8005564:	200006ec 	.word	0x200006ec
 8005568:	200006e8 	.word	0x200006e8
 800556c:	20000bcc 	.word	0x20000bcc
 8005570:	20000bd0 	.word	0x20000bd0

08005574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800557a:	4b28      	ldr	r3, [pc, #160]	; (800561c <vTaskSwitchContext+0xa8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005582:	4b27      	ldr	r3, [pc, #156]	; (8005620 <vTaskSwitchContext+0xac>)
 8005584:	2201      	movs	r2, #1
 8005586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005588:	e041      	b.n	800560e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800558a:	4b25      	ldr	r3, [pc, #148]	; (8005620 <vTaskSwitchContext+0xac>)
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005590:	4b24      	ldr	r3, [pc, #144]	; (8005624 <vTaskSwitchContext+0xb0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e010      	b.n	80055ba <vTaskSwitchContext+0x46>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	607b      	str	r3, [r7, #4]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vTaskSwitchContext+0x3e>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	491b      	ldr	r1, [pc, #108]	; (8005628 <vTaskSwitchContext+0xb4>)
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0e4      	beq.n	8005598 <vTaskSwitchContext+0x24>
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4a13      	ldr	r2, [pc, #76]	; (8005628 <vTaskSwitchContext+0xb4>)
 80055da:	4413      	add	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	605a      	str	r2, [r3, #4]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	3308      	adds	r3, #8
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d104      	bne.n	80055fe <vTaskSwitchContext+0x8a>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	605a      	str	r2, [r3, #4]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	4a09      	ldr	r2, [pc, #36]	; (800562c <vTaskSwitchContext+0xb8>)
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	4a06      	ldr	r2, [pc, #24]	; (8005624 <vTaskSwitchContext+0xb0>)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6013      	str	r3, [r2, #0]
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000be4 	.word	0x20000be4
 8005620:	20000bd0 	.word	0x20000bd0
 8005624:	20000bc4 	.word	0x20000bc4
 8005628:	200006ec 	.word	0x200006ec
 800562c:	200006e8 	.word	0x200006e8

08005630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	60fb      	str	r3, [r7, #12]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005656:	4b07      	ldr	r3, [pc, #28]	; (8005674 <vTaskPlaceOnEventList+0x44>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3318      	adds	r3, #24
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fe fe93 	bl	800438a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005664:	2101      	movs	r1, #1
 8005666:	6838      	ldr	r0, [r7, #0]
 8005668:	f000 fa82 	bl	8005b70 <prvAddCurrentTaskToDelayedList>
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	200006e8 	.word	0x200006e8

08005678 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	617b      	str	r3, [r7, #20]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056a0:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <vTaskPlaceOnEventListRestricted+0x54>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3318      	adds	r3, #24
 80056a6:	4619      	mov	r1, r3
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7fe fe4a 	bl	8004342 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80056b4:	f04f 33ff 	mov.w	r3, #4294967295
 80056b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	68b8      	ldr	r0, [r7, #8]
 80056be:	f000 fa57 	bl	8005b70 <prvAddCurrentTaskToDelayedList>
	}
 80056c2:	bf00      	nop
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	200006e8 	.word	0x200006e8

080056d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60fb      	str	r3, [r7, #12]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	3318      	adds	r3, #24
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fe7b 	bl	80043fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005706:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <xTaskRemoveFromEventList+0xb0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11d      	bne.n	800574a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	3304      	adds	r3, #4
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fe72 	bl	80043fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571c:	4b19      	ldr	r3, [pc, #100]	; (8005784 <xTaskRemoveFromEventList+0xb4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d903      	bls.n	800572c <xTaskRemoveFromEventList+0x5c>
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	4a16      	ldr	r2, [pc, #88]	; (8005784 <xTaskRemoveFromEventList+0xb4>)
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4a13      	ldr	r2, [pc, #76]	; (8005788 <xTaskRemoveFromEventList+0xb8>)
 800573a:	441a      	add	r2, r3
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f7fe fdfd 	bl	8004342 <vListInsertEnd>
 8005748:	e005      	b.n	8005756 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3318      	adds	r3, #24
 800574e:	4619      	mov	r1, r3
 8005750:	480e      	ldr	r0, [pc, #56]	; (800578c <xTaskRemoveFromEventList+0xbc>)
 8005752:	f7fe fdf6 	bl	8004342 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <xTaskRemoveFromEventList+0xc0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	429a      	cmp	r2, r3
 8005762:	d905      	bls.n	8005770 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005764:	2301      	movs	r3, #1
 8005766:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <xTaskRemoveFromEventList+0xc4>)
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e001      	b.n	8005774 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005774:	697b      	ldr	r3, [r7, #20]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000be4 	.word	0x20000be4
 8005784:	20000bc4 	.word	0x20000bc4
 8005788:	200006ec 	.word	0x200006ec
 800578c:	20000b7c 	.word	0x20000b7c
 8005790:	200006e8 	.word	0x200006e8
 8005794:	20000bd0 	.word	0x20000bd0

08005798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <vTaskInternalSetTimeOutState+0x24>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <vTaskInternalSetTimeOutState+0x28>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	605a      	str	r2, [r3, #4]
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	20000bd4 	.word	0x20000bd4
 80057c0:	20000bc0 	.word	0x20000bc0

080057c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	613b      	str	r3, [r7, #16]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	60fb      	str	r3, [r7, #12]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005806:	f000 fe45 	bl	8006494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800580a:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <xTaskCheckForTimeOut+0xbc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d102      	bne.n	800582a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	e023      	b.n	8005872 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <xTaskCheckForTimeOut+0xc0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d007      	beq.n	8005846 <xTaskCheckForTimeOut+0x82>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e015      	b.n	8005872 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	429a      	cmp	r2, r3
 800584e:	d20b      	bcs.n	8005868 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	1ad2      	subs	r2, r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ff9b 	bl	8005798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e004      	b.n	8005872 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800586e:	2301      	movs	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005872:	f000 fe3f 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8005876:	69fb      	ldr	r3, [r7, #28]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000bc0 	.word	0x20000bc0
 8005884:	20000bd4 	.word	0x20000bd4

08005888 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <vTaskMissedYield+0x14>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]
}
 8005892:	bf00      	nop
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20000bd0 	.word	0x20000bd0

080058a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058a8:	f000 f852 	bl	8005950 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <prvIdleTask+0x28>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d9f9      	bls.n	80058a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <prvIdleTask+0x2c>)
 80058b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058c4:	e7f0      	b.n	80058a8 <prvIdleTask+0x8>
 80058c6:	bf00      	nop
 80058c8:	200006ec 	.word	0x200006ec
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058d6:	2300      	movs	r3, #0
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	e00c      	b.n	80058f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4a12      	ldr	r2, [pc, #72]	; (8005930 <prvInitialiseTaskLists+0x60>)
 80058e8:	4413      	add	r3, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fcfc 	bl	80042e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3301      	adds	r3, #1
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b37      	cmp	r3, #55	; 0x37
 80058fa:	d9ef      	bls.n	80058dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058fc:	480d      	ldr	r0, [pc, #52]	; (8005934 <prvInitialiseTaskLists+0x64>)
 80058fe:	f7fe fcf3 	bl	80042e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005902:	480d      	ldr	r0, [pc, #52]	; (8005938 <prvInitialiseTaskLists+0x68>)
 8005904:	f7fe fcf0 	bl	80042e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005908:	480c      	ldr	r0, [pc, #48]	; (800593c <prvInitialiseTaskLists+0x6c>)
 800590a:	f7fe fced 	bl	80042e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800590e:	480c      	ldr	r0, [pc, #48]	; (8005940 <prvInitialiseTaskLists+0x70>)
 8005910:	f7fe fcea 	bl	80042e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005914:	480b      	ldr	r0, [pc, #44]	; (8005944 <prvInitialiseTaskLists+0x74>)
 8005916:	f7fe fce7 	bl	80042e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <prvInitialiseTaskLists+0x78>)
 800591c:	4a05      	ldr	r2, [pc, #20]	; (8005934 <prvInitialiseTaskLists+0x64>)
 800591e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <prvInitialiseTaskLists+0x7c>)
 8005922:	4a05      	ldr	r2, [pc, #20]	; (8005938 <prvInitialiseTaskLists+0x68>)
 8005924:	601a      	str	r2, [r3, #0]
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	200006ec 	.word	0x200006ec
 8005934:	20000b4c 	.word	0x20000b4c
 8005938:	20000b60 	.word	0x20000b60
 800593c:	20000b7c 	.word	0x20000b7c
 8005940:	20000b90 	.word	0x20000b90
 8005944:	20000ba8 	.word	0x20000ba8
 8005948:	20000b74 	.word	0x20000b74
 800594c:	20000b78 	.word	0x20000b78

08005950 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005956:	e019      	b.n	800598c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005958:	f000 fd9c 	bl	8006494 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800595c:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <prvCheckTasksWaitingTermination+0x50>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fd47 	bl	80043fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <prvCheckTasksWaitingTermination+0x54>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3b01      	subs	r3, #1
 8005974:	4a0b      	ldr	r2, [pc, #44]	; (80059a4 <prvCheckTasksWaitingTermination+0x54>)
 8005976:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005978:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <prvCheckTasksWaitingTermination+0x58>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <prvCheckTasksWaitingTermination+0x58>)
 8005980:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005982:	f000 fdb7 	bl	80064f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f810 	bl	80059ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <prvCheckTasksWaitingTermination+0x58>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e1      	bne.n	8005958 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000b90 	.word	0x20000b90
 80059a4:	20000bbc 	.word	0x20000bbc
 80059a8:	20000ba4 	.word	0x20000ba4

080059ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d108      	bne.n	80059d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 ff4c 	bl	8006860 <vPortFree>
				vPortFree( pxTCB );
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 ff49 	bl	8006860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059ce:	e018      	b.n	8005a02 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d103      	bne.n	80059e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 ff40 	bl	8006860 <vPortFree>
	}
 80059e0:	e00f      	b.n	8005a02 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d00a      	beq.n	8005a02 <prvDeleteTCB+0x56>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	60fb      	str	r3, [r7, #12]
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <prvDeleteTCB+0x54>
	}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <prvResetNextTaskUnblockTime+0x44>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <prvResetNextTaskUnblockTime+0x14>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <prvResetNextTaskUnblockTime+0x16>
 8005a20:	2300      	movs	r3, #0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a26:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <prvResetNextTaskUnblockTime+0x48>)
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a2e:	e008      	b.n	8005a42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <prvResetNextTaskUnblockTime+0x44>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <prvResetNextTaskUnblockTime+0x48>)
 8005a40:	6013      	str	r3, [r2, #0]
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000b74 	.word	0x20000b74
 8005a54:	20000bdc 	.word	0x20000bdc

08005a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <xTaskGetSchedulerState+0x34>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d102      	bne.n	8005a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a66:	2301      	movs	r3, #1
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	e008      	b.n	8005a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a6c:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <xTaskGetSchedulerState+0x38>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a74:	2302      	movs	r3, #2
 8005a76:	607b      	str	r3, [r7, #4]
 8005a78:	e001      	b.n	8005a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a7e:	687b      	ldr	r3, [r7, #4]
	}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000bc8 	.word	0x20000bc8
 8005a90:	20000be4 	.word	0x20000be4

08005a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d056      	beq.n	8005b58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005aaa:	4b2e      	ldr	r3, [pc, #184]	; (8005b64 <xTaskPriorityDisinherit+0xd0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d00a      	beq.n	8005aca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60fb      	str	r3, [r7, #12]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10a      	bne.n	8005ae8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	60bb      	str	r3, [r7, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	e7fe      	b.n	8005ae6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aec:	1e5a      	subs	r2, r3, #1
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d02c      	beq.n	8005b58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d128      	bne.n	8005b58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe fc76 	bl	80043fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <xTaskPriorityDisinherit+0xd4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d903      	bls.n	8005b38 <xTaskPriorityDisinherit+0xa4>
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	4a0c      	ldr	r2, [pc, #48]	; (8005b68 <xTaskPriorityDisinherit+0xd4>)
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <xTaskPriorityDisinherit+0xd8>)
 8005b46:	441a      	add	r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f7fe fbf7 	bl	8004342 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b58:	697b      	ldr	r3, [r7, #20]
	}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200006e8 	.word	0x200006e8
 8005b68:	20000bc4 	.word	0x20000bc4
 8005b6c:	200006ec 	.word	0x200006ec

08005b70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b7a:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b80:	4b20      	ldr	r3, [pc, #128]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fc38 	bl	80043fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	d10a      	bne.n	8005baa <prvAddCurrentTaskToDelayedList+0x3a>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b9a:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4819      	ldr	r0, [pc, #100]	; (8005c08 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ba4:	f7fe fbcd 	bl	8004342 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ba8:	e026      	b.n	8005bf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bb2:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d209      	bcs.n	8005bd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7fe fbdb 	bl	800438a <vListInsert>
}
 8005bd4:	e010      	b.n	8005bf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd6:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f7fe fbd1 	bl	800438a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d202      	bcs.n	8005bf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bf2:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6013      	str	r3, [r2, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000bc0 	.word	0x20000bc0
 8005c04:	200006e8 	.word	0x200006e8
 8005c08:	20000ba8 	.word	0x20000ba8
 8005c0c:	20000b78 	.word	0x20000b78
 8005c10:	20000b74 	.word	0x20000b74
 8005c14:	20000bdc 	.word	0x20000bdc

08005c18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c22:	f000 facb 	bl	80061bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c26:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <xTimerCreateTimerTask+0x80>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d021      	beq.n	8005c72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c36:	1d3a      	adds	r2, r7, #4
 8005c38:	f107 0108 	add.w	r1, r7, #8
 8005c3c:	f107 030c 	add.w	r3, r7, #12
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fb37 	bl	80042b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	9202      	str	r2, [sp, #8]
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	2302      	movs	r3, #2
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	460a      	mov	r2, r1
 8005c58:	4910      	ldr	r1, [pc, #64]	; (8005c9c <xTimerCreateTimerTask+0x84>)
 8005c5a:	4811      	ldr	r0, [pc, #68]	; (8005ca0 <xTimerCreateTimerTask+0x88>)
 8005c5c:	f7ff f8de 	bl	8004e1c <xTaskCreateStatic>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <xTimerCreateTimerTask+0x8c>)
 8005c64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <xTimerCreateTimerTask+0x8c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	613b      	str	r3, [r7, #16]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c8e:	697b      	ldr	r3, [r7, #20]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000c18 	.word	0x20000c18
 8005c9c:	08006b3c 	.word	0x08006b3c
 8005ca0:	08005dc5 	.word	0x08005dc5
 8005ca4:	20000c1c 	.word	0x20000c1c

08005ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	623b      	str	r3, [r7, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <xTimerGenericCommand+0x98>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02a      	beq.n	8005d34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	dc18      	bgt.n	8005d22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cf0:	f7ff feb2 	bl	8005a58 <xTaskGetSchedulerState>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d109      	bne.n	8005d0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <xTimerGenericCommand+0x98>)
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	f107 0110 	add.w	r1, r7, #16
 8005d02:	2300      	movs	r3, #0
 8005d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d06:	f7fe fca5 	bl	8004654 <xQueueGenericSend>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d0c:	e012      	b.n	8005d34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <xTimerGenericCommand+0x98>)
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f107 0110 	add.w	r1, r7, #16
 8005d16:	2300      	movs	r3, #0
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f7fe fc9b 	bl	8004654 <xQueueGenericSend>
 8005d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d20:	e008      	b.n	8005d34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <xTimerGenericCommand+0x98>)
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	f107 0110 	add.w	r1, r7, #16
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	f7fe fd8f 	bl	8004850 <xQueueGenericSendFromISR>
 8005d32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3728      	adds	r7, #40	; 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000c18 	.word	0x20000c18

08005d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d4e:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <prvProcessExpiredTimer+0x7c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe fb4d 	bl	80043fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d122      	bne.n	8005db0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	18d1      	adds	r1, r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	6978      	ldr	r0, [r7, #20]
 8005d78:	f000 f8c8 	bl	8005f0c <prvInsertTimerInActiveList>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d016      	beq.n	8005db0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d82:	2300      	movs	r3, #0
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	2300      	movs	r3, #0
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	6978      	ldr	r0, [r7, #20]
 8005d8e:	f7ff ff8b 	bl	8005ca8 <xTimerGenericCommand>
 8005d92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	60fb      	str	r3, [r7, #12]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	6978      	ldr	r0, [r7, #20]
 8005db6:	4798      	blx	r3
}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20000c10 	.word	0x20000c10

08005dc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dcc:	f107 0308 	add.w	r3, r7, #8
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f857 	bl	8005e84 <prvGetNextExpireTime>
 8005dd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f803 	bl	8005de8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005de2:	f000 f8d5 	bl	8005f90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005de6:	e7f1      	b.n	8005dcc <prvTimerTask+0x8>

08005de8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005df2:	f7ff fa45 	bl	8005280 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f866 	bl	8005ecc <prvSampleTimeNow>
 8005e00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d130      	bne.n	8005e6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <prvProcessTimerOrBlockTask+0x3c>
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d806      	bhi.n	8005e24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e16:	f7ff fa41 	bl	800529c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff ff91 	bl	8005d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e22:	e024      	b.n	8005e6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <prvProcessTimerOrBlockTask+0x90>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <prvProcessTimerOrBlockTask+0x94>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f7fe ffb3 	bl	8004db4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e4e:	f7ff fa25 	bl	800529c <xTaskResumeAll>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e58:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <prvProcessTimerOrBlockTask+0x98>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
}
 8005e68:	e001      	b.n	8005e6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e6a:	f7ff fa17 	bl	800529c <xTaskResumeAll>
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000c14 	.word	0x20000c14
 8005e7c:	20000c18 	.word	0x20000c18
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <prvGetNextExpireTime+0x44>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bf0c      	ite	eq
 8005e96:	2301      	moveq	r3, #1
 8005e98:	2300      	movne	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d105      	bne.n	8005eb6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005eaa:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <prvGetNextExpireTime+0x44>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e001      	b.n	8005eba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005eba:	68fb      	ldr	r3, [r7, #12]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20000c10 	.word	0x20000c10

08005ecc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ed4:	f7ff fa80 	bl	80053d8 <xTaskGetTickCount>
 8005ed8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <prvSampleTimeNow+0x3c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d205      	bcs.n	8005ef0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ee4:	f000 f908 	bl	80060f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e002      	b.n	8005ef6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ef6:	4a04      	ldr	r2, [pc, #16]	; (8005f08 <prvSampleTimeNow+0x3c>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005efc:	68fb      	ldr	r3, [r7, #12]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000c20 	.word	0x20000c20

08005f0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d812      	bhi.n	8005f58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	1ad2      	subs	r2, r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d302      	bcc.n	8005f46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e01b      	b.n	8005f7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <prvInsertTimerInActiveList+0x7c>)
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7fe fa1a 	bl	800438a <vListInsert>
 8005f56:	e012      	b.n	8005f7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d206      	bcs.n	8005f6e <prvInsertTimerInActiveList+0x62>
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d302      	bcc.n	8005f6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e007      	b.n	8005f7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <prvInsertTimerInActiveList+0x80>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7fe fa06 	bl	800438a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f7e:	697b      	ldr	r3, [r7, #20]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000c14 	.word	0x20000c14
 8005f8c:	20000c10 	.word	0x20000c10

08005f90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08e      	sub	sp, #56	; 0x38
 8005f94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f96:	e09d      	b.n	80060d4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da18      	bge.n	8005fd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	61fb      	str	r3, [r7, #28]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc6:	6850      	ldr	r0, [r2, #4]
 8005fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fca:	6892      	ldr	r2, [r2, #8]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db7d      	blt.n	80060d2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fa08 	bl	80043fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fec:	463b      	mov	r3, r7
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff ff6c 	bl	8005ecc <prvSampleTimeNow>
 8005ff4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b09      	cmp	r3, #9
 8005ffa:	d86b      	bhi.n	80060d4 <prvProcessReceivedCommands+0x144>
 8005ffc:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <prvProcessReceivedCommands+0x74>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	0800602d 	.word	0x0800602d
 8006008:	0800602d 	.word	0x0800602d
 800600c:	0800602d 	.word	0x0800602d
 8006010:	080060d5 	.word	0x080060d5
 8006014:	08006089 	.word	0x08006089
 8006018:	080060c1 	.word	0x080060c1
 800601c:	0800602d 	.word	0x0800602d
 8006020:	0800602d 	.word	0x0800602d
 8006024:	080060d5 	.word	0x080060d5
 8006028:	08006089 	.word	0x08006089
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	18d1      	adds	r1, r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800603a:	f7ff ff67 	bl	8005f0c <prvInsertTimerInActiveList>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d047      	beq.n	80060d4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800604a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d13f      	bne.n	80060d4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	441a      	add	r2, r3
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2300      	movs	r3, #0
 8006062:	2100      	movs	r1, #0
 8006064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006066:	f7ff fe1f 	bl	8005ca8 <xTimerGenericCommand>
 800606a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d130      	bne.n	80060d4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	61bb      	str	r3, [r7, #24]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	617b      	str	r3, [r7, #20]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	18d1      	adds	r1, r2, r3
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ba:	f7ff ff27 	bl	8005f0c <prvInsertTimerInActiveList>
					break;
 80060be:	e009      	b.n	80060d4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80060ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060cc:	f000 fbc8 	bl	8006860 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060d0:	e000      	b.n	80060d4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <prvProcessReceivedCommands+0x164>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1d39      	adds	r1, r7, #4
 80060da:	2200      	movs	r2, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe fc4f 	bl	8004980 <xQueueReceive>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f47f af57 	bne.w	8005f98 <prvProcessReceivedCommands+0x8>
	}
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	3730      	adds	r7, #48	; 0x30
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000c18 	.word	0x20000c18

080060f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060fe:	e045      	b.n	800618c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006100:	4b2c      	ldr	r3, [pc, #176]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800610a:	4b2a      	ldr	r3, [pc, #168]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe f96f 	bl	80043fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d12e      	bne.n	800618c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	429a      	cmp	r2, r3
 800613e:	d90e      	bls.n	800615e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800614c:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe f917 	bl	800438a <vListInsert>
 800615c:	e016      	b.n	800618c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800615e:	2300      	movs	r3, #0
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	2300      	movs	r3, #0
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	2100      	movs	r1, #0
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fd9d 	bl	8005ca8 <xTimerGenericCommand>
 800616e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	603b      	str	r3, [r7, #0]
}
 8006188:	bf00      	nop
 800618a:	e7fe      	b.n	800618a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800618c:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1b4      	bne.n	8006100 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800619c:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a04      	ldr	r2, [pc, #16]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 80061a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061a4:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6013      	str	r3, [r2, #0]
}
 80061aa:	bf00      	nop
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000c10 	.word	0x20000c10
 80061b8:	20000c14 	.word	0x20000c14

080061bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061c2:	f000 f967 	bl	8006494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061c6:	4b15      	ldr	r3, [pc, #84]	; (800621c <prvCheckForValidListAndQueue+0x60>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d120      	bne.n	8006210 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061ce:	4814      	ldr	r0, [pc, #80]	; (8006220 <prvCheckForValidListAndQueue+0x64>)
 80061d0:	f7fe f88a 	bl	80042e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061d4:	4813      	ldr	r0, [pc, #76]	; (8006224 <prvCheckForValidListAndQueue+0x68>)
 80061d6:	f7fe f887 	bl	80042e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061da:	4b13      	ldr	r3, [pc, #76]	; (8006228 <prvCheckForValidListAndQueue+0x6c>)
 80061dc:	4a10      	ldr	r2, [pc, #64]	; (8006220 <prvCheckForValidListAndQueue+0x64>)
 80061de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061e0:	4b12      	ldr	r3, [pc, #72]	; (800622c <prvCheckForValidListAndQueue+0x70>)
 80061e2:	4a10      	ldr	r2, [pc, #64]	; (8006224 <prvCheckForValidListAndQueue+0x68>)
 80061e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061e6:	2300      	movs	r3, #0
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4b11      	ldr	r3, [pc, #68]	; (8006230 <prvCheckForValidListAndQueue+0x74>)
 80061ec:	4a11      	ldr	r2, [pc, #68]	; (8006234 <prvCheckForValidListAndQueue+0x78>)
 80061ee:	2110      	movs	r1, #16
 80061f0:	200a      	movs	r0, #10
 80061f2:	f7fe f995 	bl	8004520 <xQueueGenericCreateStatic>
 80061f6:	4603      	mov	r3, r0
 80061f8:	4a08      	ldr	r2, [pc, #32]	; (800621c <prvCheckForValidListAndQueue+0x60>)
 80061fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <prvCheckForValidListAndQueue+0x60>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <prvCheckForValidListAndQueue+0x60>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	490b      	ldr	r1, [pc, #44]	; (8006238 <prvCheckForValidListAndQueue+0x7c>)
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fda8 	bl	8004d60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006210:	f000 f970 	bl	80064f4 <vPortExitCritical>
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000c18 	.word	0x20000c18
 8006220:	20000be8 	.word	0x20000be8
 8006224:	20000bfc 	.word	0x20000bfc
 8006228:	20000c10 	.word	0x20000c10
 800622c:	20000c14 	.word	0x20000c14
 8006230:	20000cc4 	.word	0x20000cc4
 8006234:	20000c24 	.word	0x20000c24
 8006238:	08006b44 	.word	0x08006b44

0800623c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3b04      	subs	r3, #4
 800624c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3b04      	subs	r3, #4
 800625a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b04      	subs	r3, #4
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800626c:	4a0c      	ldr	r2, [pc, #48]	; (80062a0 <pxPortInitialiseStack+0x64>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3b14      	subs	r3, #20
 8006276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3b04      	subs	r3, #4
 8006282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f06f 0202 	mvn.w	r2, #2
 800628a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3b20      	subs	r3, #32
 8006290:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006292:	68fb      	ldr	r3, [r7, #12]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	080062a5 	.word	0x080062a5

080062a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062ae:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <prvTaskExitError+0x54>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d00a      	beq.n	80062ce <prvTaskExitError+0x2a>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	60fb      	str	r3, [r7, #12]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <prvTaskExitError+0x28>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	60bb      	str	r3, [r7, #8]
}
 80062e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062e2:	bf00      	nop
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0fc      	beq.n	80062e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062ea:	bf00      	nop
 80062ec:	bf00      	nop
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	2000000c 	.word	0x2000000c
 80062fc:	00000000 	.word	0x00000000

08006300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <pxCurrentTCBConst2>)
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	6808      	ldr	r0, [r1, #0]
 8006306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	f380 8809 	msr	PSP, r0
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8811 	msr	BASEPRI, r0
 800631a:	4770      	bx	lr
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst2>:
 8006320:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006328:	4808      	ldr	r0, [pc, #32]	; (800634c <prvPortStartFirstTask+0x24>)
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	6800      	ldr	r0, [r0, #0]
 800632e:	f380 8808 	msr	MSP, r0
 8006332:	f04f 0000 	mov.w	r0, #0
 8006336:	f380 8814 	msr	CONTROL, r0
 800633a:	b662      	cpsie	i
 800633c:	b661      	cpsie	f
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	df00      	svc	0
 8006348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800634a:	bf00      	nop
 800634c:	e000ed08 	.word	0xe000ed08

08006350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006356:	4b46      	ldr	r3, [pc, #280]	; (8006470 <xPortStartScheduler+0x120>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a46      	ldr	r2, [pc, #280]	; (8006474 <xPortStartScheduler+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10a      	bne.n	8006376 <xPortStartScheduler+0x26>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	613b      	str	r3, [r7, #16]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006376:	4b3e      	ldr	r3, [pc, #248]	; (8006470 <xPortStartScheduler+0x120>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3f      	ldr	r2, [pc, #252]	; (8006478 <xPortStartScheduler+0x128>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d10a      	bne.n	8006396 <xPortStartScheduler+0x46>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <xPortStartScheduler+0x12c>)
 8006398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	22ff      	movs	r2, #255	; 0xff
 80063a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4b31      	ldr	r3, [pc, #196]	; (8006480 <xPortStartScheduler+0x130>)
 80063bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063be:	4b31      	ldr	r3, [pc, #196]	; (8006484 <xPortStartScheduler+0x134>)
 80063c0:	2207      	movs	r2, #7
 80063c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063c4:	e009      	b.n	80063da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80063c6:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <xPortStartScheduler+0x134>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	4a2d      	ldr	r2, [pc, #180]	; (8006484 <xPortStartScheduler+0x134>)
 80063ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d0ef      	beq.n	80063c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063e6:	4b27      	ldr	r3, [pc, #156]	; (8006484 <xPortStartScheduler+0x134>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1c3 0307 	rsb	r3, r3, #7
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d00a      	beq.n	8006408 <xPortStartScheduler+0xb8>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60bb      	str	r3, [r7, #8]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006408:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <xPortStartScheduler+0x134>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	4a1d      	ldr	r2, [pc, #116]	; (8006484 <xPortStartScheduler+0x134>)
 8006410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006412:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <xPortStartScheduler+0x134>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800641a:	4a1a      	ldr	r2, [pc, #104]	; (8006484 <xPortStartScheduler+0x134>)
 800641c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	b2da      	uxtb	r2, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <xPortStartScheduler+0x138>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <xPortStartScheduler+0x138>)
 800642c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <xPortStartScheduler+0x138>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a14      	ldr	r2, [pc, #80]	; (8006488 <xPortStartScheduler+0x138>)
 8006438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800643c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800643e:	f000 f8dd 	bl	80065fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <xPortStartScheduler+0x13c>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006448:	f000 f8fc 	bl	8006644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <xPortStartScheduler+0x140>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <xPortStartScheduler+0x140>)
 8006452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006458:	f7ff ff66 	bl	8006328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800645c:	f7ff f88a 	bl	8005574 <vTaskSwitchContext>
	prvTaskExitError();
 8006460:	f7ff ff20 	bl	80062a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	e000ed00 	.word	0xe000ed00
 8006474:	410fc271 	.word	0x410fc271
 8006478:	410fc270 	.word	0x410fc270
 800647c:	e000e400 	.word	0xe000e400
 8006480:	20000d14 	.word	0x20000d14
 8006484:	20000d18 	.word	0x20000d18
 8006488:	e000ed20 	.word	0xe000ed20
 800648c:	2000000c 	.word	0x2000000c
 8006490:	e000ef34 	.word	0xe000ef34

08006494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	607b      	str	r3, [r7, #4]
}
 80064ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <vPortEnterCritical+0x58>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a0d      	ldr	r2, [pc, #52]	; (80064ec <vPortEnterCritical+0x58>)
 80064b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <vPortEnterCritical+0x58>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10f      	bne.n	80064e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortEnterCritical+0x5c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	603b      	str	r3, [r7, #0]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vPortEnterCritical+0x4a>
	}
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	2000000c 	.word	0x2000000c
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064fa:	4b12      	ldr	r3, [pc, #72]	; (8006544 <vPortExitCritical+0x50>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <vPortExitCritical+0x24>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	607b      	str	r3, [r7, #4]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <vPortExitCritical+0x50>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3b01      	subs	r3, #1
 800651e:	4a09      	ldr	r2, [pc, #36]	; (8006544 <vPortExitCritical+0x50>)
 8006520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006522:	4b08      	ldr	r3, [pc, #32]	; (8006544 <vPortExitCritical+0x50>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <vPortExitCritical+0x42>
 800652a:	2300      	movs	r3, #0
 800652c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	f383 8811 	msr	BASEPRI, r3
}
 8006534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	2000000c 	.word	0x2000000c
	...

08006550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006550:	f3ef 8009 	mrs	r0, PSP
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <pxCurrentTCBConst>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f01e 0f10 	tst.w	lr, #16
 8006560:	bf08      	it	eq
 8006562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	6010      	str	r0, [r2, #0]
 800656c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006574:	f380 8811 	msr	BASEPRI, r0
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f7fe fff8 	bl	8005574 <vTaskSwitchContext>
 8006584:	f04f 0000 	mov.w	r0, #0
 8006588:	f380 8811 	msr	BASEPRI, r0
 800658c:	bc09      	pop	{r0, r3}
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	6808      	ldr	r0, [r1, #0]
 8006592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006596:	f01e 0f10 	tst.w	lr, #16
 800659a:	bf08      	it	eq
 800659c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065a0:	f380 8809 	msr	PSP, r0
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst>:
 80065b0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065d2:	f7fe ff11 	bl	80053f8 <xTaskIncrementTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <SysTick_Handler+0x40>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f383 8811 	msr	BASEPRI, r3
}
 80065ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <vPortSetupTimerInterrupt+0x38>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <vPortSetupTimerInterrupt+0x3c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <vPortSetupTimerInterrupt+0x40>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <vPortSetupTimerInterrupt+0x44>)
 800661a:	3b01      	subs	r3, #1
 800661c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006620:	2207      	movs	r2, #7
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	e000e010 	.word	0xe000e010
 8006634:	e000e018 	.word	0xe000e018
 8006638:	20000000 	.word	0x20000000
 800663c:	10624dd3 	.word	0x10624dd3
 8006640:	e000e014 	.word	0xe000e014

08006644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006654 <vPortEnableVFP+0x10>
 8006648:	6801      	ldr	r1, [r0, #0]
 800664a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800664e:	6001      	str	r1, [r0, #0]
 8006650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006652:	bf00      	nop
 8006654:	e000ed88 	.word	0xe000ed88

08006658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800665e:	f3ef 8305 	mrs	r3, IPSR
 8006662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	d914      	bls.n	8006694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800666a:	4a17      	ldr	r2, [pc, #92]	; (80066c8 <vPortValidateInterruptPriority+0x70>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <vPortValidateInterruptPriority+0x74>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	7afa      	ldrb	r2, [r7, #11]
 800667a:	429a      	cmp	r2, r3
 800667c:	d20a      	bcs.n	8006694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <vPortValidateInterruptPriority+0x78>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800669c:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <vPortValidateInterruptPriority+0x7c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d90a      	bls.n	80066ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	603b      	str	r3, [r7, #0]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <vPortValidateInterruptPriority+0x60>
	}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	e000e3f0 	.word	0xe000e3f0
 80066cc:	20000d14 	.word	0x20000d14
 80066d0:	e000ed0c 	.word	0xe000ed0c
 80066d4:	20000d18 	.word	0x20000d18

080066d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066e4:	f7fe fdcc 	bl	8005280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066e8:	4b58      	ldr	r3, [pc, #352]	; (800684c <pvPortMalloc+0x174>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066f0:	f000 f910 	bl	8006914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066f4:	4b56      	ldr	r3, [pc, #344]	; (8006850 <pvPortMalloc+0x178>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 808e 	bne.w	800681e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01d      	beq.n	8006744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006708:	2208      	movs	r2, #8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d014      	beq.n	8006744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f023 0307 	bic.w	r3, r3, #7
 8006720:	3308      	adds	r3, #8
 8006722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <pvPortMalloc+0x6c>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	617b      	str	r3, [r7, #20]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d069      	beq.n	800681e <pvPortMalloc+0x146>
 800674a:	4b42      	ldr	r3, [pc, #264]	; (8006854 <pvPortMalloc+0x17c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d864      	bhi.n	800681e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006754:	4b40      	ldr	r3, [pc, #256]	; (8006858 <pvPortMalloc+0x180>)
 8006756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006758:	4b3f      	ldr	r3, [pc, #252]	; (8006858 <pvPortMalloc+0x180>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800675e:	e004      	b.n	800676a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <pvPortMalloc+0xa4>
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f1      	bne.n	8006760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800677c:	4b33      	ldr	r3, [pc, #204]	; (800684c <pvPortMalloc+0x174>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	429a      	cmp	r2, r3
 8006784:	d04b      	beq.n	800681e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2208      	movs	r2, #8
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	2308      	movs	r3, #8
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d91f      	bls.n	80067e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <pvPortMalloc+0xf8>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	613b      	str	r3, [r7, #16]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	1ad2      	subs	r2, r2, r3
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067e2:	69b8      	ldr	r0, [r7, #24]
 80067e4:	f000 f8f8 	bl	80069d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067e8:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <pvPortMalloc+0x17c>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	4a18      	ldr	r2, [pc, #96]	; (8006854 <pvPortMalloc+0x17c>)
 80067f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067f6:	4b17      	ldr	r3, [pc, #92]	; (8006854 <pvPortMalloc+0x17c>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b18      	ldr	r3, [pc, #96]	; (800685c <pvPortMalloc+0x184>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d203      	bcs.n	800680a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <pvPortMalloc+0x17c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a15      	ldr	r2, [pc, #84]	; (800685c <pvPortMalloc+0x184>)
 8006808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	4b10      	ldr	r3, [pc, #64]	; (8006850 <pvPortMalloc+0x178>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	431a      	orrs	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800681e:	f7fe fd3d 	bl	800529c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <pvPortMalloc+0x16a>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60fb      	str	r3, [r7, #12]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <pvPortMalloc+0x168>
	return pvReturn;
 8006842:	69fb      	ldr	r3, [r7, #28]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3728      	adds	r7, #40	; 0x28
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20001924 	.word	0x20001924
 8006850:	20001930 	.word	0x20001930
 8006854:	20001928 	.word	0x20001928
 8006858:	2000191c 	.word	0x2000191c
 800685c:	2000192c 	.word	0x2000192c

08006860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d048      	beq.n	8006904 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006872:	2308      	movs	r3, #8
 8006874:	425b      	negs	r3, r3
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4413      	add	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	4b21      	ldr	r3, [pc, #132]	; (800690c <vPortFree+0xac>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4013      	ands	r3, r2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <vPortFree+0x44>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	60fb      	str	r3, [r7, #12]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <vPortFree+0x62>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60bb      	str	r3, [r7, #8]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <vPortFree+0xac>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d019      	beq.n	8006904 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d115      	bne.n	8006904 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <vPortFree+0xac>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	401a      	ands	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068e8:	f7fe fcca 	bl	8005280 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <vPortFree+0xb0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4413      	add	r3, r2
 80068f6:	4a06      	ldr	r2, [pc, #24]	; (8006910 <vPortFree+0xb0>)
 80068f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068fa:	6938      	ldr	r0, [r7, #16]
 80068fc:	f000 f86c 	bl	80069d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006900:	f7fe fccc 	bl	800529c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006904:	bf00      	nop
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20001930 	.word	0x20001930
 8006910:	20001928 	.word	0x20001928

08006914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800691a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800691e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006920:	4b27      	ldr	r3, [pc, #156]	; (80069c0 <prvHeapInit+0xac>)
 8006922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3307      	adds	r3, #7
 8006932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0307 	bic.w	r3, r3, #7
 800693a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	4a1f      	ldr	r2, [pc, #124]	; (80069c0 <prvHeapInit+0xac>)
 8006944:	4413      	add	r3, r2
 8006946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800694c:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <prvHeapInit+0xb0>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <prvHeapInit+0xb0>)
 8006954:	2200      	movs	r2, #0
 8006956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	4413      	add	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006960:	2208      	movs	r2, #8
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0307 	bic.w	r3, r3, #7
 800696e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <prvHeapInit+0xb4>)
 8006974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006976:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <prvHeapInit+0xb4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800697e:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <prvHeapInit+0xb4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006994:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <prvHeapInit+0xb4>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <prvHeapInit+0xb8>)
 80069a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <prvHeapInit+0xbc>)
 80069aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <prvHeapInit+0xc0>)
 80069ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069b2:	601a      	str	r2, [r3, #0]
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20000d1c 	.word	0x20000d1c
 80069c4:	2000191c 	.word	0x2000191c
 80069c8:	20001924 	.word	0x20001924
 80069cc:	2000192c 	.word	0x2000192c
 80069d0:	20001928 	.word	0x20001928
 80069d4:	20001930 	.word	0x20001930

080069d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069e0:	4b28      	ldr	r3, [pc, #160]	; (8006a84 <prvInsertBlockIntoFreeList+0xac>)
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e002      	b.n	80069ec <prvInsertBlockIntoFreeList+0x14>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d8f7      	bhi.n	80069e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d108      	bne.n	8006a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	441a      	add	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	441a      	add	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d118      	bne.n	8006a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <prvInsertBlockIntoFreeList+0xb0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d00d      	beq.n	8006a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	441a      	add	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	e008      	b.n	8006a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a56:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <prvInsertBlockIntoFreeList+0xb0>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e003      	b.n	8006a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d002      	beq.n	8006a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a76:	bf00      	nop
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000191c 	.word	0x2000191c
 8006a88:	20001924 	.word	0x20001924

08006a8c <__libc_init_array>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ac4 <__libc_init_array+0x38>)
 8006a90:	4c0d      	ldr	r4, [pc, #52]	; (8006ac8 <__libc_init_array+0x3c>)
 8006a92:	1b64      	subs	r4, r4, r5
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	2600      	movs	r6, #0
 8006a98:	42a6      	cmp	r6, r4
 8006a9a:	d109      	bne.n	8006ab0 <__libc_init_array+0x24>
 8006a9c:	4d0b      	ldr	r5, [pc, #44]	; (8006acc <__libc_init_array+0x40>)
 8006a9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ad0 <__libc_init_array+0x44>)
 8006aa0:	f000 f82e 	bl	8006b00 <_init>
 8006aa4:	1b64      	subs	r4, r4, r5
 8006aa6:	10a4      	asrs	r4, r4, #2
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	42a6      	cmp	r6, r4
 8006aac:	d105      	bne.n	8006aba <__libc_init_array+0x2e>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab4:	4798      	blx	r3
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7ee      	b.n	8006a98 <__libc_init_array+0xc>
 8006aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abe:	4798      	blx	r3
 8006ac0:	3601      	adds	r6, #1
 8006ac2:	e7f2      	b.n	8006aaa <__libc_init_array+0x1e>
 8006ac4:	08006bcc 	.word	0x08006bcc
 8006ac8:	08006bcc 	.word	0x08006bcc
 8006acc:	08006bcc 	.word	0x08006bcc
 8006ad0:	08006bd0 	.word	0x08006bd0

08006ad4 <memcpy>:
 8006ad4:	440a      	add	r2, r1
 8006ad6:	4291      	cmp	r1, r2
 8006ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006adc:	d100      	bne.n	8006ae0 <memcpy+0xc>
 8006ade:	4770      	bx	lr
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aea:	4291      	cmp	r1, r2
 8006aec:	d1f9      	bne.n	8006ae2 <memcpy+0xe>
 8006aee:	bd10      	pop	{r4, pc}

08006af0 <memset>:
 8006af0:	4402      	add	r2, r0
 8006af2:	4603      	mov	r3, r0
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d100      	bne.n	8006afa <memset+0xa>
 8006af8:	4770      	bx	lr
 8006afa:	f803 1b01 	strb.w	r1, [r3], #1
 8006afe:	e7f9      	b.n	8006af4 <memset+0x4>

08006b00 <_init>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr

08006b0c <_fini>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr
